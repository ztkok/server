// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game.proto

/*
	Package protoMsg is a generated protocol buffer package.

	It is generated from these files:
		game.proto

	It has these top-level messages:
		UserMainDataNotify
		Vector3
		T_Object
		ChracterMapDataInfo
		RefreshObjectNotify
		UseObjectReq
		RemoveObjectNotify
		RefreshGunNotify
		DropGunNotify
		ExchangeGunReq
		ExchangeGunRet
		GunReformReq
		GunReformUnequipReq
		AttackReq
		ShootReq
		MapCharacterResultNotify
		ChatNotify
		ZoneNotify
		ChangeBulletReq
		ChangeBulletRet
		TeamMemberInfo
		SyncTeamInfoRet
		RefreshPackCellNotify
		SummonAINotify
		RefreshGunBulletNotify
		InitRoomTeamPlayerItem
		InitRoomTeamInfoRet
		SyncRoomTeamPlayerItem
		SymcRoomTeamInfoRet
		DieNotifyRet
		CopilotData
		VehicleProp
		ItemProp
		RefreshBoxObjNotify
		HeadProp
		BodyProp
		BackPackProp
		PlayerRegister
		PlayerLogin
		PlayerLogout
		MailObject
		MailInfo
		MailInfoList
		ReqGetMailList
		RetMailList
		ReqMailInfo
		RetMailInfo
		DelMail
		GetMailObj
		AnnuonceInfo
		InitAnnuonceInfoRet
		FriendInfo
		PlatFriendStateReq
		PlatFriendState
		PlatFriendStateRet
		FriendRankInfo
		SyncFriendRankList
		SyncFriendList
		FriendApplyInfo
		SyncFriendApplyList
		DoSendItemReq
		GameSvrState
		RoundFlow
		CareerData
		CareerBase
		MatchRecord
		DayRecordData
		SettleDayData
		DayTag
		VehiclePhysics
		Vehicle
		DamageDefend
		ThrowDamageInfo
		DoorList
		DoorData
		LogItem
		SpaceLogInfo
		GuideFlow
		ChatFlow
		BattleItemFlow
		BattleFlow
		BattleResult
		MatchFlow
		LiveFlow
		GunFlow
		CampFlow
		ShopFlow
		OperFlow
		MoneyFlow
		SnsFlow
		SecGameStartFlow
		SecGameEndFlow
		ShareRMBMoney
		OwnGoodsItem
		OwnGoodsInfo
		MemVoiceInfo
		TeamVoiceInfo
		SettleMemInfo
		SettleInfo
		RefreshObjectListNotify
		StrangerList
		ReConnetionFlow
		DropBoxInfo
		DropBoxList
		ItemFlow
		ModeInfo
		MatchModeNotify
		ActivityState
		ActivitysInfo
		MedalDataItem
		MedalDataList
		KillDrop
		KillDropList
		GoodRecordFlow
		GoodsTimeLeft
		GoodsTimeLeftNotify
		NewYearGood
		NewYearInfo
		AchievementFlow
		InsigniaFlow
		Achievement
		AchievementProcess
		AchievmentInfo
		Insignia
		InsigniaInfo
		AwardItem
		SeasonAwards
		WearInGame
		WearInGameFlow
		EliteWeaponPos
		EliteWeaponPosList
		DropBoxPos
		DropBoxPosList
		TreasureBoxInfo
		TreasureBoxList
		TreasureBoxFlow
		MilitaryRankFlow
		TaskItem
		TaskUpdate
		ActiveAwardsBox
		DayTaskDetail
		DayTaskFlow
		ActivenessFlow
		ComradeTaskFlow
		PlayerPos
		PlayerPosList
		FollowInfo
		FollowDetail
		ShellExplodeNotify
		AwardInfo
		OldBringNewDetail
		ComradeTaskDetail
		VeteranInfo
		VeteranRecallList
		VeteranRecallReward
		WeaponInfo
		WeaponInGame
		VehicleFullNotify
		PreferenceInfo
		PreferenceList
		PreferenceFlow
		GameRecordDetail
		ContestInfo
		ChampionContestInfo
		OddsInfo
		ChampionOddsInfo
		ContestRecord
		ChampionContestRecord
		WorldCupMatch
		WorldCupMatchInfo
		WorldCupMatchRecord
		WorldCupMatchRecordInfo
		FestivalInfo
		FestivalList
		ExchangeInfo
		ExchangeList
		ExchangeTotalList
		FestivalFlow
		ExchangeFlow
		BallStarReward
		BallStarInfo
		BallStarFlow
		CheaterReportFlow
		WorldCupChampionFlow
		WorldCupMatchFlow
		TaskList
		AwardList
		TaskDetail
		SpecialTaskDetail
		TaskFlow
		ChaterInfo
		TeamCustom
		ChatDetail
		ChatInfo
		UnreadChatDetail
		AnnouncementDetail
		SkillPosition
		ModeSkillInfo
		RoleSkillInfo
		AllSkillList
		SkillEffect
		SkillEffectList
		BattleBookingFlow
		CommonTaskList
		ChallengeTaskDetail
		BattleBookingInfo
		SpecialExpFlow
		WatchFlow
		Uint32Array
		MonthCardFlow
		RedDotOnce
		RedDotList
		SeasonExpFlow
		SkillUseFlow
		BuyGoodsFlow
*/
package protoMsg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// s-->c 玩家主数据
type UserMainDataNotify struct {
	Uid   uint64 `protobuf:"varint,1,opt,name=uid" json:"uid"`
	Name_ string `protobuf:"bytes,2,opt,name=name" json:"name"`
	Coins uint64 `protobuf:"varint,3,opt,name=coins" json:"coins"`
	Diams uint64 `protobuf:"varint,4,opt,name=diams" json:"diams"`
}

func (m *UserMainDataNotify) Reset()                    { *m = UserMainDataNotify{} }
func (m *UserMainDataNotify) String() string            { return proto.CompactTextString(m) }
func (*UserMainDataNotify) ProtoMessage()               {}
func (*UserMainDataNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{0} }

func (m *UserMainDataNotify) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserMainDataNotify) GetName_() string {
	if m != nil {
		return m.Name_
	}
	return ""
}

func (m *UserMainDataNotify) GetCoins() uint64 {
	if m != nil {
		return m.Coins
	}
	return 0
}

func (m *UserMainDataNotify) GetDiams() uint64 {
	if m != nil {
		return m.Diams
	}
	return 0
}

// 坐标
type Vector3 struct {
	X float32 `protobuf:"fixed32,1,opt,name=x" json:"x"`
	Y float32 `protobuf:"fixed32,2,opt,name=y" json:"y"`
	Z float32 `protobuf:"fixed32,3,opt,name=z" json:"z"`
}

func (m *Vector3) Reset()                    { *m = Vector3{} }
func (m *Vector3) String() string            { return proto.CompactTextString(m) }
func (*Vector3) ProtoMessage()               {}
func (*Vector3) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{1} }

func (m *Vector3) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector3) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vector3) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

type T_Object struct {
	Baseid    uint32   `protobuf:"varint,1,opt,name=baseid" json:"baseid"`
	Thisid    uint64   `protobuf:"varint,2,opt,name=thisid" json:"thisid"`
	Count     uint32   `protobuf:"varint,3,opt,name=count" json:"count"`
	Gunreform []uint32 `protobuf:"varint,4,rep,name=gunreform" json:"gunreform,omitempty"`
	Bullet    uint32   `protobuf:"varint,5,opt,name=bullet" json:"bullet"`
	Reducedam uint32   `protobuf:"varint,6,opt,name=reducedam" json:"reducedam"`
}

func (m *T_Object) Reset()                    { *m = T_Object{} }
func (m *T_Object) String() string            { return proto.CompactTextString(m) }
func (*T_Object) ProtoMessage()               {}
func (*T_Object) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{2} }

func (m *T_Object) GetBaseid() uint32 {
	if m != nil {
		return m.Baseid
	}
	return 0
}

func (m *T_Object) GetThisid() uint64 {
	if m != nil {
		return m.Thisid
	}
	return 0
}

func (m *T_Object) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *T_Object) GetGunreform() []uint32 {
	if m != nil {
		return m.Gunreform
	}
	return nil
}

func (m *T_Object) GetBullet() uint32 {
	if m != nil {
		return m.Bullet
	}
	return 0
}

func (m *T_Object) GetReducedam() uint32 {
	if m != nil {
		return m.Reducedam
	}
	return 0
}

// 玩家地图数据
type ChracterMapDataInfo struct {
	Uid         uint64    `protobuf:"varint,1,opt,name=uid" json:"uid"`
	Name_       string    `protobuf:"bytes,2,opt,name=name" json:"name"`
	Level       uint32    `protobuf:"varint,3,opt,name=level" json:"level"`
	Pos         *Vector3  `protobuf:"bytes,4,opt,name=pos" json:"pos,omitempty"`
	Mvspeed     float32   `protobuf:"fixed32,5,opt,name=mvspeed" json:"mvspeed"`
	Maxhp       uint32    `protobuf:"varint,6,opt,name=maxhp" json:"maxhp"`
	Hp          uint32    `protobuf:"varint,7,opt,name=hp" json:"hp"`
	Orientation float32   `protobuf:"fixed32,8,opt,name=orientation" json:"orientation"`
	Weapon      *T_Object `protobuf:"bytes,9,opt,name=weapon" json:"weapon,omitempty"`
	Secweapon   *T_Object `protobuf:"bytes,10,opt,name=secweapon" json:"secweapon,omitempty"`
	Armors      []uint32  `protobuf:"varint,11,rep,name=armors" json:"armors,omitempty"`
}

func (m *ChracterMapDataInfo) Reset()                    { *m = ChracterMapDataInfo{} }
func (m *ChracterMapDataInfo) String() string            { return proto.CompactTextString(m) }
func (*ChracterMapDataInfo) ProtoMessage()               {}
func (*ChracterMapDataInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{3} }

func (m *ChracterMapDataInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ChracterMapDataInfo) GetName_() string {
	if m != nil {
		return m.Name_
	}
	return ""
}

func (m *ChracterMapDataInfo) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ChracterMapDataInfo) GetPos() *Vector3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *ChracterMapDataInfo) GetMvspeed() float32 {
	if m != nil {
		return m.Mvspeed
	}
	return 0
}

func (m *ChracterMapDataInfo) GetMaxhp() uint32 {
	if m != nil {
		return m.Maxhp
	}
	return 0
}

func (m *ChracterMapDataInfo) GetHp() uint32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *ChracterMapDataInfo) GetOrientation() float32 {
	if m != nil {
		return m.Orientation
	}
	return 0
}

func (m *ChracterMapDataInfo) GetWeapon() *T_Object {
	if m != nil {
		return m.Weapon
	}
	return nil
}

func (m *ChracterMapDataInfo) GetSecweapon() *T_Object {
	if m != nil {
		return m.Secweapon
	}
	return nil
}

func (m *ChracterMapDataInfo) GetArmors() []uint32 {
	if m != nil {
		return m.Armors
	}
	return nil
}

// s-->c 更新背包道具
type RefreshObjectNotify struct {
	Obj *T_Object `protobuf:"bytes,1,opt,name=obj" json:"obj,omitempty"`
}

func (m *RefreshObjectNotify) Reset()                    { *m = RefreshObjectNotify{} }
func (m *RefreshObjectNotify) String() string            { return proto.CompactTextString(m) }
func (*RefreshObjectNotify) ProtoMessage()               {}
func (*RefreshObjectNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{4} }

func (m *RefreshObjectNotify) GetObj() *T_Object {
	if m != nil {
		return m.Obj
	}
	return nil
}

// c-->s 使用背包道具
type UseObjectReq struct {
	Thisid uint64 `protobuf:"varint,1,opt,name=thisid" json:"thisid"`
}

func (m *UseObjectReq) Reset()                    { *m = UseObjectReq{} }
func (m *UseObjectReq) String() string            { return proto.CompactTextString(m) }
func (*UseObjectReq) ProtoMessage()               {}
func (*UseObjectReq) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{5} }

func (m *UseObjectReq) GetThisid() uint64 {
	if m != nil {
		return m.Thisid
	}
	return 0
}

// s-->c 删除背包道具
type RemoveObjectNotify struct {
	Thisid uint64 `protobuf:"varint,1,opt,name=thisid" json:"thisid"`
}

func (m *RemoveObjectNotify) Reset()                    { *m = RemoveObjectNotify{} }
func (m *RemoveObjectNotify) String() string            { return proto.CompactTextString(m) }
func (*RemoveObjectNotify) ProtoMessage()               {}
func (*RemoveObjectNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{6} }

func (m *RemoveObjectNotify) GetThisid() uint64 {
	if m != nil {
		return m.Thisid
	}
	return 0
}

// s-->c 更新武器列表
type RefreshGunNotify struct {
	Objs      *T_Object `protobuf:"bytes,1,opt,name=objs" json:"objs,omitempty"`
	Useweapon uint64    `protobuf:"varint,2,opt,name=useweapon" json:"useweapon"`
	Uid       uint64    `protobuf:"varint,3,opt,name=uid" json:"uid"`
}

func (m *RefreshGunNotify) Reset()                    { *m = RefreshGunNotify{} }
func (m *RefreshGunNotify) String() string            { return proto.CompactTextString(m) }
func (*RefreshGunNotify) ProtoMessage()               {}
func (*RefreshGunNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{7} }

func (m *RefreshGunNotify) GetObjs() *T_Object {
	if m != nil {
		return m.Objs
	}
	return nil
}

func (m *RefreshGunNotify) GetUseweapon() uint64 {
	if m != nil {
		return m.Useweapon
	}
	return 0
}

func (m *RefreshGunNotify) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// s-->c 丢掉武器
type DropGunNotify struct {
	Uid uint64    `protobuf:"varint,1,opt,name=uid" json:"uid"`
	Use *T_Object `protobuf:"bytes,2,opt,name=use" json:"use,omitempty"`
}

func (m *DropGunNotify) Reset()                    { *m = DropGunNotify{} }
func (m *DropGunNotify) String() string            { return proto.CompactTextString(m) }
func (*DropGunNotify) ProtoMessage()               {}
func (*DropGunNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{8} }

func (m *DropGunNotify) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *DropGunNotify) GetUse() *T_Object {
	if m != nil {
		return m.Use
	}
	return nil
}

// c-->s 枪支切换
type ExchangeGunReq struct {
	Useweapon uint64 `protobuf:"varint,1,opt,name=useweapon" json:"useweapon"`
}

func (m *ExchangeGunReq) Reset()                    { *m = ExchangeGunReq{} }
func (m *ExchangeGunReq) String() string            { return proto.CompactTextString(m) }
func (*ExchangeGunReq) ProtoMessage()               {}
func (*ExchangeGunReq) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{9} }

func (m *ExchangeGunReq) GetUseweapon() uint64 {
	if m != nil {
		return m.Useweapon
	}
	return 0
}

// s-->c
type ExchangeGunRet struct {
	Useweapon uint64 `protobuf:"varint,1,opt,name=useweapon" json:"useweapon"`
	Uid       uint64 `protobuf:"varint,2,opt,name=uid" json:"uid"`
}

func (m *ExchangeGunRet) Reset()                    { *m = ExchangeGunRet{} }
func (m *ExchangeGunRet) String() string            { return proto.CompactTextString(m) }
func (*ExchangeGunRet) ProtoMessage()               {}
func (*ExchangeGunRet) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{10} }

func (m *ExchangeGunRet) GetUseweapon() uint64 {
	if m != nil {
		return m.Useweapon
	}
	return 0
}

func (m *ExchangeGunRet) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// c-->s 枪支改造装备
type GunReformReq struct {
	Reformthisid uint64 `protobuf:"varint,1,opt,name=reformthisid" json:"reformthisid"`
	Gunthisid    uint64 `protobuf:"varint,2,opt,name=gunthisid" json:"gunthisid"`
}

func (m *GunReformReq) Reset()                    { *m = GunReformReq{} }
func (m *GunReformReq) String() string            { return proto.CompactTextString(m) }
func (*GunReformReq) ProtoMessage()               {}
func (*GunReformReq) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{11} }

func (m *GunReformReq) GetReformthisid() uint64 {
	if m != nil {
		return m.Reformthisid
	}
	return 0
}

func (m *GunReformReq) GetGunthisid() uint64 {
	if m != nil {
		return m.Gunthisid
	}
	return 0
}

// s-->c 枪支改造卸下
type GunReformUnequipReq struct {
	Gunthisid uint64 `protobuf:"varint,1,opt,name=gunthisid" json:"gunthisid"`
	Baseid    uint32 `protobuf:"varint,2,opt,name=baseid" json:"baseid"`
}

func (m *GunReformUnequipReq) Reset()                    { *m = GunReformUnequipReq{} }
func (m *GunReformUnequipReq) String() string            { return proto.CompactTextString(m) }
func (*GunReformUnequipReq) ProtoMessage()               {}
func (*GunReformUnequipReq) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{12} }

func (m *GunReformUnequipReq) GetGunthisid() uint64 {
	if m != nil {
		return m.Gunthisid
	}
	return 0
}

func (m *GunReformUnequipReq) GetBaseid() uint32 {
	if m != nil {
		return m.Baseid
	}
	return 0
}

// c<-->s 攻击
type AttackReq struct {
	Defendid  uint64   `protobuf:"varint,1,opt,name=defendid" json:"defendid"`
	Ishead    bool     `protobuf:"varint,2,opt,name=ishead" json:"ishead"`
	Origion   *Vector3 `protobuf:"bytes,3,opt,name=origion" json:"origion,omitempty"`
	Dir       *Vector3 `protobuf:"bytes,4,opt,name=dir" json:"dir,omitempty"`
	Firetime  uint32   `protobuf:"varint,5,opt,name=firetime" json:"firetime"`
	Distance  float32  `protobuf:"fixed32,6,opt,name=distance" json:"distance"`
	Attackid  uint64   `protobuf:"varint,7,opt,name=attackid" json:"attackid"`
	AttackPos uint32   `protobuf:"varint,8,opt,name=attackPos" json:"attackPos"`
}

func (m *AttackReq) Reset()                    { *m = AttackReq{} }
func (m *AttackReq) String() string            { return proto.CompactTextString(m) }
func (*AttackReq) ProtoMessage()               {}
func (*AttackReq) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{13} }

func (m *AttackReq) GetDefendid() uint64 {
	if m != nil {
		return m.Defendid
	}
	return 0
}

func (m *AttackReq) GetIshead() bool {
	if m != nil {
		return m.Ishead
	}
	return false
}

func (m *AttackReq) GetOrigion() *Vector3 {
	if m != nil {
		return m.Origion
	}
	return nil
}

func (m *AttackReq) GetDir() *Vector3 {
	if m != nil {
		return m.Dir
	}
	return nil
}

func (m *AttackReq) GetFiretime() uint32 {
	if m != nil {
		return m.Firetime
	}
	return 0
}

func (m *AttackReq) GetDistance() float32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *AttackReq) GetAttackid() uint64 {
	if m != nil {
		return m.Attackid
	}
	return 0
}

func (m *AttackReq) GetAttackPos() uint32 {
	if m != nil {
		return m.AttackPos
	}
	return 0
}

// c<-->s
type ShootReq struct {
	Issuc    bool   `protobuf:"varint,1,opt,name=issuc" json:"issuc"`
	Attackid uint64 `protobuf:"varint,2,opt,name=attackid" json:"attackid"`
}

func (m *ShootReq) Reset()                    { *m = ShootReq{} }
func (m *ShootReq) String() string            { return proto.CompactTextString(m) }
func (*ShootReq) ProtoMessage()               {}
func (*ShootReq) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{14} }

func (m *ShootReq) GetIssuc() bool {
	if m != nil {
		return m.Issuc
	}
	return false
}

func (m *ShootReq) GetAttackid() uint64 {
	if m != nil {
		return m.Attackid
	}
	return 0
}

// s-->c 结算
type MapCharacterResultNotify struct {
	Rank          uint32  `protobuf:"varint,1,opt,name=rank" json:"rank"`
	Kill          uint32  `protobuf:"varint,2,opt,name=kill" json:"kill"`
	Timeinseconds uint32  `protobuf:"varint,3,opt,name=timeinseconds" json:"timeinseconds"`
	Amount        uint32  `protobuf:"varint,4,opt,name=amount" json:"amount"`
	Round         uint32  `protobuf:"varint,5,opt,name=round" json:"round"`
	Headshotnum   uint32  `protobuf:"varint,6,opt,name=headshotnum" json:"headshotnum"`
	Shotnum       uint32  `protobuf:"varint,7,opt,name=shotnum" json:"shotnum"`
	Effectharm    uint32  `protobuf:"varint,8,opt,name=effectharm" json:"effectharm"`
	Recovernum    uint32  `protobuf:"varint,9,opt,name=recovernum" json:"recovernum"`
	Revivenum     uint32  `protobuf:"varint,10,opt,name=revivenum" json:"revivenum"`
	Killdistance  float32 `protobuf:"fixed32,11,opt,name=killdistance" json:"killdistance"`
	Destroycarnum uint32  `protobuf:"varint,12,opt,name=destroycarnum" json:"destroycarnum"`
	Killstmnum    uint32  `protobuf:"varint,13,opt,name=killstmnum" json:"killstmnum"`
	Attacknum     uint32  `protobuf:"varint,14,opt,name=attacknum" json:"attacknum"`
	Roadkillnum   uint32  `protobuf:"varint,15,opt,name=roadkillnum" json:"roadkillnum"`
	Clothnum      uint32  `protobuf:"varint,16,opt,name=clothnum" json:"clothnum"`
	Speednum      uint32  `protobuf:"varint,17,opt,name=speednum" json:"speednum"`
	Rundistance   float32 `protobuf:"fixed32,18,opt,name=rundistance" json:"rundistance"`
	Killscore     float32 `protobuf:"fixed32,19,opt,name=killscore" json:"killscore"`
	Rankscore     float32 `protobuf:"fixed32,20,opt,name=rankscore" json:"rankscore"`
	Totalrank     uint32  `protobuf:"varint,21,opt,name=totalrank" json:"totalrank"`
	Totalscore    float32 `protobuf:"fixed32,22,opt,name=totalscore" json:"totalscore"`
	Coin          uint32  `protobuf:"varint,23,opt,name=coin" json:"coin"`
	BraveCoin     string  `protobuf:"bytes,24,opt,name=braveCoin" json:"braveCoin"`
	Matchmode     uint32  `protobuf:"varint,25,opt,name=matchmode" json:"matchmode"`
}

func (m *MapCharacterResultNotify) Reset()                    { *m = MapCharacterResultNotify{} }
func (m *MapCharacterResultNotify) String() string            { return proto.CompactTextString(m) }
func (*MapCharacterResultNotify) ProtoMessage()               {}
func (*MapCharacterResultNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{15} }

func (m *MapCharacterResultNotify) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *MapCharacterResultNotify) GetKill() uint32 {
	if m != nil {
		return m.Kill
	}
	return 0
}

func (m *MapCharacterResultNotify) GetTimeinseconds() uint32 {
	if m != nil {
		return m.Timeinseconds
	}
	return 0
}

func (m *MapCharacterResultNotify) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MapCharacterResultNotify) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *MapCharacterResultNotify) GetHeadshotnum() uint32 {
	if m != nil {
		return m.Headshotnum
	}
	return 0
}

func (m *MapCharacterResultNotify) GetShotnum() uint32 {
	if m != nil {
		return m.Shotnum
	}
	return 0
}

func (m *MapCharacterResultNotify) GetEffectharm() uint32 {
	if m != nil {
		return m.Effectharm
	}
	return 0
}

func (m *MapCharacterResultNotify) GetRecovernum() uint32 {
	if m != nil {
		return m.Recovernum
	}
	return 0
}

func (m *MapCharacterResultNotify) GetRevivenum() uint32 {
	if m != nil {
		return m.Revivenum
	}
	return 0
}

func (m *MapCharacterResultNotify) GetKilldistance() float32 {
	if m != nil {
		return m.Killdistance
	}
	return 0
}

func (m *MapCharacterResultNotify) GetDestroycarnum() uint32 {
	if m != nil {
		return m.Destroycarnum
	}
	return 0
}

func (m *MapCharacterResultNotify) GetKillstmnum() uint32 {
	if m != nil {
		return m.Killstmnum
	}
	return 0
}

func (m *MapCharacterResultNotify) GetAttacknum() uint32 {
	if m != nil {
		return m.Attacknum
	}
	return 0
}

func (m *MapCharacterResultNotify) GetRoadkillnum() uint32 {
	if m != nil {
		return m.Roadkillnum
	}
	return 0
}

func (m *MapCharacterResultNotify) GetClothnum() uint32 {
	if m != nil {
		return m.Clothnum
	}
	return 0
}

func (m *MapCharacterResultNotify) GetSpeednum() uint32 {
	if m != nil {
		return m.Speednum
	}
	return 0
}

func (m *MapCharacterResultNotify) GetRundistance() float32 {
	if m != nil {
		return m.Rundistance
	}
	return 0
}

func (m *MapCharacterResultNotify) GetKillscore() float32 {
	if m != nil {
		return m.Killscore
	}
	return 0
}

func (m *MapCharacterResultNotify) GetRankscore() float32 {
	if m != nil {
		return m.Rankscore
	}
	return 0
}

func (m *MapCharacterResultNotify) GetTotalrank() uint32 {
	if m != nil {
		return m.Totalrank
	}
	return 0
}

func (m *MapCharacterResultNotify) GetTotalscore() float32 {
	if m != nil {
		return m.Totalscore
	}
	return 0
}

func (m *MapCharacterResultNotify) GetCoin() uint32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *MapCharacterResultNotify) GetBraveCoin() string {
	if m != nil {
		return m.BraveCoin
	}
	return ""
}

func (m *MapCharacterResultNotify) GetMatchmode() uint32 {
	if m != nil {
		return m.Matchmode
	}
	return 0
}

// s-->c 公告
type ChatNotify struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content"`
	Type    uint32 `protobuf:"varint,2,opt,name=type" json:"type"`
}

func (m *ChatNotify) Reset()                    { *m = ChatNotify{} }
func (m *ChatNotify) String() string            { return proto.CompactTextString(m) }
func (*ChatNotify) ProtoMessage()               {}
func (*ChatNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{16} }

func (m *ChatNotify) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ChatNotify) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// s-->c 区域通知
type ZoneNotify struct {
	Type     uint32   `protobuf:"varint,1,opt,name=type" json:"type"`
	Center   *Vector3 `protobuf:"bytes,2,opt,name=center" json:"center,omitempty"`
	Radius   float32  `protobuf:"fixed32,3,opt,name=radius" json:"radius"`
	Interval uint32   `protobuf:"varint,4,opt,name=interval" json:"interval"`
}

func (m *ZoneNotify) Reset()                    { *m = ZoneNotify{} }
func (m *ZoneNotify) String() string            { return proto.CompactTextString(m) }
func (*ZoneNotify) ProtoMessage()               {}
func (*ZoneNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{17} }

func (m *ZoneNotify) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ZoneNotify) GetCenter() *Vector3 {
	if m != nil {
		return m.Center
	}
	return nil
}

func (m *ZoneNotify) GetRadius() float32 {
	if m != nil {
		return m.Radius
	}
	return 0
}

func (m *ZoneNotify) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

// c-->s 换弹
type ChangeBulletReq struct {
	Full bool `protobuf:"varint,1,opt,name=full" json:"full"`
}

func (m *ChangeBulletReq) Reset()                    { *m = ChangeBulletReq{} }
func (m *ChangeBulletReq) String() string            { return proto.CompactTextString(m) }
func (*ChangeBulletReq) ProtoMessage()               {}
func (*ChangeBulletReq) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{18} }

func (m *ChangeBulletReq) GetFull() bool {
	if m != nil {
		return m.Full
	}
	return false
}

// s-->c 换弹
type ChangeBulletRet struct {
	Uid    uint64 `protobuf:"varint,1,opt,name=uid" json:"uid"`
	Bullet uint32 `protobuf:"varint,2,opt,name=bullet" json:"bullet"`
}

func (m *ChangeBulletRet) Reset()                    { *m = ChangeBulletRet{} }
func (m *ChangeBulletRet) String() string            { return proto.CompactTextString(m) }
func (*ChangeBulletRet) ProtoMessage()               {}
func (*ChangeBulletRet) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{19} }

func (m *ChangeBulletRet) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ChangeBulletRet) GetBullet() uint32 {
	if m != nil {
		return m.Bullet
	}
	return 0
}

type TeamMemberInfo struct {
	Uid           uint64 `protobuf:"varint,1,opt,name=uid" json:"uid"`
	Name_         string `protobuf:"bytes,2,opt,name=name" json:"name"`
	MemState      uint32 `protobuf:"varint,3,opt,name=memState" json:"memState"`
	Modelid       uint64 `protobuf:"varint,4,opt,name=modelid" json:"modelid"`
	Intotime      int64  `protobuf:"varint,5,opt,name=intotime" json:"intotime"`
	Location      string `protobuf:"bytes,6,opt,name=location" json:"location"`
	Dbid          uint64 `protobuf:"varint,7,opt,name=dbid" json:"dbid"`
	Insignia      string `protobuf:"bytes,8,opt,name=insignia" json:"insignia"`
	Veteran       uint32 `protobuf:"varint,9,opt,name=veteran" json:"veteran"`
	NameColor     uint32 `protobuf:"varint,10,opt,name=nameColor" json:"nameColor"`
	OutsideWeapon uint32 `protobuf:"varint,11,opt,name=outsideWeapon" json:"outsideWeapon"`
}

func (m *TeamMemberInfo) Reset()                    { *m = TeamMemberInfo{} }
func (m *TeamMemberInfo) String() string            { return proto.CompactTextString(m) }
func (*TeamMemberInfo) ProtoMessage()               {}
func (*TeamMemberInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{20} }

func (m *TeamMemberInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *TeamMemberInfo) GetName_() string {
	if m != nil {
		return m.Name_
	}
	return ""
}

func (m *TeamMemberInfo) GetMemState() uint32 {
	if m != nil {
		return m.MemState
	}
	return 0
}

func (m *TeamMemberInfo) GetModelid() uint64 {
	if m != nil {
		return m.Modelid
	}
	return 0
}

func (m *TeamMemberInfo) GetIntotime() int64 {
	if m != nil {
		return m.Intotime
	}
	return 0
}

func (m *TeamMemberInfo) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *TeamMemberInfo) GetDbid() uint64 {
	if m != nil {
		return m.Dbid
	}
	return 0
}

func (m *TeamMemberInfo) GetInsignia() string {
	if m != nil {
		return m.Insignia
	}
	return ""
}

func (m *TeamMemberInfo) GetVeteran() uint32 {
	if m != nil {
		return m.Veteran
	}
	return 0
}

func (m *TeamMemberInfo) GetNameColor() uint32 {
	if m != nil {
		return m.NameColor
	}
	return 0
}

func (m *TeamMemberInfo) GetOutsideWeapon() uint32 {
	if m != nil {
		return m.OutsideWeapon
	}
	return 0
}

// s-->c 同步组队信息
type SyncTeamInfoRet struct {
	Id         uint64            `protobuf:"varint,1,opt,name=id" json:"id"`
	TeamState  uint32            `protobuf:"varint,2,opt,name=teamState" json:"teamState"`
	Memberinfo []*TeamMemberInfo `protobuf:"bytes,3,rep,name=memberinfo" json:"memberinfo,omitempty"`
	Leaderid   uint64            `protobuf:"varint,4,opt,name=leaderid" json:"leaderid"`
	Teamtype   uint32            `protobuf:"varint,5,opt,name=teamtype" json:"teamtype"`
	Automatch  uint32            `protobuf:"varint,6,opt,name=automatch" json:"automatch"`
	Mapid      uint32            `protobuf:"varint,7,opt,name=mapid" json:"mapid"`
}

func (m *SyncTeamInfoRet) Reset()                    { *m = SyncTeamInfoRet{} }
func (m *SyncTeamInfoRet) String() string            { return proto.CompactTextString(m) }
func (*SyncTeamInfoRet) ProtoMessage()               {}
func (*SyncTeamInfoRet) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{21} }

func (m *SyncTeamInfoRet) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SyncTeamInfoRet) GetTeamState() uint32 {
	if m != nil {
		return m.TeamState
	}
	return 0
}

func (m *SyncTeamInfoRet) GetMemberinfo() []*TeamMemberInfo {
	if m != nil {
		return m.Memberinfo
	}
	return nil
}

func (m *SyncTeamInfoRet) GetLeaderid() uint64 {
	if m != nil {
		return m.Leaderid
	}
	return 0
}

func (m *SyncTeamInfoRet) GetTeamtype() uint32 {
	if m != nil {
		return m.Teamtype
	}
	return 0
}

func (m *SyncTeamInfoRet) GetAutomatch() uint32 {
	if m != nil {
		return m.Automatch
	}
	return 0
}

func (m *SyncTeamInfoRet) GetMapid() uint32 {
	if m != nil {
		return m.Mapid
	}
	return 0
}

// s-->c 更新格子数据
type RefreshPackCellNotify struct {
	Num uint32 `protobuf:"varint,1,opt,name=num" json:"num"`
}

func (m *RefreshPackCellNotify) Reset()                    { *m = RefreshPackCellNotify{} }
func (m *RefreshPackCellNotify) String() string            { return proto.CompactTextString(m) }
func (*RefreshPackCellNotify) ProtoMessage()               {}
func (*RefreshPackCellNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{22} }

func (m *RefreshPackCellNotify) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type SummonAINotify struct {
	Ainum     uint32   `protobuf:"varint,1,opt,name=ainum" json:"ainum"`
	Users     []uint64 `protobuf:"varint,2,rep,name=users" json:"users,omitempty"`
	Skybox    uint32   `protobuf:"varint,3,opt,name=skybox" json:"skybox"`
	SceneType uint32   `protobuf:"varint,4,opt,name=SceneType" json:"SceneType"`
}

func (m *SummonAINotify) Reset()                    { *m = SummonAINotify{} }
func (m *SummonAINotify) String() string            { return proto.CompactTextString(m) }
func (*SummonAINotify) ProtoMessage()               {}
func (*SummonAINotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{23} }

func (m *SummonAINotify) GetAinum() uint32 {
	if m != nil {
		return m.Ainum
	}
	return 0
}

func (m *SummonAINotify) GetUsers() []uint64 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *SummonAINotify) GetSkybox() uint32 {
	if m != nil {
		return m.Skybox
	}
	return 0
}

func (m *SummonAINotify) GetSceneType() uint32 {
	if m != nil {
		return m.SceneType
	}
	return 0
}

// s-->c 刷新子弹
type RefreshGunBulletNotify struct {
	Thisid uint64 `protobuf:"varint,1,opt,name=thisid" json:"thisid"`
	Bullet uint32 `protobuf:"varint,2,opt,name=bullet" json:"bullet"`
}

func (m *RefreshGunBulletNotify) Reset()                    { *m = RefreshGunBulletNotify{} }
func (m *RefreshGunBulletNotify) String() string            { return proto.CompactTextString(m) }
func (*RefreshGunBulletNotify) ProtoMessage()               {}
func (*RefreshGunBulletNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{24} }

func (m *RefreshGunBulletNotify) GetThisid() uint64 {
	if m != nil {
		return m.Thisid
	}
	return 0
}

func (m *RefreshGunBulletNotify) GetBullet() uint32 {
	if m != nil {
		return m.Bullet
	}
	return 0
}

// 副本中组队玩家信息
type InitRoomTeamPlayerItem struct {
	Id        uint64   `protobuf:"varint,1,opt,name=id" json:"id"`
	Name_     string   `protobuf:"bytes,2,opt,name=name" json:"name"`
	Hp        uint32   `protobuf:"varint,3,opt,name=hp" json:"hp"`
	Maxhp     uint32   `protobuf:"varint,4,opt,name=Maxhp" json:"Maxhp"`
	State     uint32   `protobuf:"varint,5,opt,name=state" json:"state"`
	Pos       *Vector3 `protobuf:"bytes,6,opt,name=pos" json:"pos,omitempty"`
	Color     uint32   `protobuf:"varint,7,opt,name=color" json:"color"`
	NameColor uint32   `protobuf:"varint,8,opt,name=nameColor" json:"nameColor"`
}

func (m *InitRoomTeamPlayerItem) Reset()                    { *m = InitRoomTeamPlayerItem{} }
func (m *InitRoomTeamPlayerItem) String() string            { return proto.CompactTextString(m) }
func (*InitRoomTeamPlayerItem) ProtoMessage()               {}
func (*InitRoomTeamPlayerItem) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{25} }

func (m *InitRoomTeamPlayerItem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *InitRoomTeamPlayerItem) GetName_() string {
	if m != nil {
		return m.Name_
	}
	return ""
}

func (m *InitRoomTeamPlayerItem) GetHp() uint32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *InitRoomTeamPlayerItem) GetMaxhp() uint32 {
	if m != nil {
		return m.Maxhp
	}
	return 0
}

func (m *InitRoomTeamPlayerItem) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *InitRoomTeamPlayerItem) GetPos() *Vector3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *InitRoomTeamPlayerItem) GetColor() uint32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *InitRoomTeamPlayerItem) GetNameColor() uint32 {
	if m != nil {
		return m.NameColor
	}
	return 0
}

// s-->c Room场景中初始化组队信息
type InitRoomTeamInfoRet struct {
	Item []*InitRoomTeamPlayerItem `protobuf:"bytes,1,rep,name=item" json:"item,omitempty"`
}

func (m *InitRoomTeamInfoRet) Reset()                    { *m = InitRoomTeamInfoRet{} }
func (m *InitRoomTeamInfoRet) String() string            { return proto.CompactTextString(m) }
func (*InitRoomTeamInfoRet) ProtoMessage()               {}
func (*InitRoomTeamInfoRet) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{26} }

func (m *InitRoomTeamInfoRet) GetItem() []*InitRoomTeamPlayerItem {
	if m != nil {
		return m.Item
	}
	return nil
}

// 副本中组队玩家信息
type SyncRoomTeamPlayerItem struct {
	Id    uint64   `protobuf:"varint,1,opt,name=id" json:"id"`
	Hp    uint32   `protobuf:"varint,2,opt,name=hp" json:"hp"`
	Pos   *Vector3 `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
	State uint32   `protobuf:"varint,4,opt,name=state" json:"state"`
	Rota  *Vector3 `protobuf:"bytes,5,opt,name=rota" json:"rota,omitempty"`
}

func (m *SyncRoomTeamPlayerItem) Reset()                    { *m = SyncRoomTeamPlayerItem{} }
func (m *SyncRoomTeamPlayerItem) String() string            { return proto.CompactTextString(m) }
func (*SyncRoomTeamPlayerItem) ProtoMessage()               {}
func (*SyncRoomTeamPlayerItem) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{27} }

func (m *SyncRoomTeamPlayerItem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SyncRoomTeamPlayerItem) GetHp() uint32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *SyncRoomTeamPlayerItem) GetPos() *Vector3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *SyncRoomTeamPlayerItem) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SyncRoomTeamPlayerItem) GetRota() *Vector3 {
	if m != nil {
		return m.Rota
	}
	return nil
}

// s-->c Room场景中初始化组队信息
type SymcRoomTeamInfoRet struct {
	Item []*SyncRoomTeamPlayerItem `protobuf:"bytes,1,rep,name=item" json:"item,omitempty"`
}

func (m *SymcRoomTeamInfoRet) Reset()                    { *m = SymcRoomTeamInfoRet{} }
func (m *SymcRoomTeamInfoRet) String() string            { return proto.CompactTextString(m) }
func (*SymcRoomTeamInfoRet) ProtoMessage()               {}
func (*SymcRoomTeamInfoRet) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{28} }

func (m *SymcRoomTeamInfoRet) GetItem() []*SyncRoomTeamPlayerItem {
	if m != nil {
		return m.Item
	}
	return nil
}

// s-->c 玩家死亡公告
type DieNotifyRet struct {
	Type             uint32 `protobuf:"varint,1,opt,name=type" json:"type"`
	Attackerid       uint64 `protobuf:"varint,2,opt,name=attackerid" json:"attackerid"`
	Defenderid       uint64 `protobuf:"varint,3,opt,name=defenderid" json:"defenderid"`
	Attackername     string `protobuf:"bytes,4,opt,name=attackername" json:"attackername"`
	Defendername     string `protobuf:"bytes,5,opt,name=defendername" json:"defendername"`
	IsHeadhost       uint32 `protobuf:"varint,6,opt,name=isHeadhost" json:"isHeadhost"`
	Gunid            uint64 `protobuf:"varint,7,opt,name=gunid" json:"gunid"`
	Defenderstate    uint32 `protobuf:"varint,8,opt,name=defenderstate" json:"defenderstate"`
	CurAliveSum      uint32 `protobuf:"varint,9,opt,name=curAliveSum" json:"curAliveSum"`
	Attackerinsignia string `protobuf:"bytes,10,opt,name=attackerinsignia" json:"attackerinsignia"`
	Defenderinsignia string `protobuf:"bytes,11,opt,name=defenderinsignia" json:"defenderinsignia"`
	Attackercolor    uint32 `protobuf:"varint,12,opt,name=attackercolor" json:"attackercolor"`
	Defendercolor    uint32 `protobuf:"varint,13,opt,name=defendercolor" json:"defendercolor"`
}

func (m *DieNotifyRet) Reset()                    { *m = DieNotifyRet{} }
func (m *DieNotifyRet) String() string            { return proto.CompactTextString(m) }
func (*DieNotifyRet) ProtoMessage()               {}
func (*DieNotifyRet) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{29} }

func (m *DieNotifyRet) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *DieNotifyRet) GetAttackerid() uint64 {
	if m != nil {
		return m.Attackerid
	}
	return 0
}

func (m *DieNotifyRet) GetDefenderid() uint64 {
	if m != nil {
		return m.Defenderid
	}
	return 0
}

func (m *DieNotifyRet) GetAttackername() string {
	if m != nil {
		return m.Attackername
	}
	return ""
}

func (m *DieNotifyRet) GetDefendername() string {
	if m != nil {
		return m.Defendername
	}
	return ""
}

func (m *DieNotifyRet) GetIsHeadhost() uint32 {
	if m != nil {
		return m.IsHeadhost
	}
	return 0
}

func (m *DieNotifyRet) GetGunid() uint64 {
	if m != nil {
		return m.Gunid
	}
	return 0
}

func (m *DieNotifyRet) GetDefenderstate() uint32 {
	if m != nil {
		return m.Defenderstate
	}
	return 0
}

func (m *DieNotifyRet) GetCurAliveSum() uint32 {
	if m != nil {
		return m.CurAliveSum
	}
	return 0
}

func (m *DieNotifyRet) GetAttackerinsignia() string {
	if m != nil {
		return m.Attackerinsignia
	}
	return ""
}

func (m *DieNotifyRet) GetDefenderinsignia() string {
	if m != nil {
		return m.Defenderinsignia
	}
	return ""
}

func (m *DieNotifyRet) GetAttackercolor() uint32 {
	if m != nil {
		return m.Attackercolor
	}
	return 0
}

func (m *DieNotifyRet) GetDefendercolor() uint32 {
	if m != nil {
		return m.Defendercolor
	}
	return 0
}

type CopilotData struct {
	Index uint32 `protobuf:"varint,1,opt,name=index" json:"index"`
	Id    uint64 `protobuf:"varint,2,opt,name=id" json:"id"`
}

func (m *CopilotData) Reset()                    { *m = CopilotData{} }
func (m *CopilotData) String() string            { return proto.CompactTextString(m) }
func (*CopilotData) ProtoMessage()               {}
func (*CopilotData) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{30} }

func (m *CopilotData) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CopilotData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// s-->c 车辆属性
type VehicleProp struct {
	VehicleID   uint64         `protobuf:"varint,1,opt,name=vehicleID" json:"vehicleID"`
	PilotID     uint64         `protobuf:"varint,2,opt,name=pilotID" json:"pilotID"`
	Copilots    []*CopilotData `protobuf:"bytes,3,rep,name=copilots" json:"copilots,omitempty"`
	Enter       bool           `protobuf:"varint,4,opt,name=enter" json:"enter"`
	Reducedam   uint32         `protobuf:"varint,5,opt,name=reducedam" json:"reducedam"`
	Thisid      uint64         `protobuf:"varint,6,opt,name=thisid" json:"thisid"`
	Reducemax   uint32         `protobuf:"varint,7,opt,name=reducemax" json:"reducemax"`
	Usetime     uint64         `protobuf:"varint,8,opt,name=usetime" json:"usetime"`
	Haveexplode bool           `protobuf:"varint,9,opt,name=haveexplode" json:"haveexplode"`
	FuelLeft    float32        `protobuf:"fixed32,10,opt,name=fuelLeft" json:"fuelLeft"`
	FuelMax     float32        `protobuf:"fixed32,11,opt,name=fuelMax" json:"fuelMax"`
}

func (m *VehicleProp) Reset()                    { *m = VehicleProp{} }
func (m *VehicleProp) String() string            { return proto.CompactTextString(m) }
func (*VehicleProp) ProtoMessage()               {}
func (*VehicleProp) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{31} }

func (m *VehicleProp) GetVehicleID() uint64 {
	if m != nil {
		return m.VehicleID
	}
	return 0
}

func (m *VehicleProp) GetPilotID() uint64 {
	if m != nil {
		return m.PilotID
	}
	return 0
}

func (m *VehicleProp) GetCopilots() []*CopilotData {
	if m != nil {
		return m.Copilots
	}
	return nil
}

func (m *VehicleProp) GetEnter() bool {
	if m != nil {
		return m.Enter
	}
	return false
}

func (m *VehicleProp) GetReducedam() uint32 {
	if m != nil {
		return m.Reducedam
	}
	return 0
}

func (m *VehicleProp) GetThisid() uint64 {
	if m != nil {
		return m.Thisid
	}
	return 0
}

func (m *VehicleProp) GetReducemax() uint32 {
	if m != nil {
		return m.Reducemax
	}
	return 0
}

func (m *VehicleProp) GetUsetime() uint64 {
	if m != nil {
		return m.Usetime
	}
	return 0
}

func (m *VehicleProp) GetHaveexplode() bool {
	if m != nil {
		return m.Haveexplode
	}
	return false
}

func (m *VehicleProp) GetFuelLeft() float32 {
	if m != nil {
		return m.FuelLeft
	}
	return 0
}

func (m *VehicleProp) GetFuelMax() float32 {
	if m != nil {
		return m.FuelMax
	}
	return 0
}

// s-->c 场景道具
type ItemProp struct {
	Baseid uint32 `protobuf:"varint,1,opt,name=baseid" json:"baseid"`
	Id     uint64 `protobuf:"varint,2,opt,name=id" json:"id"`
	Num    uint32 `protobuf:"varint,3,opt,name=num" json:"num"`
}

func (m *ItemProp) Reset()                    { *m = ItemProp{} }
func (m *ItemProp) String() string            { return proto.CompactTextString(m) }
func (*ItemProp) ProtoMessage()               {}
func (*ItemProp) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{32} }

func (m *ItemProp) GetBaseid() uint32 {
	if m != nil {
		return m.Baseid
	}
	return 0
}

func (m *ItemProp) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ItemProp) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// s-->c 刷新补给箱内道具
type RefreshBoxObjNotify struct {
	Id   uint64      `protobuf:"varint,1,opt,name=id" json:"id"`
	Data []*ItemProp `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *RefreshBoxObjNotify) Reset()                    { *m = RefreshBoxObjNotify{} }
func (m *RefreshBoxObjNotify) String() string            { return proto.CompactTextString(m) }
func (*RefreshBoxObjNotify) ProtoMessage()               {}
func (*RefreshBoxObjNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{33} }

func (m *RefreshBoxObjNotify) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RefreshBoxObjNotify) GetData() []*ItemProp {
	if m != nil {
		return m.Data
	}
	return nil
}

type HeadProp struct {
	Baseid    uint32 `protobuf:"varint,1,opt,name=baseid" json:"baseid"`
	Reducedam uint32 `protobuf:"varint,2,opt,name=reducedam" json:"reducedam"`
	Maxreduce uint32 `protobuf:"varint,3,opt,name=maxreduce" json:"maxreduce"`
	Itemid    uint32 `protobuf:"varint,4,opt,name=itemid" json:"itemid"`
}

func (m *HeadProp) Reset()                    { *m = HeadProp{} }
func (m *HeadProp) String() string            { return proto.CompactTextString(m) }
func (*HeadProp) ProtoMessage()               {}
func (*HeadProp) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{34} }

func (m *HeadProp) GetBaseid() uint32 {
	if m != nil {
		return m.Baseid
	}
	return 0
}

func (m *HeadProp) GetReducedam() uint32 {
	if m != nil {
		return m.Reducedam
	}
	return 0
}

func (m *HeadProp) GetMaxreduce() uint32 {
	if m != nil {
		return m.Maxreduce
	}
	return 0
}

func (m *HeadProp) GetItemid() uint32 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

type BodyProp struct {
	Baseid    uint32 `protobuf:"varint,1,opt,name=baseid" json:"baseid"`
	Reducedam uint32 `protobuf:"varint,2,opt,name=reducedam" json:"reducedam"`
	Maxreduce uint32 `protobuf:"varint,3,opt,name=maxreduce" json:"maxreduce"`
}

func (m *BodyProp) Reset()                    { *m = BodyProp{} }
func (m *BodyProp) String() string            { return proto.CompactTextString(m) }
func (*BodyProp) ProtoMessage()               {}
func (*BodyProp) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{35} }

func (m *BodyProp) GetBaseid() uint32 {
	if m != nil {
		return m.Baseid
	}
	return 0
}

func (m *BodyProp) GetReducedam() uint32 {
	if m != nil {
		return m.Reducedam
	}
	return 0
}

func (m *BodyProp) GetMaxreduce() uint32 {
	if m != nil {
		return m.Maxreduce
	}
	return 0
}

type BackPackProp struct {
	Baseid uint32 `protobuf:"varint,1,opt,name=baseid" json:"baseid"`
	Itemid uint32 `protobuf:"varint,2,opt,name=itemid" json:"itemid"`
}

func (m *BackPackProp) Reset()                    { *m = BackPackProp{} }
func (m *BackPackProp) String() string            { return proto.CompactTextString(m) }
func (*BackPackProp) ProtoMessage()               {}
func (*BackPackProp) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{36} }

func (m *BackPackProp) GetBaseid() uint32 {
	if m != nil {
		return m.Baseid
	}
	return 0
}

func (m *BackPackProp) GetItemid() uint32 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

// TLog 玩家注册消息
type PlayerRegister struct {
	GameSvrID    string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime  string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID   string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID       uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID  uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID      string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	TelecomOper  string `protobuf:"bytes,7,opt,name=TelecomOper" json:"TelecomOper"`
	RegChannel   string `protobuf:"bytes,8,opt,name=RegChannel" json:"RegChannel"`
	LoginChannel uint32 `protobuf:"varint,9,opt,name=LoginChannel" json:"LoginChannel"`
}

func (m *PlayerRegister) Reset()                    { *m = PlayerRegister{} }
func (m *PlayerRegister) String() string            { return proto.CompactTextString(m) }
func (*PlayerRegister) ProtoMessage()               {}
func (*PlayerRegister) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{37} }

func (m *PlayerRegister) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *PlayerRegister) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *PlayerRegister) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *PlayerRegister) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *PlayerRegister) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *PlayerRegister) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *PlayerRegister) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *PlayerRegister) GetRegChannel() string {
	if m != nil {
		return m.RegChannel
	}
	return ""
}

func (m *PlayerRegister) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

// TLog 玩家登录消息
type PlayerLogin struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	Level            uint32 `protobuf:"varint,7,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,8,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,9,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,10,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,11,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,12,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,13,opt,name=LoginChannel" json:"LoginChannel"`
	VRoleID          string `protobuf:"bytes,14,opt,name=VRoleID" json:"VRoleID"`
	VRoleName        string `protobuf:"bytes,15,opt,name=VRoleName" json:"VRoleName"`
	RegChannel       string `protobuf:"bytes,16,opt,name=RegChannel" json:"RegChannel"`
}

func (m *PlayerLogin) Reset()                    { *m = PlayerLogin{} }
func (m *PlayerLogin) String() string            { return proto.CompactTextString(m) }
func (*PlayerLogin) ProtoMessage()               {}
func (*PlayerLogin) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{38} }

func (m *PlayerLogin) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *PlayerLogin) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *PlayerLogin) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *PlayerLogin) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *PlayerLogin) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *PlayerLogin) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *PlayerLogin) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PlayerLogin) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *PlayerLogin) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *PlayerLogin) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *PlayerLogin) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *PlayerLogin) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *PlayerLogin) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *PlayerLogin) GetVRoleID() string {
	if m != nil {
		return m.VRoleID
	}
	return ""
}

func (m *PlayerLogin) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *PlayerLogin) GetRegChannel() string {
	if m != nil {
		return m.RegChannel
	}
	return ""
}

// TLog 玩家登出消息
type PlayerLogout struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	OnlineTime       uint32 `protobuf:"varint,7,opt,name=OnlineTime" json:"OnlineTime"`
	Level            uint32 `protobuf:"varint,8,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,9,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,10,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,11,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,12,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,13,opt,name=Network" json:"Network"`
}

func (m *PlayerLogout) Reset()                    { *m = PlayerLogout{} }
func (m *PlayerLogout) String() string            { return proto.CompactTextString(m) }
func (*PlayerLogout) ProtoMessage()               {}
func (*PlayerLogout) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{39} }

func (m *PlayerLogout) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *PlayerLogout) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *PlayerLogout) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *PlayerLogout) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *PlayerLogout) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *PlayerLogout) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *PlayerLogout) GetOnlineTime() uint32 {
	if m != nil {
		return m.OnlineTime
	}
	return 0
}

func (m *PlayerLogout) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PlayerLogout) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *PlayerLogout) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *PlayerLogout) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *PlayerLogout) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *PlayerLogout) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

type MailObject struct {
	Id  uint32 `protobuf:"varint,1,opt,name=id" json:"id"`
	Num uint32 `protobuf:"varint,2,opt,name=num" json:"num"`
}

func (m *MailObject) Reset()                    { *m = MailObject{} }
func (m *MailObject) String() string            { return proto.CompactTextString(m) }
func (*MailObject) ProtoMessage()               {}
func (*MailObject) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{40} }

func (m *MailObject) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MailObject) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type MailInfo struct {
	Mailid   uint64        `protobuf:"varint,1,opt,name=mailid" json:"mailid"`
	Mailtype uint32        `protobuf:"varint,2,opt,name=mailtype" json:"mailtype"`
	Gettime  uint64        `protobuf:"varint,3,opt,name=gettime" json:"gettime"`
	Haveread bool          `protobuf:"varint,4,opt,name=haveread" json:"haveread"`
	Title    string        `protobuf:"bytes,5,opt,name=title" json:"title"`
	Text     string        `protobuf:"bytes,6,opt,name=text" json:"text"`
	Url      string        `protobuf:"bytes,7,opt,name=url" json:"url"`
	Objs     []*MailObject `protobuf:"bytes,8,rep,name=objs" json:"objs,omitempty"`
	Haveget  bool          `protobuf:"varint,9,opt,name=haveget" json:"haveget"`
	Button   string        `protobuf:"bytes,10,opt,name=button" json:"button"`
	Os       string        `protobuf:"bytes,11,opt,name=os" json:"os"`
}

func (m *MailInfo) Reset()                    { *m = MailInfo{} }
func (m *MailInfo) String() string            { return proto.CompactTextString(m) }
func (*MailInfo) ProtoMessage()               {}
func (*MailInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{41} }

func (m *MailInfo) GetMailid() uint64 {
	if m != nil {
		return m.Mailid
	}
	return 0
}

func (m *MailInfo) GetMailtype() uint32 {
	if m != nil {
		return m.Mailtype
	}
	return 0
}

func (m *MailInfo) GetGettime() uint64 {
	if m != nil {
		return m.Gettime
	}
	return 0
}

func (m *MailInfo) GetHaveread() bool {
	if m != nil {
		return m.Haveread
	}
	return false
}

func (m *MailInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MailInfo) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MailInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MailInfo) GetObjs() []*MailObject {
	if m != nil {
		return m.Objs
	}
	return nil
}

func (m *MailInfo) GetHaveget() bool {
	if m != nil {
		return m.Haveget
	}
	return false
}

func (m *MailInfo) GetButton() string {
	if m != nil {
		return m.Button
	}
	return ""
}

func (m *MailInfo) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

// 邮件信息列表
type MailInfoList struct {
	List []*MailInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *MailInfoList) Reset()                    { *m = MailInfoList{} }
func (m *MailInfoList) String() string            { return proto.CompactTextString(m) }
func (*MailInfoList) ProtoMessage()               {}
func (*MailInfoList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{42} }

func (m *MailInfoList) GetList() []*MailInfo {
	if m != nil {
		return m.List
	}
	return nil
}

// 获取邮件列表
type ReqGetMailList struct {
}

func (m *ReqGetMailList) Reset()                    { *m = ReqGetMailList{} }
func (m *ReqGetMailList) String() string            { return proto.CompactTextString(m) }
func (*ReqGetMailList) ProtoMessage()               {}
func (*ReqGetMailList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{43} }

// 返回邮件列表
type RetMailList struct {
	Mails []*MailInfo `protobuf:"bytes,1,rep,name=mails" json:"mails,omitempty"`
}

func (m *RetMailList) Reset()                    { *m = RetMailList{} }
func (m *RetMailList) String() string            { return proto.CompactTextString(m) }
func (*RetMailList) ProtoMessage()               {}
func (*RetMailList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{44} }

func (m *RetMailList) GetMails() []*MailInfo {
	if m != nil {
		return m.Mails
	}
	return nil
}

// 查看邮件
type ReqMailInfo struct {
	Mailid uint64 `protobuf:"varint,1,opt,name=mailid" json:"mailid"`
}

func (m *ReqMailInfo) Reset()                    { *m = ReqMailInfo{} }
func (m *ReqMailInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqMailInfo) ProtoMessage()               {}
func (*ReqMailInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{45} }

func (m *ReqMailInfo) GetMailid() uint64 {
	if m != nil {
		return m.Mailid
	}
	return 0
}

// 返回邮件信息
type RetMailInfo struct {
	Mail *MailInfo `protobuf:"bytes,1,opt,name=mail" json:"mail,omitempty"`
}

func (m *RetMailInfo) Reset()                    { *m = RetMailInfo{} }
func (m *RetMailInfo) String() string            { return proto.CompactTextString(m) }
func (*RetMailInfo) ProtoMessage()               {}
func (*RetMailInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{46} }

func (m *RetMailInfo) GetMail() *MailInfo {
	if m != nil {
		return m.Mail
	}
	return nil
}

// 删除邮件 (返回RetMailList)
type DelMail struct {
	Mailid []uint64 `protobuf:"varint,1,rep,name=mailid" json:"mailid,omitempty"`
}

func (m *DelMail) Reset()                    { *m = DelMail{} }
func (m *DelMail) String() string            { return proto.CompactTextString(m) }
func (*DelMail) ProtoMessage()               {}
func (*DelMail) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{47} }

func (m *DelMail) GetMailid() []uint64 {
	if m != nil {
		return m.Mailid
	}
	return nil
}

// 领取附件 (返回RetMailInfo)
type GetMailObj struct {
	Mailid uint64 `protobuf:"varint,1,opt,name=mailid" json:"mailid"`
}

func (m *GetMailObj) Reset()                    { *m = GetMailObj{} }
func (m *GetMailObj) String() string            { return proto.CompactTextString(m) }
func (*GetMailObj) ProtoMessage()               {}
func (*GetMailObj) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{48} }

func (m *GetMailObj) GetMailid() uint64 {
	if m != nil {
		return m.Mailid
	}
	return 0
}

// 公告信息
type AnnuonceInfo struct {
	Id           uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	StartTime    int64  `protobuf:"varint,2,opt,name=startTime" json:"startTime"`
	EndTime      int64  `protobuf:"varint,3,opt,name=endTime" json:"endTime"`
	InternalTime int64  `protobuf:"varint,4,opt,name=internalTime" json:"internalTime"`
	Content      string `protobuf:"bytes,5,opt,name=content" json:"content"`
}

func (m *AnnuonceInfo) Reset()                    { *m = AnnuonceInfo{} }
func (m *AnnuonceInfo) String() string            { return proto.CompactTextString(m) }
func (*AnnuonceInfo) ProtoMessage()               {}
func (*AnnuonceInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{49} }

func (m *AnnuonceInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AnnuonceInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *AnnuonceInfo) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *AnnuonceInfo) GetInternalTime() int64 {
	if m != nil {
		return m.InternalTime
	}
	return 0
}

func (m *AnnuonceInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// s-->c 初始化公告信息
type InitAnnuonceInfoRet struct {
	Item []*AnnuonceInfo `protobuf:"bytes,1,rep,name=item" json:"item,omitempty"`
}

func (m *InitAnnuonceInfoRet) Reset()                    { *m = InitAnnuonceInfoRet{} }
func (m *InitAnnuonceInfoRet) String() string            { return proto.CompactTextString(m) }
func (*InitAnnuonceInfoRet) ProtoMessage()               {}
func (*InitAnnuonceInfoRet) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{50} }

func (m *InitAnnuonceInfoRet) GetItem() []*AnnuonceInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

// 好友信息
type FriendInfo struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	Name_      string `protobuf:"bytes,2,opt,name=name" json:"name"`
	State      uint32 `protobuf:"varint,3,opt,name=state" json:"state"`
	Time       uint32 `protobuf:"varint,4,opt,name=time" json:"time"`
	Url        string `protobuf:"bytes,5,opt,name=url" json:"url"`
	Enterplat  string `protobuf:"bytes,6,opt,name=enterplat" json:"enterplat"`
	Qqvip      uint32 `protobuf:"varint,7,opt,name=qqvip" json:"qqvip"`
	Nickname   string `protobuf:"bytes,8,opt,name=nickname" json:"nickname"`
	Gender     uint32 `protobuf:"varint,9,opt,name=gender" json:"gender"`
	Level      uint32 `protobuf:"varint,10,opt,name=level" json:"level"`
	Watchable  uint32 `protobuf:"varint,11,opt,name=watchable" json:"watchable"`
	Bound      bool   `protobuf:"varint,12,opt,name=bound" json:"bound"`
	BattleTeam string `protobuf:"bytes,13,opt,name=battleTeam" json:"battleTeam"`
	Stamp      uint64 `protobuf:"varint,14,opt,name=stamp" json:"stamp"`
	NameColor  uint32 `protobuf:"varint,15,opt,name=nameColor" json:"nameColor"`
}

func (m *FriendInfo) Reset()                    { *m = FriendInfo{} }
func (m *FriendInfo) String() string            { return proto.CompactTextString(m) }
func (*FriendInfo) ProtoMessage()               {}
func (*FriendInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{51} }

func (m *FriendInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FriendInfo) GetName_() string {
	if m != nil {
		return m.Name_
	}
	return ""
}

func (m *FriendInfo) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *FriendInfo) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *FriendInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *FriendInfo) GetEnterplat() string {
	if m != nil {
		return m.Enterplat
	}
	return ""
}

func (m *FriendInfo) GetQqvip() uint32 {
	if m != nil {
		return m.Qqvip
	}
	return 0
}

func (m *FriendInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *FriendInfo) GetGender() uint32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *FriendInfo) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *FriendInfo) GetWatchable() uint32 {
	if m != nil {
		return m.Watchable
	}
	return 0
}

func (m *FriendInfo) GetBound() bool {
	if m != nil {
		return m.Bound
	}
	return false
}

func (m *FriendInfo) GetBattleTeam() string {
	if m != nil {
		return m.BattleTeam
	}
	return ""
}

func (m *FriendInfo) GetStamp() uint64 {
	if m != nil {
		return m.Stamp
	}
	return 0
}

func (m *FriendInfo) GetNameColor() uint32 {
	if m != nil {
		return m.NameColor
	}
	return 0
}

// c-->s 请求平台好友状态
type PlatFriendStateReq struct {
	Openid []string `protobuf:"bytes,1,rep,name=openid" json:"openid,omitempty"`
}

func (m *PlatFriendStateReq) Reset()                    { *m = PlatFriendStateReq{} }
func (m *PlatFriendStateReq) String() string            { return proto.CompactTextString(m) }
func (*PlatFriendStateReq) ProtoMessage()               {}
func (*PlatFriendStateReq) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{52} }

func (m *PlatFriendStateReq) GetOpenid() []string {
	if m != nil {
		return m.Openid
	}
	return nil
}

type PlatFriendState struct {
	Openid    string `protobuf:"bytes,1,opt,name=openid" json:"openid"`
	Uid       uint64 `protobuf:"varint,2,opt,name=uid" json:"uid"`
	State     uint32 `protobuf:"varint,3,opt,name=state" json:"state"`
	Time      uint32 `protobuf:"varint,4,opt,name=time" json:"time"`
	Name_     string `protobuf:"bytes,5,opt,name=name" json:"name"`
	Level     uint32 `protobuf:"varint,6,opt,name=level" json:"level"`
	NameColor uint32 `protobuf:"varint,7,opt,name=nameColor" json:"nameColor"`
	Bound     bool   `protobuf:"varint,8,opt,name=bound" json:"bound"`
}

func (m *PlatFriendState) Reset()                    { *m = PlatFriendState{} }
func (m *PlatFriendState) String() string            { return proto.CompactTextString(m) }
func (*PlatFriendState) ProtoMessage()               {}
func (*PlatFriendState) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{53} }

func (m *PlatFriendState) GetOpenid() string {
	if m != nil {
		return m.Openid
	}
	return ""
}

func (m *PlatFriendState) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PlatFriendState) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *PlatFriendState) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PlatFriendState) GetName_() string {
	if m != nil {
		return m.Name_
	}
	return ""
}

func (m *PlatFriendState) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PlatFriendState) GetNameColor() uint32 {
	if m != nil {
		return m.NameColor
	}
	return 0
}

func (m *PlatFriendState) GetBound() bool {
	if m != nil {
		return m.Bound
	}
	return false
}

type PlatFriendStateRet struct {
	Data []*PlatFriendState `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *PlatFriendStateRet) Reset()                    { *m = PlatFriendStateRet{} }
func (m *PlatFriendStateRet) String() string            { return proto.CompactTextString(m) }
func (*PlatFriendStateRet) ProtoMessage()               {}
func (*PlatFriendStateRet) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{54} }

func (m *PlatFriendStateRet) GetData() []*PlatFriendState {
	if m != nil {
		return m.Data
	}
	return nil
}

// 好友排名信息
type FriendRankInfo struct {
	Uid         uint64  `protobuf:"varint,1,opt,name=Uid" json:"Uid"`
	Name_       string  `protobuf:"bytes,2,opt,name=Name" json:"Name"`
	Url         string  `protobuf:"bytes,3,opt,name=Url" json:"Url"`
	SoloRating  float32 `protobuf:"fixed32,4,opt,name=SoloRating" json:"SoloRating"`
	DuoRating   float32 `protobuf:"fixed32,5,opt,name=DuoRating" json:"DuoRating"`
	SquadRating float32 `protobuf:"fixed32,6,opt,name=SquadRating" json:"SquadRating"`
	QqVip       uint32  `protobuf:"varint,7,opt,name=QqVip" json:"QqVip"`
	GameEenter  string  `protobuf:"bytes,8,opt,name=GameEenter" json:"GameEenter"`
	NameColor   uint32  `protobuf:"varint,9,opt,name=nameColor" json:"nameColor"`
}

func (m *FriendRankInfo) Reset()                    { *m = FriendRankInfo{} }
func (m *FriendRankInfo) String() string            { return proto.CompactTextString(m) }
func (*FriendRankInfo) ProtoMessage()               {}
func (*FriendRankInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{55} }

func (m *FriendRankInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FriendRankInfo) GetName_() string {
	if m != nil {
		return m.Name_
	}
	return ""
}

func (m *FriendRankInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *FriendRankInfo) GetSoloRating() float32 {
	if m != nil {
		return m.SoloRating
	}
	return 0
}

func (m *FriendRankInfo) GetDuoRating() float32 {
	if m != nil {
		return m.DuoRating
	}
	return 0
}

func (m *FriendRankInfo) GetSquadRating() float32 {
	if m != nil {
		return m.SquadRating
	}
	return 0
}

func (m *FriendRankInfo) GetQqVip() uint32 {
	if m != nil {
		return m.QqVip
	}
	return 0
}

func (m *FriendRankInfo) GetGameEenter() string {
	if m != nil {
		return m.GameEenter
	}
	return ""
}

func (m *FriendRankInfo) GetNameColor() uint32 {
	if m != nil {
		return m.NameColor
	}
	return 0
}

// s-->c 同步好友信息列表
type SyncFriendRankList struct {
	Item []*FriendRankInfo `protobuf:"bytes,1,rep,name=Item" json:"Item,omitempty"`
}

func (m *SyncFriendRankList) Reset()                    { *m = SyncFriendRankList{} }
func (m *SyncFriendRankList) String() string            { return proto.CompactTextString(m) }
func (*SyncFriendRankList) ProtoMessage()               {}
func (*SyncFriendRankList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{56} }

func (m *SyncFriendRankList) GetItem() []*FriendRankInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

// s-->c 同步好友信息列表
type SyncFriendList struct {
	Item      []*FriendInfo `protobuf:"bytes,1,rep,name=item" json:"item,omitempty"`
	BlackList []*FriendInfo `protobuf:"bytes,2,rep,name=blackList" json:"blackList,omitempty"`
}

func (m *SyncFriendList) Reset()                    { *m = SyncFriendList{} }
func (m *SyncFriendList) String() string            { return proto.CompactTextString(m) }
func (*SyncFriendList) ProtoMessage()               {}
func (*SyncFriendList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{57} }

func (m *SyncFriendList) GetItem() []*FriendInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *SyncFriendList) GetBlackList() []*FriendInfo {
	if m != nil {
		return m.BlackList
	}
	return nil
}

// 好友申请列表信息
type FriendApplyInfo struct {
	Id        uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	Name_     string `protobuf:"bytes,2,opt,name=name" json:"name"`
	ApplyTime int64  `protobuf:"varint,3,opt,name=applyTime" json:"applyTime"`
	Url       string `protobuf:"bytes,4,opt,name=url" json:"url"`
	Level     uint32 `protobuf:"varint,5,opt,name=level" json:"level"`
	NameColor uint32 `protobuf:"varint,6,opt,name=nameColor" json:"nameColor"`
}

func (m *FriendApplyInfo) Reset()                    { *m = FriendApplyInfo{} }
func (m *FriendApplyInfo) String() string            { return proto.CompactTextString(m) }
func (*FriendApplyInfo) ProtoMessage()               {}
func (*FriendApplyInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{58} }

func (m *FriendApplyInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FriendApplyInfo) GetName_() string {
	if m != nil {
		return m.Name_
	}
	return ""
}

func (m *FriendApplyInfo) GetApplyTime() int64 {
	if m != nil {
		return m.ApplyTime
	}
	return 0
}

func (m *FriendApplyInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *FriendApplyInfo) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *FriendApplyInfo) GetNameColor() uint32 {
	if m != nil {
		return m.NameColor
	}
	return 0
}

// s-->c 同步好友申请列表信息
type SyncFriendApplyList struct {
	Item []*FriendApplyInfo `protobuf:"bytes,1,rep,name=item" json:"item,omitempty"`
}

func (m *SyncFriendApplyList) Reset()                    { *m = SyncFriendApplyList{} }
func (m *SyncFriendApplyList) String() string            { return proto.CompactTextString(m) }
func (*SyncFriendApplyList) ProtoMessage()               {}
func (*SyncFriendApplyList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{59} }

func (m *SyncFriendApplyList) GetItem() []*FriendApplyInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type DoSendItemReq struct {
	Title   string        `protobuf:"bytes,1,opt,name=title" json:"title"`
	Content string        `protobuf:"bytes,2,opt,name=content" json:"content"`
	Objs    []*MailObject `protobuf:"bytes,3,rep,name=objs" json:"objs,omitempty"`
	Url     string        `protobuf:"bytes,4,opt,name=url" json:"url"`
}

func (m *DoSendItemReq) Reset()                    { *m = DoSendItemReq{} }
func (m *DoSendItemReq) String() string            { return proto.CompactTextString(m) }
func (*DoSendItemReq) ProtoMessage()               {}
func (*DoSendItemReq) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{60} }

func (m *DoSendItemReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *DoSendItemReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *DoSendItemReq) GetObjs() []*MailObject {
	if m != nil {
		return m.Objs
	}
	return nil
}

func (m *DoSendItemReq) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// GameSvrState 服务器状态日志
type GameSvrState struct {
	DtEventTime string `protobuf:"bytes,1,opt,name=DtEventTime" json:"DtEventTime"`
	VGameIP     string `protobuf:"bytes,2,opt,name=VGameIP" json:"VGameIP"`
	IZoneAreaID uint32 `protobuf:"varint,3,opt,name=IZoneAreaID" json:"IZoneAreaID"`
}

func (m *GameSvrState) Reset()                    { *m = GameSvrState{} }
func (m *GameSvrState) String() string            { return proto.CompactTextString(m) }
func (*GameSvrState) ProtoMessage()               {}
func (*GameSvrState) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{61} }

func (m *GameSvrState) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *GameSvrState) GetVGameIP() string {
	if m != nil {
		return m.VGameIP
	}
	return ""
}

func (m *GameSvrState) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

// RoundFlow 单局结束数据
type RoundFlow struct {
	GameSvrID         string  `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime       string  `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID        string  `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID            uint32  `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID       uint32  `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID           string  `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	BattleID          uint64  `protobuf:"varint,7,opt,name=BattleID" json:"BattleID"`
	BattleType        uint32  `protobuf:"varint,8,opt,name=BattleType" json:"BattleType"`
	RoundScore        uint32  `protobuf:"varint,9,opt,name=RoundScore" json:"RoundScore"`
	RoundTime         uint32  `protobuf:"varint,10,opt,name=RoundTime" json:"RoundTime"`
	Result            uint32  `protobuf:"varint,11,opt,name=Result" json:"Result"`
	Rank              uint32  `protobuf:"varint,12,opt,name=Rank" json:"Rank"`
	Gold              uint32  `protobuf:"varint,13,opt,name=Gold" json:"Gold"`
	TotalBattleNum    uint32  `protobuf:"varint,14,opt,name=TotalBattleNum" json:"TotalBattleNum"`
	FirstNum          uint32  `protobuf:"varint,15,opt,name=FirstNum" json:"FirstNum"`
	TopTenNum         uint32  `protobuf:"varint,16,opt,name=TopTenNum" json:"TopTenNum"`
	FirstRate         string  `protobuf:"bytes,17,opt,name=FirstRate" json:"FirstRate"`
	TopTenRate        string  `protobuf:"bytes,18,opt,name=TopTenRate" json:"TopTenRate"`
	SingleMaxKill     uint32  `protobuf:"varint,19,opt,name=SingleMaxKill" json:"SingleMaxKill"`
	TotalKillNum      uint32  `protobuf:"varint,20,opt,name=TotalKillNum" json:"TotalKillNum"`
	AverageKillNum    string  `protobuf:"bytes,21,opt,name=AverageKillNum" json:"AverageKillNum"`
	SingleMaxHeadShot uint32  `protobuf:"varint,22,opt,name=SingleMaxHeadShot" json:"SingleMaxHeadShot"`
	TotalHeadShot     uint32  `protobuf:"varint,23,opt,name=TotalHeadShot" json:"TotalHeadShot"`
	TotalEffectHarm   uint32  `protobuf:"varint,24,opt,name=TotalEffectHarm" json:"TotalEffectHarm"`
	AverageEffectHarm string  `protobuf:"bytes,25,opt,name=AverageEffectHarm" json:"AverageEffectHarm"`
	HeadShotRate      string  `protobuf:"bytes,26,opt,name=HeadShotRate" json:"HeadShotRate"`
	RecvItemUseNum    uint32  `protobuf:"varint,27,opt,name=RecvItemUseNum" json:"RecvItemUseNum"`
	CarUseNum         uint32  `protobuf:"varint,28,opt,name=CarUseNum" json:"CarUseNum"`
	CarDestroyNum     uint32  `protobuf:"varint,29,opt,name=CarDestroyNum" json:"CarDestroyNum"`
	KillRating        float32 `protobuf:"fixed32,30,opt,name=KillRating" json:"KillRating"`
	WinRating         float32 `protobuf:"fixed32,31,opt,name=WinRating" json:"WinRating"`
	RoundRating       float32 `protobuf:"fixed32,32,opt,name=RoundRating" json:"RoundRating"`
	TotalRating       float32 `protobuf:"fixed32,33,opt,name=TotalRating" json:"TotalRating"`
	PlayerNum         uint32  `protobuf:"varint,34,opt,name=PlayerNum" json:"PlayerNum"`
	AINum             uint32  `protobuf:"varint,35,opt,name=AINum" json:"AINum"`
	PlayerRunDistance float32 `protobuf:"fixed32,36,opt,name=PlayerRunDistance" json:"PlayerRunDistance"`
	CarRunDistance    float32 `protobuf:"fixed32,37,opt,name=CarRunDistance" json:"CarRunDistance"`
	DEADTYPE          uint32  `protobuf:"varint,38,opt,name=DEADTYPE" json:"DEADTYPE"`
	RecoverHp         uint32  `protobuf:"varint,39,opt,name=RecoverHp" json:"RecoverHp"`
	BandageNum        uint32  `protobuf:"varint,40,opt,name=BandageNum" json:"BandageNum"`
	MedicalBoxNum     uint32  `protobuf:"varint,41,opt,name=MedicalBoxNum" json:"MedicalBoxNum"`
	PainkillerNum     uint32  `protobuf:"varint,42,opt,name=PainkillerNum" json:"PainkillerNum"`
	EnergyNum         uint32  `protobuf:"varint,43,opt,name=EnergyNum" json:"EnergyNum"`
	HeadShotNum       uint32  `protobuf:"varint,44,opt,name=HeadShotNum" json:"HeadShotNum"`
	EffectHarm        uint32  `protobuf:"varint,45,opt,name=EffectHarm" json:"EffectHarm"`
	ShotNum           uint32  `protobuf:"varint,46,opt,name=ShotNum" json:"ShotNum"`
	ReviveNum         uint32  `protobuf:"varint,47,opt,name=ReviveNum" json:"ReviveNum"`
	KillDistance      float32 `protobuf:"fixed32,48,opt,name=KillDistance" json:"KillDistance"`
	KillStmNum        uint32  `protobuf:"varint,49,opt,name=KillStmNum" json:"KillStmNum"`
	RCarUseNum        uint32  `protobuf:"varint,50,opt,name=RCarUseNum" json:"RCarUseNum"`
	RCarDestoryNum    uint32  `protobuf:"varint,51,opt,name=RCarDestoryNum" json:"RCarDestoryNum"`
	AttackNum         uint32  `protobuf:"varint,52,opt,name=AttackNum" json:"AttackNum"`
	SkyBox            uint32  `protobuf:"varint,53,opt,name=SkyBox" json:"SkyBox"`
	Kill              uint32  `protobuf:"varint,54,opt,name=Kill" json:"Kill"`
	TotalSurviveTime  int64   `protobuf:"varint,55,opt,name=TotalSurviveTime" json:"TotalSurviveTime"`
	TotalDistance     float32 `protobuf:"fixed32,56,opt,name=TotalDistance" json:"TotalDistance"`
	TotalRank         uint32  `protobuf:"varint,57,opt,name=TotalRank" json:"TotalRank"`
	SoloRating        float32 `protobuf:"fixed32,58,opt,name=SoloRating" json:"SoloRating"`
	DuoRating         float32 `protobuf:"fixed32,59,opt,name=DuoRating" json:"DuoRating"`
	SquadRating       float32 `protobuf:"fixed32,60,opt,name=SquadRating" json:"SquadRating"`
	SoloRank          uint32  `protobuf:"varint,61,opt,name=SoloRank" json:"SoloRank"`
	DuoRank           uint32  `protobuf:"varint,62,opt,name=DuoRank" json:"DuoRank"`
	SquadRank         uint32  `protobuf:"varint,63,opt,name=SquadRank" json:"SquadRank"`
	TopRating         float32 `protobuf:"fixed32,64,opt,name=TopRating" json:"TopRating"`
	TotalCoin         uint32  `protobuf:"varint,65,opt,name=TotalCoin" json:"TotalCoin"`
	TotalCarDistance  float32 `protobuf:"fixed32,66,opt,name=TotalCarDistance" json:"TotalCarDistance"`
	TeamID            uint64  `protobuf:"varint,67,opt,name=TeamID" json:"TeamID"`
	GunID             uint64  `protobuf:"varint,68,opt,name=GunID" json:"GunID"`
	SightID           uint32  `protobuf:"varint,69,opt,name=SightID" json:"SightID"`
	SilenceID         uint32  `protobuf:"varint,70,opt,name=SilenceID" json:"SilenceID"`
	MagazineID        uint32  `protobuf:"varint,71,opt,name=MagazineID" json:"MagazineID"`
	StockID           uint32  `protobuf:"varint,72,opt,name=StockID" json:"StockID"`
	HandleID          uint32  `protobuf:"varint,73,opt,name=HandleID" json:"HandleID"`
	OpenIDByKill      string  `protobuf:"bytes,74,opt,name=OpenIDByKill" json:"OpenIDByKill"`
	GunIDByKill       uint64  `protobuf:"varint,75,opt,name=GunIDByKill" json:"GunIDByKill"`
	SightIDByKill     uint32  `protobuf:"varint,76,opt,name=SightIDByKill" json:"SightIDByKill"`
	SilenceIDByKill   uint32  `protobuf:"varint,77,opt,name=SilenceIDByKill" json:"SilenceIDByKill"`
	MagazineIDByKill  uint32  `protobuf:"varint,78,opt,name=MagazineIDByKill" json:"MagazineIDByKill"`
	StockIDByKill     uint32  `protobuf:"varint,79,opt,name=StockIDByKill" json:"StockIDByKill"`
	HandleIDByKill    uint32  `protobuf:"varint,80,opt,name=HandleIDByKill" json:"HandleIDByKill"`
	DeadIsHead        uint32  `protobuf:"varint,81,opt,name=DeadIsHead" json:"DeadIsHead"`
	WatchType         uint32  `protobuf:"varint,82,opt,name=WatchType" json:"WatchType"`
	WatchTime         int64   `protobuf:"varint,83,opt,name=WatchTime" json:"WatchTime"`
	LoadFailPlayerNum uint32  `protobuf:"varint,84,opt,name=LoadFailPlayerNum" json:"LoadFailPlayerNum"`
	VRoleName         string  `protobuf:"bytes,85,opt,name=vRoleName" json:"vRoleName"`
	MatchMode         uint32  `protobuf:"varint,86,opt,name=MatchMode" json:"MatchMode"`
	ParachuteType     uint32  `protobuf:"varint,87,opt,name=ParachuteType" json:"ParachuteType"`
	TankUseTime       uint32  `protobuf:"varint,88,opt,name=tankUseTime" json:"tankUseTime"`
	TankKillNum       uint32  `protobuf:"varint,89,opt,name=tankKillNum" json:"tankKillNum"`
}

func (m *RoundFlow) Reset()                    { *m = RoundFlow{} }
func (m *RoundFlow) String() string            { return proto.CompactTextString(m) }
func (*RoundFlow) ProtoMessage()               {}
func (*RoundFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{62} }

func (m *RoundFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *RoundFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *RoundFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *RoundFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *RoundFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *RoundFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *RoundFlow) GetBattleID() uint64 {
	if m != nil {
		return m.BattleID
	}
	return 0
}

func (m *RoundFlow) GetBattleType() uint32 {
	if m != nil {
		return m.BattleType
	}
	return 0
}

func (m *RoundFlow) GetRoundScore() uint32 {
	if m != nil {
		return m.RoundScore
	}
	return 0
}

func (m *RoundFlow) GetRoundTime() uint32 {
	if m != nil {
		return m.RoundTime
	}
	return 0
}

func (m *RoundFlow) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *RoundFlow) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *RoundFlow) GetGold() uint32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *RoundFlow) GetTotalBattleNum() uint32 {
	if m != nil {
		return m.TotalBattleNum
	}
	return 0
}

func (m *RoundFlow) GetFirstNum() uint32 {
	if m != nil {
		return m.FirstNum
	}
	return 0
}

func (m *RoundFlow) GetTopTenNum() uint32 {
	if m != nil {
		return m.TopTenNum
	}
	return 0
}

func (m *RoundFlow) GetFirstRate() string {
	if m != nil {
		return m.FirstRate
	}
	return ""
}

func (m *RoundFlow) GetTopTenRate() string {
	if m != nil {
		return m.TopTenRate
	}
	return ""
}

func (m *RoundFlow) GetSingleMaxKill() uint32 {
	if m != nil {
		return m.SingleMaxKill
	}
	return 0
}

func (m *RoundFlow) GetTotalKillNum() uint32 {
	if m != nil {
		return m.TotalKillNum
	}
	return 0
}

func (m *RoundFlow) GetAverageKillNum() string {
	if m != nil {
		return m.AverageKillNum
	}
	return ""
}

func (m *RoundFlow) GetSingleMaxHeadShot() uint32 {
	if m != nil {
		return m.SingleMaxHeadShot
	}
	return 0
}

func (m *RoundFlow) GetTotalHeadShot() uint32 {
	if m != nil {
		return m.TotalHeadShot
	}
	return 0
}

func (m *RoundFlow) GetTotalEffectHarm() uint32 {
	if m != nil {
		return m.TotalEffectHarm
	}
	return 0
}

func (m *RoundFlow) GetAverageEffectHarm() string {
	if m != nil {
		return m.AverageEffectHarm
	}
	return ""
}

func (m *RoundFlow) GetHeadShotRate() string {
	if m != nil {
		return m.HeadShotRate
	}
	return ""
}

func (m *RoundFlow) GetRecvItemUseNum() uint32 {
	if m != nil {
		return m.RecvItemUseNum
	}
	return 0
}

func (m *RoundFlow) GetCarUseNum() uint32 {
	if m != nil {
		return m.CarUseNum
	}
	return 0
}

func (m *RoundFlow) GetCarDestroyNum() uint32 {
	if m != nil {
		return m.CarDestroyNum
	}
	return 0
}

func (m *RoundFlow) GetKillRating() float32 {
	if m != nil {
		return m.KillRating
	}
	return 0
}

func (m *RoundFlow) GetWinRating() float32 {
	if m != nil {
		return m.WinRating
	}
	return 0
}

func (m *RoundFlow) GetRoundRating() float32 {
	if m != nil {
		return m.RoundRating
	}
	return 0
}

func (m *RoundFlow) GetTotalRating() float32 {
	if m != nil {
		return m.TotalRating
	}
	return 0
}

func (m *RoundFlow) GetPlayerNum() uint32 {
	if m != nil {
		return m.PlayerNum
	}
	return 0
}

func (m *RoundFlow) GetAINum() uint32 {
	if m != nil {
		return m.AINum
	}
	return 0
}

func (m *RoundFlow) GetPlayerRunDistance() float32 {
	if m != nil {
		return m.PlayerRunDistance
	}
	return 0
}

func (m *RoundFlow) GetCarRunDistance() float32 {
	if m != nil {
		return m.CarRunDistance
	}
	return 0
}

func (m *RoundFlow) GetDEADTYPE() uint32 {
	if m != nil {
		return m.DEADTYPE
	}
	return 0
}

func (m *RoundFlow) GetRecoverHp() uint32 {
	if m != nil {
		return m.RecoverHp
	}
	return 0
}

func (m *RoundFlow) GetBandageNum() uint32 {
	if m != nil {
		return m.BandageNum
	}
	return 0
}

func (m *RoundFlow) GetMedicalBoxNum() uint32 {
	if m != nil {
		return m.MedicalBoxNum
	}
	return 0
}

func (m *RoundFlow) GetPainkillerNum() uint32 {
	if m != nil {
		return m.PainkillerNum
	}
	return 0
}

func (m *RoundFlow) GetEnergyNum() uint32 {
	if m != nil {
		return m.EnergyNum
	}
	return 0
}

func (m *RoundFlow) GetHeadShotNum() uint32 {
	if m != nil {
		return m.HeadShotNum
	}
	return 0
}

func (m *RoundFlow) GetEffectHarm() uint32 {
	if m != nil {
		return m.EffectHarm
	}
	return 0
}

func (m *RoundFlow) GetShotNum() uint32 {
	if m != nil {
		return m.ShotNum
	}
	return 0
}

func (m *RoundFlow) GetReviveNum() uint32 {
	if m != nil {
		return m.ReviveNum
	}
	return 0
}

func (m *RoundFlow) GetKillDistance() float32 {
	if m != nil {
		return m.KillDistance
	}
	return 0
}

func (m *RoundFlow) GetKillStmNum() uint32 {
	if m != nil {
		return m.KillStmNum
	}
	return 0
}

func (m *RoundFlow) GetRCarUseNum() uint32 {
	if m != nil {
		return m.RCarUseNum
	}
	return 0
}

func (m *RoundFlow) GetRCarDestoryNum() uint32 {
	if m != nil {
		return m.RCarDestoryNum
	}
	return 0
}

func (m *RoundFlow) GetAttackNum() uint32 {
	if m != nil {
		return m.AttackNum
	}
	return 0
}

func (m *RoundFlow) GetSkyBox() uint32 {
	if m != nil {
		return m.SkyBox
	}
	return 0
}

func (m *RoundFlow) GetKill() uint32 {
	if m != nil {
		return m.Kill
	}
	return 0
}

func (m *RoundFlow) GetTotalSurviveTime() int64 {
	if m != nil {
		return m.TotalSurviveTime
	}
	return 0
}

func (m *RoundFlow) GetTotalDistance() float32 {
	if m != nil {
		return m.TotalDistance
	}
	return 0
}

func (m *RoundFlow) GetTotalRank() uint32 {
	if m != nil {
		return m.TotalRank
	}
	return 0
}

func (m *RoundFlow) GetSoloRating() float32 {
	if m != nil {
		return m.SoloRating
	}
	return 0
}

func (m *RoundFlow) GetDuoRating() float32 {
	if m != nil {
		return m.DuoRating
	}
	return 0
}

func (m *RoundFlow) GetSquadRating() float32 {
	if m != nil {
		return m.SquadRating
	}
	return 0
}

func (m *RoundFlow) GetSoloRank() uint32 {
	if m != nil {
		return m.SoloRank
	}
	return 0
}

func (m *RoundFlow) GetDuoRank() uint32 {
	if m != nil {
		return m.DuoRank
	}
	return 0
}

func (m *RoundFlow) GetSquadRank() uint32 {
	if m != nil {
		return m.SquadRank
	}
	return 0
}

func (m *RoundFlow) GetTopRating() float32 {
	if m != nil {
		return m.TopRating
	}
	return 0
}

func (m *RoundFlow) GetTotalCoin() uint32 {
	if m != nil {
		return m.TotalCoin
	}
	return 0
}

func (m *RoundFlow) GetTotalCarDistance() float32 {
	if m != nil {
		return m.TotalCarDistance
	}
	return 0
}

func (m *RoundFlow) GetTeamID() uint64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *RoundFlow) GetGunID() uint64 {
	if m != nil {
		return m.GunID
	}
	return 0
}

func (m *RoundFlow) GetSightID() uint32 {
	if m != nil {
		return m.SightID
	}
	return 0
}

func (m *RoundFlow) GetSilenceID() uint32 {
	if m != nil {
		return m.SilenceID
	}
	return 0
}

func (m *RoundFlow) GetMagazineID() uint32 {
	if m != nil {
		return m.MagazineID
	}
	return 0
}

func (m *RoundFlow) GetStockID() uint32 {
	if m != nil {
		return m.StockID
	}
	return 0
}

func (m *RoundFlow) GetHandleID() uint32 {
	if m != nil {
		return m.HandleID
	}
	return 0
}

func (m *RoundFlow) GetOpenIDByKill() string {
	if m != nil {
		return m.OpenIDByKill
	}
	return ""
}

func (m *RoundFlow) GetGunIDByKill() uint64 {
	if m != nil {
		return m.GunIDByKill
	}
	return 0
}

func (m *RoundFlow) GetSightIDByKill() uint32 {
	if m != nil {
		return m.SightIDByKill
	}
	return 0
}

func (m *RoundFlow) GetSilenceIDByKill() uint32 {
	if m != nil {
		return m.SilenceIDByKill
	}
	return 0
}

func (m *RoundFlow) GetMagazineIDByKill() uint32 {
	if m != nil {
		return m.MagazineIDByKill
	}
	return 0
}

func (m *RoundFlow) GetStockIDByKill() uint32 {
	if m != nil {
		return m.StockIDByKill
	}
	return 0
}

func (m *RoundFlow) GetHandleIDByKill() uint32 {
	if m != nil {
		return m.HandleIDByKill
	}
	return 0
}

func (m *RoundFlow) GetDeadIsHead() uint32 {
	if m != nil {
		return m.DeadIsHead
	}
	return 0
}

func (m *RoundFlow) GetWatchType() uint32 {
	if m != nil {
		return m.WatchType
	}
	return 0
}

func (m *RoundFlow) GetWatchTime() int64 {
	if m != nil {
		return m.WatchTime
	}
	return 0
}

func (m *RoundFlow) GetLoadFailPlayerNum() uint32 {
	if m != nil {
		return m.LoadFailPlayerNum
	}
	return 0
}

func (m *RoundFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *RoundFlow) GetMatchMode() uint32 {
	if m != nil {
		return m.MatchMode
	}
	return 0
}

func (m *RoundFlow) GetParachuteType() uint32 {
	if m != nil {
		return m.ParachuteType
	}
	return 0
}

func (m *RoundFlow) GetTankUseTime() uint32 {
	if m != nil {
		return m.TankUseTime
	}
	return 0
}

func (m *RoundFlow) GetTankKillNum() uint32 {
	if m != nil {
		return m.TankKillNum
	}
	return 0
}

// GameCareer 生涯概况
type CareerData struct {
	Uid              uint64  `protobuf:"varint,1,opt,name=Uid" json:"Uid"`
	TotalBattleNum   uint32  `protobuf:"varint,2,opt,name=TotalBattleNum" json:"TotalBattleNum"`
	TotalFirstNum    uint32  `protobuf:"varint,3,opt,name=TotalFirstNum" json:"TotalFirstNum"`
	TotalTopTenNum   uint32  `protobuf:"varint,4,opt,name=TotalTopTenNum" json:"TotalTopTenNum"`
	TotalKillNum     uint32  `protobuf:"varint,5,opt,name=TotalKillNum" json:"TotalKillNum"`
	TotalHeadShot    uint32  `protobuf:"varint,6,opt,name=TotalHeadShot" json:"TotalHeadShot"`
	TotalShotNum     uint32  `protobuf:"varint,7,opt,name=TotalShotNum" json:"TotalShotNum"`
	TotalEffectHarm  uint32  `protobuf:"varint,8,opt,name=TotalEffectHarm" json:"TotalEffectHarm"`
	TotalSurviveTime int64   `protobuf:"varint,9,opt,name=TotalSurviveTime" json:"TotalSurviveTime"`
	TotalDistance    float32 `protobuf:"fixed32,10,opt,name=TotalDistance" json:"TotalDistance"`
	SoloRating       float32 `protobuf:"fixed32,11,opt,name=SoloRating" json:"SoloRating"`
	SoloRank         uint32  `protobuf:"varint,12,opt,name=SoloRank" json:"SoloRank"`
	DuoRating        float32 `protobuf:"fixed32,13,opt,name=DuoRating" json:"DuoRating"`
	DuoRank          uint32  `protobuf:"varint,14,opt,name=DuoRank" json:"DuoRank"`
	SquadRating      float32 `protobuf:"fixed32,15,opt,name=SquadRating" json:"SquadRating"`
	SquadRank        uint32  `protobuf:"varint,16,opt,name=SquadRank" json:"SquadRank"`
	TotalRating      float32 `protobuf:"fixed32,17,opt,name=TotalRating" json:"TotalRating"`
	TotalRank        uint32  `protobuf:"varint,18,opt,name=TotalRank" json:"TotalRank"`
	TopRating        float32 `protobuf:"fixed32,19,opt,name=TopRating" json:"TopRating"`
	NameColor        uint32  `protobuf:"varint,20,opt,name=NameColor" json:"NameColor"`
}

func (m *CareerData) Reset()                    { *m = CareerData{} }
func (m *CareerData) String() string            { return proto.CompactTextString(m) }
func (*CareerData) ProtoMessage()               {}
func (*CareerData) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{63} }

func (m *CareerData) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CareerData) GetTotalBattleNum() uint32 {
	if m != nil {
		return m.TotalBattleNum
	}
	return 0
}

func (m *CareerData) GetTotalFirstNum() uint32 {
	if m != nil {
		return m.TotalFirstNum
	}
	return 0
}

func (m *CareerData) GetTotalTopTenNum() uint32 {
	if m != nil {
		return m.TotalTopTenNum
	}
	return 0
}

func (m *CareerData) GetTotalKillNum() uint32 {
	if m != nil {
		return m.TotalKillNum
	}
	return 0
}

func (m *CareerData) GetTotalHeadShot() uint32 {
	if m != nil {
		return m.TotalHeadShot
	}
	return 0
}

func (m *CareerData) GetTotalShotNum() uint32 {
	if m != nil {
		return m.TotalShotNum
	}
	return 0
}

func (m *CareerData) GetTotalEffectHarm() uint32 {
	if m != nil {
		return m.TotalEffectHarm
	}
	return 0
}

func (m *CareerData) GetTotalSurviveTime() int64 {
	if m != nil {
		return m.TotalSurviveTime
	}
	return 0
}

func (m *CareerData) GetTotalDistance() float32 {
	if m != nil {
		return m.TotalDistance
	}
	return 0
}

func (m *CareerData) GetSoloRating() float32 {
	if m != nil {
		return m.SoloRating
	}
	return 0
}

func (m *CareerData) GetSoloRank() uint32 {
	if m != nil {
		return m.SoloRank
	}
	return 0
}

func (m *CareerData) GetDuoRating() float32 {
	if m != nil {
		return m.DuoRating
	}
	return 0
}

func (m *CareerData) GetDuoRank() uint32 {
	if m != nil {
		return m.DuoRank
	}
	return 0
}

func (m *CareerData) GetSquadRating() float32 {
	if m != nil {
		return m.SquadRating
	}
	return 0
}

func (m *CareerData) GetSquadRank() uint32 {
	if m != nil {
		return m.SquadRank
	}
	return 0
}

func (m *CareerData) GetTotalRating() float32 {
	if m != nil {
		return m.TotalRating
	}
	return 0
}

func (m *CareerData) GetTotalRank() uint32 {
	if m != nil {
		return m.TotalRank
	}
	return 0
}

func (m *CareerData) GetTopRating() float32 {
	if m != nil {
		return m.TopRating
	}
	return 0
}

func (m *CareerData) GetNameColor() uint32 {
	if m != nil {
		return m.NameColor
	}
	return 0
}

// CareerBase 生涯数据
type CareerBase struct {
	TotalBattleNum    uint32  `protobuf:"varint,1,opt,name=TotalBattleNum" json:"TotalBattleNum"`
	FirstNum          uint32  `protobuf:"varint,2,opt,name=FirstNum" json:"FirstNum"`
	TopTenNum         uint32  `protobuf:"varint,3,opt,name=TopTenNum" json:"TopTenNum"`
	TotalKillNum      uint32  `protobuf:"varint,4,opt,name=TotalKillNum" json:"TotalKillNum"`
	TotalHeadShot     uint32  `protobuf:"varint,5,opt,name=TotalHeadShot" json:"TotalHeadShot"`
	Totalshotnum      uint32  `protobuf:"varint,6,opt,name=Totalshotnum" json:"Totalshotnum"`
	TotalEffectHarm   uint32  `protobuf:"varint,7,opt,name=TotalEffectHarm" json:"TotalEffectHarm"`
	SurviveTime       int64   `protobuf:"varint,8,opt,name=SurviveTime" json:"SurviveTime"`
	TotalDistance     float32 `protobuf:"fixed32,9,opt,name=TotalDistance" json:"TotalDistance"`
	SoloWinRating     float32 `protobuf:"fixed32,10,opt,name=SoloWinRating" json:"SoloWinRating"`
	SoloKillRating    float32 `protobuf:"fixed32,11,opt,name=SoloKillRating" json:"SoloKillRating"`
	DoubleWinRating   float32 `protobuf:"fixed32,12,opt,name=DoubleWinRating" json:"DoubleWinRating"`
	DoubleKillRating  float32 `protobuf:"fixed32,13,opt,name=DoubleKillRating" json:"DoubleKillRating"`
	FourWinRating     float32 `protobuf:"fixed32,14,opt,name=FourWinRating" json:"FourWinRating"`
	FourKillRating    float32 `protobuf:"fixed32,15,opt,name=FourKillRating" json:"FourKillRating"`
	SoloRating        float32 `protobuf:"fixed32,16,opt,name=SoloRating" json:"SoloRating"`
	DoubleRating      float32 `protobuf:"fixed32,17,opt,name=DoubleRating" json:"DoubleRating"`
	FourRating        float32 `protobuf:"fixed32,18,opt,name=FourRating" json:"FourRating"`
	Totalscore        float32 `protobuf:"fixed32,19,opt,name=Totalscore" json:"Totalscore"`
	Totalrank         uint32  `protobuf:"varint,20,opt,name=Totalrank" json:"Totalrank"`
	SoloRank          uint32  `protobuf:"varint,21,opt,name=SoloRank" json:"SoloRank"`
	DoubleRank        uint32  `protobuf:"varint,22,opt,name=DoubleRank" json:"DoubleRank"`
	SquadRank         uint32  `protobuf:"varint,23,opt,name=SquadRank" json:"SquadRank"`
	TopScore          float32 `protobuf:"fixed32,24,opt,name=TopScore" json:"TopScore"`
	SingleMaxKill     uint32  `protobuf:"varint,25,opt,name=SingleMaxKill" json:"SingleMaxKill"`
	SingleMaxHeadShot uint32  `protobuf:"varint,26,opt,name=SingleMaxHeadShot" json:"SingleMaxHeadShot"`
	RecvItemUseNum    uint32  `protobuf:"varint,27,opt,name=RecvItemUseNum" json:"RecvItemUseNum"`
	CarUseNum         uint32  `protobuf:"varint,28,opt,name=CarUseNum" json:"CarUseNum"`
	CarDestroyNum     uint32  `protobuf:"varint,29,opt,name=CarDestroyNum" json:"CarDestroyNum"`
	Id                uint64  `protobuf:"varint,30,opt,name=Id" json:"Id"`
}

func (m *CareerBase) Reset()                    { *m = CareerBase{} }
func (m *CareerBase) String() string            { return proto.CompactTextString(m) }
func (*CareerBase) ProtoMessage()               {}
func (*CareerBase) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{64} }

func (m *CareerBase) GetTotalBattleNum() uint32 {
	if m != nil {
		return m.TotalBattleNum
	}
	return 0
}

func (m *CareerBase) GetFirstNum() uint32 {
	if m != nil {
		return m.FirstNum
	}
	return 0
}

func (m *CareerBase) GetTopTenNum() uint32 {
	if m != nil {
		return m.TopTenNum
	}
	return 0
}

func (m *CareerBase) GetTotalKillNum() uint32 {
	if m != nil {
		return m.TotalKillNum
	}
	return 0
}

func (m *CareerBase) GetTotalHeadShot() uint32 {
	if m != nil {
		return m.TotalHeadShot
	}
	return 0
}

func (m *CareerBase) GetTotalshotnum() uint32 {
	if m != nil {
		return m.Totalshotnum
	}
	return 0
}

func (m *CareerBase) GetTotalEffectHarm() uint32 {
	if m != nil {
		return m.TotalEffectHarm
	}
	return 0
}

func (m *CareerBase) GetSurviveTime() int64 {
	if m != nil {
		return m.SurviveTime
	}
	return 0
}

func (m *CareerBase) GetTotalDistance() float32 {
	if m != nil {
		return m.TotalDistance
	}
	return 0
}

func (m *CareerBase) GetSoloWinRating() float32 {
	if m != nil {
		return m.SoloWinRating
	}
	return 0
}

func (m *CareerBase) GetSoloKillRating() float32 {
	if m != nil {
		return m.SoloKillRating
	}
	return 0
}

func (m *CareerBase) GetDoubleWinRating() float32 {
	if m != nil {
		return m.DoubleWinRating
	}
	return 0
}

func (m *CareerBase) GetDoubleKillRating() float32 {
	if m != nil {
		return m.DoubleKillRating
	}
	return 0
}

func (m *CareerBase) GetFourWinRating() float32 {
	if m != nil {
		return m.FourWinRating
	}
	return 0
}

func (m *CareerBase) GetFourKillRating() float32 {
	if m != nil {
		return m.FourKillRating
	}
	return 0
}

func (m *CareerBase) GetSoloRating() float32 {
	if m != nil {
		return m.SoloRating
	}
	return 0
}

func (m *CareerBase) GetDoubleRating() float32 {
	if m != nil {
		return m.DoubleRating
	}
	return 0
}

func (m *CareerBase) GetFourRating() float32 {
	if m != nil {
		return m.FourRating
	}
	return 0
}

func (m *CareerBase) GetTotalscore() float32 {
	if m != nil {
		return m.Totalscore
	}
	return 0
}

func (m *CareerBase) GetTotalrank() uint32 {
	if m != nil {
		return m.Totalrank
	}
	return 0
}

func (m *CareerBase) GetSoloRank() uint32 {
	if m != nil {
		return m.SoloRank
	}
	return 0
}

func (m *CareerBase) GetDoubleRank() uint32 {
	if m != nil {
		return m.DoubleRank
	}
	return 0
}

func (m *CareerBase) GetSquadRank() uint32 {
	if m != nil {
		return m.SquadRank
	}
	return 0
}

func (m *CareerBase) GetTopScore() float32 {
	if m != nil {
		return m.TopScore
	}
	return 0
}

func (m *CareerBase) GetSingleMaxKill() uint32 {
	if m != nil {
		return m.SingleMaxKill
	}
	return 0
}

func (m *CareerBase) GetSingleMaxHeadShot() uint32 {
	if m != nil {
		return m.SingleMaxHeadShot
	}
	return 0
}

func (m *CareerBase) GetRecvItemUseNum() uint32 {
	if m != nil {
		return m.RecvItemUseNum
	}
	return 0
}

func (m *CareerBase) GetCarUseNum() uint32 {
	if m != nil {
		return m.CarUseNum
	}
	return 0
}

func (m *CareerBase) GetCarDestroyNum() uint32 {
	if m != nil {
		return m.CarDestroyNum
	}
	return 0
}

func (m *CareerBase) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// SettleDay 比赛记录
type MatchRecord struct {
	Solomodel  []*DayRecordData `protobuf:"bytes,1,rep,name=solomodel" json:"solomodel,omitempty"`
	Duomodel   []*DayRecordData `protobuf:"bytes,2,rep,name=duomodel" json:"duomodel,omitempty"`
	Squadmodel []*DayRecordData `protobuf:"bytes,3,rep,name=squadmodel" json:"squadmodel,omitempty"`
}

func (m *MatchRecord) Reset()                    { *m = MatchRecord{} }
func (m *MatchRecord) String() string            { return proto.CompactTextString(m) }
func (*MatchRecord) ProtoMessage()               {}
func (*MatchRecord) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{65} }

func (m *MatchRecord) GetSolomodel() []*DayRecordData {
	if m != nil {
		return m.Solomodel
	}
	return nil
}

func (m *MatchRecord) GetDuomodel() []*DayRecordData {
	if m != nil {
		return m.Duomodel
	}
	return nil
}

func (m *MatchRecord) GetSquadmodel() []*DayRecordData {
	if m != nil {
		return m.Squadmodel
	}
	return nil
}

// SettleDay 每天记录信息
type DayRecordData struct {
	NowTime      int64   `protobuf:"varint,1,opt,name=NowTime" json:"NowTime"`
	Model        uint32  `protobuf:"varint,2,opt,name=Model" json:"Model"`
	Rating       float32 `protobuf:"fixed32,3,opt,name=Rating" json:"Rating"`
	TotalKillNum uint32  `protobuf:"varint,4,opt,name=TotalKillNum" json:"TotalKillNum"`
	DayBattleNum uint32  `protobuf:"varint,5,opt,name=DayBattleNum" json:"DayBattleNum"`
	FirstNum     uint32  `protobuf:"varint,6,opt,name=FirstNum" json:"FirstNum"`
	TopTenNum    uint32  `protobuf:"varint,7,opt,name=TopTenNum" json:"TopTenNum"`
	Id           string  `protobuf:"bytes,8,opt,name=id" json:"id"`
}

func (m *DayRecordData) Reset()                    { *m = DayRecordData{} }
func (m *DayRecordData) String() string            { return proto.CompactTextString(m) }
func (*DayRecordData) ProtoMessage()               {}
func (*DayRecordData) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{66} }

func (m *DayRecordData) GetNowTime() int64 {
	if m != nil {
		return m.NowTime
	}
	return 0
}

func (m *DayRecordData) GetModel() uint32 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *DayRecordData) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *DayRecordData) GetTotalKillNum() uint32 {
	if m != nil {
		return m.TotalKillNum
	}
	return 0
}

func (m *DayRecordData) GetDayBattleNum() uint32 {
	if m != nil {
		return m.DayBattleNum
	}
	return 0
}

func (m *DayRecordData) GetFirstNum() uint32 {
	if m != nil {
		return m.FirstNum
	}
	return 0
}

func (m *DayRecordData) GetTopTenNum() uint32 {
	if m != nil {
		return m.TopTenNum
	}
	return 0
}

func (m *DayRecordData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// SettleDay 每天结算信息
type SettleDayData struct {
	FirstNum        uint32    `protobuf:"varint,1,opt,name=FirstNum" json:"FirstNum"`
	TopTenNum       uint32    `protobuf:"varint,2,opt,name=TopTenNum" json:"TopTenNum"`
	WinRating       float32   `protobuf:"fixed32,3,opt,name=WinRating" json:"WinRating"`
	KillRating      float32   `protobuf:"fixed32,4,opt,name=KillRating" json:"KillRating"`
	TotalEffectHarm uint32    `protobuf:"varint,5,opt,name=TotalEffectHarm" json:"TotalEffectHarm"`
	TotalShotNum    uint32    `protobuf:"varint,6,opt,name=TotalShotNum" json:"TotalShotNum"`
	SurviveTime     uint32    `protobuf:"varint,7,opt,name=SurviveTime" json:"SurviveTime"`
	TotalDistance   float32   `protobuf:"fixed32,8,opt,name=TotalDistance" json:"TotalDistance"`
	AttackNum       uint32    `protobuf:"varint,9,opt,name=AttackNum" json:"AttackNum"`
	RecoverNum      uint32    `protobuf:"varint,10,opt,name=RecoverNum" json:"RecoverNum"`
	Revivenum       uint32    `protobuf:"varint,11,opt,name=Revivenum" json:"Revivenum"`
	HeadShotNum     uint32    `protobuf:"varint,12,opt,name=HeadShotNum" json:"HeadShotNum"`
	DayBattleNum    uint32    `protobuf:"varint,13,opt,name=DayBattleNum" json:"DayBattleNum"`
	NowTime         int64     `protobuf:"varint,14,opt,name=NowTime" json:"NowTime"`
	TotalRank       uint32    `protobuf:"varint,15,opt,name=TotalRank" json:"TotalRank"`
	ServerType      string    `protobuf:"bytes,16,opt,name=ServerType" json:"ServerType"`
	Tag             []*DayTag `protobuf:"bytes,17,rep,name=Tag" json:"Tag,omitempty"`
	Id              string    `protobuf:"bytes,18,opt,name=id" json:"id"`
}

func (m *SettleDayData) Reset()                    { *m = SettleDayData{} }
func (m *SettleDayData) String() string            { return proto.CompactTextString(m) }
func (*SettleDayData) ProtoMessage()               {}
func (*SettleDayData) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{67} }

func (m *SettleDayData) GetFirstNum() uint32 {
	if m != nil {
		return m.FirstNum
	}
	return 0
}

func (m *SettleDayData) GetTopTenNum() uint32 {
	if m != nil {
		return m.TopTenNum
	}
	return 0
}

func (m *SettleDayData) GetWinRating() float32 {
	if m != nil {
		return m.WinRating
	}
	return 0
}

func (m *SettleDayData) GetKillRating() float32 {
	if m != nil {
		return m.KillRating
	}
	return 0
}

func (m *SettleDayData) GetTotalEffectHarm() uint32 {
	if m != nil {
		return m.TotalEffectHarm
	}
	return 0
}

func (m *SettleDayData) GetTotalShotNum() uint32 {
	if m != nil {
		return m.TotalShotNum
	}
	return 0
}

func (m *SettleDayData) GetSurviveTime() uint32 {
	if m != nil {
		return m.SurviveTime
	}
	return 0
}

func (m *SettleDayData) GetTotalDistance() float32 {
	if m != nil {
		return m.TotalDistance
	}
	return 0
}

func (m *SettleDayData) GetAttackNum() uint32 {
	if m != nil {
		return m.AttackNum
	}
	return 0
}

func (m *SettleDayData) GetRecoverNum() uint32 {
	if m != nil {
		return m.RecoverNum
	}
	return 0
}

func (m *SettleDayData) GetRevivenum() uint32 {
	if m != nil {
		return m.Revivenum
	}
	return 0
}

func (m *SettleDayData) GetHeadShotNum() uint32 {
	if m != nil {
		return m.HeadShotNum
	}
	return 0
}

func (m *SettleDayData) GetDayBattleNum() uint32 {
	if m != nil {
		return m.DayBattleNum
	}
	return 0
}

func (m *SettleDayData) GetNowTime() int64 {
	if m != nil {
		return m.NowTime
	}
	return 0
}

func (m *SettleDayData) GetTotalRank() uint32 {
	if m != nil {
		return m.TotalRank
	}
	return 0
}

func (m *SettleDayData) GetServerType() string {
	if m != nil {
		return m.ServerType
	}
	return ""
}

func (m *SettleDayData) GetTag() []*DayTag {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *SettleDayData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// DayTag 每日标签
type DayTag struct {
	Tag string `protobuf:"bytes,1,opt,name=Tag" json:"Tag"`
}

func (m *DayTag) Reset()                    { *m = DayTag{} }
func (m *DayTag) String() string            { return proto.CompactTextString(m) }
func (*DayTag) ProtoMessage()               {}
func (*DayTag) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{68} }

func (m *DayTag) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type VehiclePhysics struct {
	Position        *Vector3 `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	Rotation        *Vector3 `protobuf:"bytes,2,opt,name=rotation" json:"rotation,omitempty"`
	Velocity        *Vector3 `protobuf:"bytes,3,opt,name=velocity" json:"velocity,omitempty"`
	AngularVelocity *Vector3 `protobuf:"bytes,4,opt,name=angularVelocity" json:"angularVelocity,omitempty"`
	Gear            int32    `protobuf:"varint,5,opt,name=gear" json:"gear"`
}

func (m *VehiclePhysics) Reset()                    { *m = VehiclePhysics{} }
func (m *VehiclePhysics) String() string            { return proto.CompactTextString(m) }
func (*VehiclePhysics) ProtoMessage()               {}
func (*VehiclePhysics) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{69} }

func (m *VehiclePhysics) GetPosition() *Vector3 {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *VehiclePhysics) GetRotation() *Vector3 {
	if m != nil {
		return m.Rotation
	}
	return nil
}

func (m *VehiclePhysics) GetVelocity() *Vector3 {
	if m != nil {
		return m.Velocity
	}
	return nil
}

func (m *VehiclePhysics) GetAngularVelocity() *Vector3 {
	if m != nil {
		return m.AngularVelocity
	}
	return nil
}

func (m *VehiclePhysics) GetGear() int32 {
	if m != nil {
		return m.Gear
	}
	return 0
}

type Vehicle struct {
	Prop    *VehicleProp    `protobuf:"bytes,1,opt,name=prop" json:"prop,omitempty"`
	Physics *VehiclePhysics `protobuf:"bytes,2,opt,name=physics" json:"physics,omitempty"`
	Ownerid uint64          `protobuf:"varint,3,opt,name=ownerid" json:"ownerid"`
}

func (m *Vehicle) Reset()                    { *m = Vehicle{} }
func (m *Vehicle) String() string            { return proto.CompactTextString(m) }
func (*Vehicle) ProtoMessage()               {}
func (*Vehicle) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{70} }

func (m *Vehicle) GetProp() *VehicleProp {
	if m != nil {
		return m.Prop
	}
	return nil
}

func (m *Vehicle) GetPhysics() *VehiclePhysics {
	if m != nil {
		return m.Physics
	}
	return nil
}

func (m *Vehicle) GetOwnerid() uint64 {
	if m != nil {
		return m.Ownerid
	}
	return 0
}

type DamageDefend struct {
	Id  uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	Dam uint32 `protobuf:"varint,2,opt,name=dam" json:"dam"`
}

func (m *DamageDefend) Reset()                    { *m = DamageDefend{} }
func (m *DamageDefend) String() string            { return proto.CompactTextString(m) }
func (*DamageDefend) ProtoMessage()               {}
func (*DamageDefend) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{71} }

func (m *DamageDefend) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DamageDefend) GetDam() uint32 {
	if m != nil {
		return m.Dam
	}
	return 0
}

type ThrowDamageInfo struct {
	Center  *Vector3        `protobuf:"bytes,1,opt,name=center" json:"center,omitempty"`
	Baseid  uint32          `protobuf:"varint,2,opt,name=baseid" json:"baseid"`
	Defends []*DamageDefend `protobuf:"bytes,3,rep,name=defends" json:"defends,omitempty"`
}

func (m *ThrowDamageInfo) Reset()                    { *m = ThrowDamageInfo{} }
func (m *ThrowDamageInfo) String() string            { return proto.CompactTextString(m) }
func (*ThrowDamageInfo) ProtoMessage()               {}
func (*ThrowDamageInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{72} }

func (m *ThrowDamageInfo) GetCenter() *Vector3 {
	if m != nil {
		return m.Center
	}
	return nil
}

func (m *ThrowDamageInfo) GetBaseid() uint32 {
	if m != nil {
		return m.Baseid
	}
	return 0
}

func (m *ThrowDamageInfo) GetDefends() []*DamageDefend {
	if m != nil {
		return m.Defends
	}
	return nil
}

type DoorList struct {
	DoorList []*DoorData `protobuf:"bytes,1,rep,name=doorList" json:"doorList,omitempty"`
}

func (m *DoorList) Reset()                    { *m = DoorList{} }
func (m *DoorList) String() string            { return proto.CompactTextString(m) }
func (*DoorList) ProtoMessage()               {}
func (*DoorList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{73} }

func (m *DoorList) GetDoorList() []*DoorData {
	if m != nil {
		return m.DoorList
	}
	return nil
}

type DoorData struct {
	Id    uint64   `protobuf:"varint,1,opt,name=id" json:"id"`
	Pos   *Vector3 `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
	State uint32   `protobuf:"varint,3,opt,name=state" json:"state"`
}

func (m *DoorData) Reset()                    { *m = DoorData{} }
func (m *DoorData) String() string            { return proto.CompactTextString(m) }
func (*DoorData) ProtoMessage()               {}
func (*DoorData) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{74} }

func (m *DoorData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DoorData) GetPos() *Vector3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *DoorData) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

type LogItem struct {
	Baseid uint32 `protobuf:"varint,1,opt,name=baseid" json:"baseid"`
	Num    uint32 `protobuf:"varint,2,opt,name=num" json:"num"`
}

func (m *LogItem) Reset()                    { *m = LogItem{} }
func (m *LogItem) String() string            { return proto.CompactTextString(m) }
func (*LogItem) ProtoMessage()               {}
func (*LogItem) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{75} }

func (m *LogItem) GetBaseid() uint32 {
	if m != nil {
		return m.Baseid
	}
	return 0
}

func (m *LogItem) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type SpaceLogInfo struct {
	Items []*LogItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *SpaceLogInfo) Reset()                    { *m = SpaceLogInfo{} }
func (m *SpaceLogInfo) String() string            { return proto.CompactTextString(m) }
func (*SpaceLogInfo) ProtoMessage()               {}
func (*SpaceLogInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{76} }

func (m *SpaceLogInfo) GetItems() []*LogItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// GuideFlow 新手引导节点流水表
type GuideFlow struct {
	GameSvrId        string `protobuf:"bytes,1,opt,name=GameSvrId" json:"GameSvrId"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=dtEventTime" json:"dtEventTime"`
	VGameAppid       string `protobuf:"bytes,3,opt,name=vGameAppid" json:"vGameAppid"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=iZoneAreaID" json:"iZoneAreaID"`
	Vopenid          string `protobuf:"bytes,6,opt,name=vopenid" json:"vopenid"`
	VRoleName        string `protobuf:"bytes,7,opt,name=vRoleName" json:"vRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=vRoleProfession" json:"vRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	IGuideID         uint32 `protobuf:"varint,16,opt,name=IGuideID" json:"IGuideID"`
}

func (m *GuideFlow) Reset()                    { *m = GuideFlow{} }
func (m *GuideFlow) String() string            { return proto.CompactTextString(m) }
func (*GuideFlow) ProtoMessage()               {}
func (*GuideFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{77} }

func (m *GuideFlow) GetGameSvrId() string {
	if m != nil {
		return m.GameSvrId
	}
	return ""
}

func (m *GuideFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *GuideFlow) GetVGameAppid() string {
	if m != nil {
		return m.VGameAppid
	}
	return ""
}

func (m *GuideFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *GuideFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *GuideFlow) GetVopenid() string {
	if m != nil {
		return m.Vopenid
	}
	return ""
}

func (m *GuideFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *GuideFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *GuideFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuideFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *GuideFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *GuideFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *GuideFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *GuideFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *GuideFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *GuideFlow) GetIGuideID() uint32 {
	if m != nil {
		return m.IGuideID
	}
	return 0
}

// ChatFlow 聊天流水表
type ChatFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	OpenMic          uint32 `protobuf:"varint,16,opt,name=OpenMic" json:"OpenMic"`
	ChatType         uint32 `protobuf:"varint,17,opt,name=ChatType" json:"ChatType"`
	MsgType          uint32 `protobuf:"varint,18,opt,name=MsgType" json:"MsgType"`
	BattleID         uint64 `protobuf:"varint,19,opt,name=BattleID" json:"BattleID"`
	TeamID           uint64 `protobuf:"varint,20,opt,name=TeamID" json:"TeamID"`
}

func (m *ChatFlow) Reset()                    { *m = ChatFlow{} }
func (m *ChatFlow) String() string            { return proto.CompactTextString(m) }
func (*ChatFlow) ProtoMessage()               {}
func (*ChatFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{78} }

func (m *ChatFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *ChatFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *ChatFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *ChatFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *ChatFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *ChatFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *ChatFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *ChatFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *ChatFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ChatFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *ChatFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ChatFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *ChatFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *ChatFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *ChatFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *ChatFlow) GetOpenMic() uint32 {
	if m != nil {
		return m.OpenMic
	}
	return 0
}

func (m *ChatFlow) GetChatType() uint32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *ChatFlow) GetMsgType() uint32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *ChatFlow) GetBattleID() uint64 {
	if m != nil {
		return m.BattleID
	}
	return 0
}

func (m *ChatFlow) GetTeamID() uint64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

// BattleItemFlow 战场物资表
type BattleItemFlow struct {
	GameSvrID   string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID  string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID      uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	BehaveType  uint32 `protobuf:"varint,6,opt,name=BehaveType" json:"BehaveType"`
	AddReason   uint32 `protobuf:"varint,7,opt,name=AddReason" json:"AddReason"`
	MapID       uint32 `protobuf:"varint,8,opt,name=MapID" json:"MapID"`
	Buildings   uint32 `protobuf:"varint,9,opt,name=Buildings" json:"Buildings"`
	ItemID      uint32 `protobuf:"varint,10,opt,name=ItemID" json:"ItemID"`
	ItemLevel   uint32 `protobuf:"varint,11,opt,name=ItemLevel" json:"ItemLevel"`
	ItemPlace   uint32 `protobuf:"varint,12,opt,name=ItemPlace" json:"ItemPlace"`
	ItemNum     uint32 `protobuf:"varint,13,opt,name=ItemNum" json:"ItemNum"`
}

func (m *BattleItemFlow) Reset()                    { *m = BattleItemFlow{} }
func (m *BattleItemFlow) String() string            { return proto.CompactTextString(m) }
func (*BattleItemFlow) ProtoMessage()               {}
func (*BattleItemFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{79} }

func (m *BattleItemFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *BattleItemFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *BattleItemFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *BattleItemFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *BattleItemFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *BattleItemFlow) GetBehaveType() uint32 {
	if m != nil {
		return m.BehaveType
	}
	return 0
}

func (m *BattleItemFlow) GetAddReason() uint32 {
	if m != nil {
		return m.AddReason
	}
	return 0
}

func (m *BattleItemFlow) GetMapID() uint32 {
	if m != nil {
		return m.MapID
	}
	return 0
}

func (m *BattleItemFlow) GetBuildings() uint32 {
	if m != nil {
		return m.Buildings
	}
	return 0
}

func (m *BattleItemFlow) GetItemID() uint32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

func (m *BattleItemFlow) GetItemLevel() uint32 {
	if m != nil {
		return m.ItemLevel
	}
	return 0
}

func (m *BattleItemFlow) GetItemPlace() uint32 {
	if m != nil {
		return m.ItemPlace
	}
	return 0
}

func (m *BattleItemFlow) GetItemNum() uint32 {
	if m != nil {
		return m.ItemNum
	}
	return 0
}

// BattleFlow 战场流水表
type BattleFlow struct {
	GameSvrID        string  `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string  `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string  `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32  `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32  `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string  `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string  `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32  `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32  `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32  `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string  `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string  `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string  `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string  `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32  `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	Mode             uint64  `protobuf:"varint,16,opt,name=Mode" json:"Mode"`
	TeamType         uint32  `protobuf:"varint,17,opt,name=TeamType" json:"TeamType"`
	TeamID           uint64  `protobuf:"varint,18,opt,name=TeamID" json:"TeamID"`
	BehaveType       uint32  `protobuf:"varint,19,opt,name=BehaveType" json:"BehaveType"`
	BattleID         uint64  `protobuf:"varint,20,opt,name=BattleID" json:"BattleID"`
	MapIDX           float32 `protobuf:"fixed32,21,opt,name=MapIDX" json:"MapIDX"`
	MapIDY           float32 `protobuf:"fixed32,22,opt,name=MapIDY" json:"MapIDY"`
	MapIDZ           float32 `protobuf:"fixed32,23,opt,name=MapIDZ" json:"MapIDZ"`
	MapType          uint32  `protobuf:"varint,24,opt,name=MapType" json:"MapType"`
	Times            uint64  `protobuf:"varint,25,opt,name=Times" json:"Times"`
	AfIemID          uint64  `protobuf:"varint,26,opt,name=AfIemID" json:"AfIemID"`
	BeItemID         uint64  `protobuf:"varint,27,opt,name=BeItemID" json:"BeItemID"`
	AfItemLevel      uint32  `protobuf:"varint,28,opt,name=AfItemLevel" json:"AfItemLevel"`
	BeItemLevel      uint32  `protobuf:"varint,29,opt,name=BeItemLevel" json:"BeItemLevel"`
	BagItemNum       uint32  `protobuf:"varint,30,opt,name=BagItemNum" json:"BagItemNum"`
	RoundTime        int64   `protobuf:"varint,31,opt,name=RoundTime" json:"RoundTime"`
	Distance         float32 `protobuf:"fixed32,32,opt,name=Distance" json:"Distance"`
	SkyBox           uint32  `protobuf:"varint,33,opt,name=SkyBox" json:"SkyBox"`
	MatchMode        uint32  `protobuf:"varint,34,opt,name=MatchMode" json:"MatchMode"`
}

func (m *BattleFlow) Reset()                    { *m = BattleFlow{} }
func (m *BattleFlow) String() string            { return proto.CompactTextString(m) }
func (*BattleFlow) ProtoMessage()               {}
func (*BattleFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{80} }

func (m *BattleFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *BattleFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *BattleFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *BattleFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *BattleFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *BattleFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *BattleFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *BattleFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *BattleFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *BattleFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *BattleFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *BattleFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *BattleFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *BattleFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *BattleFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *BattleFlow) GetMode() uint64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *BattleFlow) GetTeamType() uint32 {
	if m != nil {
		return m.TeamType
	}
	return 0
}

func (m *BattleFlow) GetTeamID() uint64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *BattleFlow) GetBehaveType() uint32 {
	if m != nil {
		return m.BehaveType
	}
	return 0
}

func (m *BattleFlow) GetBattleID() uint64 {
	if m != nil {
		return m.BattleID
	}
	return 0
}

func (m *BattleFlow) GetMapIDX() float32 {
	if m != nil {
		return m.MapIDX
	}
	return 0
}

func (m *BattleFlow) GetMapIDY() float32 {
	if m != nil {
		return m.MapIDY
	}
	return 0
}

func (m *BattleFlow) GetMapIDZ() float32 {
	if m != nil {
		return m.MapIDZ
	}
	return 0
}

func (m *BattleFlow) GetMapType() uint32 {
	if m != nil {
		return m.MapType
	}
	return 0
}

func (m *BattleFlow) GetTimes() uint64 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *BattleFlow) GetAfIemID() uint64 {
	if m != nil {
		return m.AfIemID
	}
	return 0
}

func (m *BattleFlow) GetBeItemID() uint64 {
	if m != nil {
		return m.BeItemID
	}
	return 0
}

func (m *BattleFlow) GetAfItemLevel() uint32 {
	if m != nil {
		return m.AfItemLevel
	}
	return 0
}

func (m *BattleFlow) GetBeItemLevel() uint32 {
	if m != nil {
		return m.BeItemLevel
	}
	return 0
}

func (m *BattleFlow) GetBagItemNum() uint32 {
	if m != nil {
		return m.BagItemNum
	}
	return 0
}

func (m *BattleFlow) GetRoundTime() int64 {
	if m != nil {
		return m.RoundTime
	}
	return 0
}

func (m *BattleFlow) GetDistance() float32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *BattleFlow) GetSkyBox() uint32 {
	if m != nil {
		return m.SkyBox
	}
	return 0
}

func (m *BattleFlow) GetMatchMode() uint32 {
	if m != nil {
		return m.MatchMode
	}
	return 0
}

// BattledResult 战场结果表
type BattleResult struct {
	GameSvrID        string  `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string  `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string  `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32  `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32  `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string  `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string  `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32  `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32  `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32  `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string  `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string  `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string  `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string  `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32  `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	Mode             uint64  `protobuf:"varint,16,opt,name=Mode" json:"Mode"`
	TeamType         uint32  `protobuf:"varint,17,opt,name=TeamType" json:"TeamType"`
	TeamID           uint64  `protobuf:"varint,18,opt,name=TeamID" json:"TeamID"`
	BattleID         uint64  `protobuf:"varint,19,opt,name=BattleID" json:"BattleID"`
	MapIDX           float32 `protobuf:"fixed32,20,opt,name=MapIDX" json:"MapIDX"`
	MapIDY           float32 `protobuf:"fixed32,21,opt,name=MapIDY" json:"MapIDY"`
	MapIDZ           float32 `protobuf:"fixed32,22,opt,name=MapIDZ" json:"MapIDZ"`
	MapType          uint32  `protobuf:"varint,23,opt,name=MapType" json:"MapType"`
	Times            uint64  `protobuf:"varint,24,opt,name=Times" json:"Times"`
	RoundTime        int64   `protobuf:"varint,25,opt,name=RoundTime" json:"RoundTime"`
	ResultType       uint32  `protobuf:"varint,26,opt,name=ResultType" json:"ResultType"`
	RoundScore       float32 `protobuf:"fixed32,27,opt,name=RoundScore" json:"RoundScore"`
	Rank             uint32  `protobuf:"varint,28,opt,name=Rank" json:"Rank"`
	Hurt             uint32  `protobuf:"varint,29,opt,name=Hurt" json:"Hurt"`
	Cirt             uint32  `protobuf:"varint,30,opt,name=Cirt" json:"Cirt"`
	MoneyProduce     uint32  `protobuf:"varint,31,opt,name=MoneyProduce" json:"MoneyProduce"`
	Distance         float32 `protobuf:"fixed32,32,opt,name=Distance" json:"Distance"`
	SkyBox           uint32  `protobuf:"varint,33,opt,name=SkyBox" json:"SkyBox"`
	MatchMode        uint32  `protobuf:"varint,34,opt,name=MatchMode" json:"MatchMode"`
}

func (m *BattleResult) Reset()                    { *m = BattleResult{} }
func (m *BattleResult) String() string            { return proto.CompactTextString(m) }
func (*BattleResult) ProtoMessage()               {}
func (*BattleResult) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{81} }

func (m *BattleResult) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *BattleResult) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *BattleResult) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *BattleResult) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *BattleResult) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *BattleResult) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *BattleResult) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *BattleResult) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *BattleResult) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *BattleResult) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *BattleResult) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *BattleResult) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *BattleResult) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *BattleResult) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *BattleResult) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *BattleResult) GetMode() uint64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *BattleResult) GetTeamType() uint32 {
	if m != nil {
		return m.TeamType
	}
	return 0
}

func (m *BattleResult) GetTeamID() uint64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *BattleResult) GetBattleID() uint64 {
	if m != nil {
		return m.BattleID
	}
	return 0
}

func (m *BattleResult) GetMapIDX() float32 {
	if m != nil {
		return m.MapIDX
	}
	return 0
}

func (m *BattleResult) GetMapIDY() float32 {
	if m != nil {
		return m.MapIDY
	}
	return 0
}

func (m *BattleResult) GetMapIDZ() float32 {
	if m != nil {
		return m.MapIDZ
	}
	return 0
}

func (m *BattleResult) GetMapType() uint32 {
	if m != nil {
		return m.MapType
	}
	return 0
}

func (m *BattleResult) GetTimes() uint64 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *BattleResult) GetRoundTime() int64 {
	if m != nil {
		return m.RoundTime
	}
	return 0
}

func (m *BattleResult) GetResultType() uint32 {
	if m != nil {
		return m.ResultType
	}
	return 0
}

func (m *BattleResult) GetRoundScore() float32 {
	if m != nil {
		return m.RoundScore
	}
	return 0
}

func (m *BattleResult) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *BattleResult) GetHurt() uint32 {
	if m != nil {
		return m.Hurt
	}
	return 0
}

func (m *BattleResult) GetCirt() uint32 {
	if m != nil {
		return m.Cirt
	}
	return 0
}

func (m *BattleResult) GetMoneyProduce() uint32 {
	if m != nil {
		return m.MoneyProduce
	}
	return 0
}

func (m *BattleResult) GetDistance() float32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *BattleResult) GetSkyBox() uint32 {
	if m != nil {
		return m.SkyBox
	}
	return 0
}

func (m *BattleResult) GetMatchMode() uint32 {
	if m != nil {
		return m.MatchMode
	}
	return 0
}

// MatchFlow 战场匹配表
type MatchFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	MatchType        uint32 `protobuf:"varint,16,opt,name=MatchType" json:"MatchType"`
	MatchScene       uint32 `protobuf:"varint,17,opt,name=MatchScene" json:"MatchScene"`
	MatchTime        int64  `protobuf:"varint,18,opt,name=MatchTime" json:"MatchTime"`
	Result           uint32 `protobuf:"varint,19,opt,name=Result" json:"Result"`
	RealNum          uint32 `protobuf:"varint,20,opt,name=RealNum" json:"RealNum"`
	BattleID         uint64 `protobuf:"varint,21,opt,name=BattleID" json:"BattleID"`
	SkyBox           uint32 `protobuf:"varint,22,opt,name=SkyBox" json:"SkyBox"`
	TeamID           uint64 `protobuf:"varint,23,opt,name=TeamID" json:"TeamID"`
	TeamType         uint32 `protobuf:"varint,24,opt,name=TeamType" json:"TeamType"`
	MatchMode        uint32 `protobuf:"varint,25,opt,name=MatchMode" json:"MatchMode"`
}

func (m *MatchFlow) Reset()                    { *m = MatchFlow{} }
func (m *MatchFlow) String() string            { return proto.CompactTextString(m) }
func (*MatchFlow) ProtoMessage()               {}
func (*MatchFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{82} }

func (m *MatchFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *MatchFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *MatchFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *MatchFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *MatchFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *MatchFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *MatchFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *MatchFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *MatchFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MatchFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *MatchFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *MatchFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *MatchFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *MatchFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *MatchFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *MatchFlow) GetMatchType() uint32 {
	if m != nil {
		return m.MatchType
	}
	return 0
}

func (m *MatchFlow) GetMatchScene() uint32 {
	if m != nil {
		return m.MatchScene
	}
	return 0
}

func (m *MatchFlow) GetMatchTime() int64 {
	if m != nil {
		return m.MatchTime
	}
	return 0
}

func (m *MatchFlow) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *MatchFlow) GetRealNum() uint32 {
	if m != nil {
		return m.RealNum
	}
	return 0
}

func (m *MatchFlow) GetBattleID() uint64 {
	if m != nil {
		return m.BattleID
	}
	return 0
}

func (m *MatchFlow) GetSkyBox() uint32 {
	if m != nil {
		return m.SkyBox
	}
	return 0
}

func (m *MatchFlow) GetTeamID() uint64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *MatchFlow) GetTeamType() uint32 {
	if m != nil {
		return m.TeamType
	}
	return 0
}

func (m *MatchFlow) GetMatchMode() uint32 {
	if m != nil {
		return m.MatchMode
	}
	return 0
}

// LiveFlow 个人信息流水
type LiveFlow struct {
	GameSvrID        string  `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string  `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string  `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32  `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32  `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string  `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string  `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	Level            uint32  `protobuf:"varint,8,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32  `protobuf:"varint,9,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string  `protobuf:"bytes,10,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string  `protobuf:"bytes,11,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string  `protobuf:"bytes,12,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string  `protobuf:"bytes,13,opt,name=Network" json:"Network"`
	LoginChannel     uint32  `protobuf:"varint,14,opt,name=LoginChannel" json:"LoginChannel"`
	Score            float32 `protobuf:"fixed32,15,opt,name=Score" json:"Score"`
	ScoreRank        uint32  `protobuf:"varint,16,opt,name=ScoreRank" json:"ScoreRank"`
	Touts            uint32  `protobuf:"varint,17,opt,name=Touts" json:"Touts"`
	Wins             uint32  `protobuf:"varint,18,opt,name=Wins" json:"Wins"`
	Topwins          uint32  `protobuf:"varint,19,opt,name=Topwins" json:"Topwins"`
	KD               uint32  `protobuf:"varint,20,opt,name=KD" json:"KD"`
	BeatAvg          uint32  `protobuf:"varint,21,opt,name=BeatAvg" json:"BeatAvg"`
	WinRate          uint32  `protobuf:"varint,22,opt,name=WinRate" json:"WinRate"`
	TopWinRate       uint32  `protobuf:"varint,23,opt,name=TopWinRate" json:"TopWinRate"`
	CriticalRate     uint32  `protobuf:"varint,24,opt,name=CriticalRate" json:"CriticalRate"`
	BestScore        float32 `protobuf:"fixed32,25,opt,name=BestScore" json:"BestScore"`
	BestRank         uint32  `protobuf:"varint,26,opt,name=BestRank" json:"BestRank"`
	HurtAvg          uint32  `protobuf:"varint,27,opt,name=HurtAvg" json:"HurtAvg"`
	TimeAvg          int64   `protobuf:"varint,28,opt,name=TimeAvg" json:"TimeAvg"`
	DistanceAvg      float32 `protobuf:"fixed32,29,opt,name=DistanceAvg" json:"DistanceAvg"`
	SingBestScore    float32 `protobuf:"fixed32,30,opt,name=SingBestScore" json:"SingBestScore"`
	SingBestRank     uint32  `protobuf:"varint,31,opt,name=SingBestRank" json:"SingBestRank"`
	DuoBestScore     float32 `protobuf:"fixed32,32,opt,name=DuoBestScore" json:"DuoBestScore"`
	DuoBestRank      uint32  `protobuf:"varint,33,opt,name=DuoBestRank" json:"DuoBestRank"`
	SquadBestScore   float32 `protobuf:"fixed32,34,opt,name=SquadBestScore" json:"SquadBestScore"`
	SquadRank        uint32  `protobuf:"varint,35,opt,name=SquadRank" json:"SquadRank"`
}

func (m *LiveFlow) Reset()                    { *m = LiveFlow{} }
func (m *LiveFlow) String() string            { return proto.CompactTextString(m) }
func (*LiveFlow) ProtoMessage()               {}
func (*LiveFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{83} }

func (m *LiveFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *LiveFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *LiveFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *LiveFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *LiveFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *LiveFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *LiveFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *LiveFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *LiveFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *LiveFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *LiveFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *LiveFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *LiveFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *LiveFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *LiveFlow) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *LiveFlow) GetScoreRank() uint32 {
	if m != nil {
		return m.ScoreRank
	}
	return 0
}

func (m *LiveFlow) GetTouts() uint32 {
	if m != nil {
		return m.Touts
	}
	return 0
}

func (m *LiveFlow) GetWins() uint32 {
	if m != nil {
		return m.Wins
	}
	return 0
}

func (m *LiveFlow) GetTopwins() uint32 {
	if m != nil {
		return m.Topwins
	}
	return 0
}

func (m *LiveFlow) GetKD() uint32 {
	if m != nil {
		return m.KD
	}
	return 0
}

func (m *LiveFlow) GetBeatAvg() uint32 {
	if m != nil {
		return m.BeatAvg
	}
	return 0
}

func (m *LiveFlow) GetWinRate() uint32 {
	if m != nil {
		return m.WinRate
	}
	return 0
}

func (m *LiveFlow) GetTopWinRate() uint32 {
	if m != nil {
		return m.TopWinRate
	}
	return 0
}

func (m *LiveFlow) GetCriticalRate() uint32 {
	if m != nil {
		return m.CriticalRate
	}
	return 0
}

func (m *LiveFlow) GetBestScore() float32 {
	if m != nil {
		return m.BestScore
	}
	return 0
}

func (m *LiveFlow) GetBestRank() uint32 {
	if m != nil {
		return m.BestRank
	}
	return 0
}

func (m *LiveFlow) GetHurtAvg() uint32 {
	if m != nil {
		return m.HurtAvg
	}
	return 0
}

func (m *LiveFlow) GetTimeAvg() int64 {
	if m != nil {
		return m.TimeAvg
	}
	return 0
}

func (m *LiveFlow) GetDistanceAvg() float32 {
	if m != nil {
		return m.DistanceAvg
	}
	return 0
}

func (m *LiveFlow) GetSingBestScore() float32 {
	if m != nil {
		return m.SingBestScore
	}
	return 0
}

func (m *LiveFlow) GetSingBestRank() uint32 {
	if m != nil {
		return m.SingBestRank
	}
	return 0
}

func (m *LiveFlow) GetDuoBestScore() float32 {
	if m != nil {
		return m.DuoBestScore
	}
	return 0
}

func (m *LiveFlow) GetDuoBestRank() uint32 {
	if m != nil {
		return m.DuoBestRank
	}
	return 0
}

func (m *LiveFlow) GetSquadBestScore() float32 {
	if m != nil {
		return m.SquadBestScore
	}
	return 0
}

func (m *LiveFlow) GetSquadRank() uint32 {
	if m != nil {
		return m.SquadRank
	}
	return 0
}

// GunFlow 枪支伤害信息表
type GunFlow struct {
	GameSvrID        string  `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string  `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string  `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32  `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32  `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string  `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string  `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32  `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32  `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32  `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string  `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string  `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string  `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string  `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32  `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	Mode             uint64  `protobuf:"varint,16,opt,name=Mode" json:"Mode"`
	TeamType         uint32  `protobuf:"varint,17,opt,name=TeamType" json:"TeamType"`
	TeamID           uint64  `protobuf:"varint,18,opt,name=TeamID" json:"TeamID"`
	BattleID         uint64  `protobuf:"varint,19,opt,name=BattleID" json:"BattleID"`
	MapIDX           float32 `protobuf:"fixed32,20,opt,name=MapIDX" json:"MapIDX"`
	MapIDY           float32 `protobuf:"fixed32,21,opt,name=MapIDY" json:"MapIDY"`
	MapIDZ           float32 `protobuf:"fixed32,22,opt,name=MapIDZ" json:"MapIDZ"`
	GunID            uint64  `protobuf:"varint,23,opt,name=GunID" json:"GunID"`
	SightID          uint32  `protobuf:"varint,24,opt,name=SightID" json:"SightID"`
	SilenceID        uint32  `protobuf:"varint,25,opt,name=SilenceID" json:"SilenceID"`
	MagazineID       uint32  `protobuf:"varint,26,opt,name=MagazineID" json:"MagazineID"`
	Distance         float32 `protobuf:"fixed32,27,opt,name=Distance" json:"Distance"`
	Dps              uint32  `protobuf:"varint,28,opt,name=Dps" json:"Dps"`
	Kill             uint32  `protobuf:"varint,29,opt,name=Kill" json:"Kill"`
	HeadKill         uint32  `protobuf:"varint,30,opt,name=HeadKill" json:"HeadKill"`
	StockID          uint32  `protobuf:"varint,31,opt,name=StockID" json:"StockID"`
	HandleID         uint32  `protobuf:"varint,32,opt,name=HandleID" json:"HandleID"`
	MatchMode        uint32  `protobuf:"varint,33,opt,name=MatchMode" json:"MatchMode"`
}

func (m *GunFlow) Reset()                    { *m = GunFlow{} }
func (m *GunFlow) String() string            { return proto.CompactTextString(m) }
func (*GunFlow) ProtoMessage()               {}
func (*GunFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{84} }

func (m *GunFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *GunFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *GunFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *GunFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *GunFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *GunFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *GunFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *GunFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *GunFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GunFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *GunFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *GunFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *GunFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *GunFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *GunFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *GunFlow) GetMode() uint64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *GunFlow) GetTeamType() uint32 {
	if m != nil {
		return m.TeamType
	}
	return 0
}

func (m *GunFlow) GetTeamID() uint64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *GunFlow) GetBattleID() uint64 {
	if m != nil {
		return m.BattleID
	}
	return 0
}

func (m *GunFlow) GetMapIDX() float32 {
	if m != nil {
		return m.MapIDX
	}
	return 0
}

func (m *GunFlow) GetMapIDY() float32 {
	if m != nil {
		return m.MapIDY
	}
	return 0
}

func (m *GunFlow) GetMapIDZ() float32 {
	if m != nil {
		return m.MapIDZ
	}
	return 0
}

func (m *GunFlow) GetGunID() uint64 {
	if m != nil {
		return m.GunID
	}
	return 0
}

func (m *GunFlow) GetSightID() uint32 {
	if m != nil {
		return m.SightID
	}
	return 0
}

func (m *GunFlow) GetSilenceID() uint32 {
	if m != nil {
		return m.SilenceID
	}
	return 0
}

func (m *GunFlow) GetMagazineID() uint32 {
	if m != nil {
		return m.MagazineID
	}
	return 0
}

func (m *GunFlow) GetDistance() float32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *GunFlow) GetDps() uint32 {
	if m != nil {
		return m.Dps
	}
	return 0
}

func (m *GunFlow) GetKill() uint32 {
	if m != nil {
		return m.Kill
	}
	return 0
}

func (m *GunFlow) GetHeadKill() uint32 {
	if m != nil {
		return m.HeadKill
	}
	return 0
}

func (m *GunFlow) GetStockID() uint32 {
	if m != nil {
		return m.StockID
	}
	return 0
}

func (m *GunFlow) GetHandleID() uint32 {
	if m != nil {
		return m.HandleID
	}
	return 0
}

func (m *GunFlow) GetMatchMode() uint32 {
	if m != nil {
		return m.MatchMode
	}
	return 0
}

// CampFlow 训练营表
type CampFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	StageID          uint32 `protobuf:"varint,16,opt,name=StageID" json:"StageID"`
	TaskID           uint32 `protobuf:"varint,17,opt,name=TaskID" json:"TaskID"`
}

func (m *CampFlow) Reset()                    { *m = CampFlow{} }
func (m *CampFlow) String() string            { return proto.CompactTextString(m) }
func (*CampFlow) ProtoMessage()               {}
func (*CampFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{85} }

func (m *CampFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *CampFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *CampFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *CampFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *CampFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *CampFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *CampFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *CampFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *CampFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CampFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *CampFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *CampFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *CampFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *CampFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *CampFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *CampFlow) GetStageID() uint32 {
	if m != nil {
		return m.StageID
	}
	return 0
}

func (m *CampFlow) GetTaskID() uint32 {
	if m != nil {
		return m.TaskID
	}
	return 0
}

// ShopFlow 商店流水表
type ShopFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	ShopType         uint32 `protobuf:"varint,16,opt,name=ShopType" json:"ShopType"`
	ItemType         uint32 `protobuf:"varint,17,opt,name=ItemType" json:"ItemType"`
	ItemID           uint32 `protobuf:"varint,18,opt,name=ItemID" json:"ItemID"`
	Count            uint32 `protobuf:"varint,19,opt,name=Count" json:"Count"`
	ImoneyType       uint32 `protobuf:"varint,20,opt,name=ImoneyType" json:"ImoneyType"`
	Consume          uint32 `protobuf:"varint,21,opt,name=Consume" json:"Consume"`
}

func (m *ShopFlow) Reset()                    { *m = ShopFlow{} }
func (m *ShopFlow) String() string            { return proto.CompactTextString(m) }
func (*ShopFlow) ProtoMessage()               {}
func (*ShopFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{86} }

func (m *ShopFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *ShopFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *ShopFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *ShopFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *ShopFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *ShopFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *ShopFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *ShopFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *ShopFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ShopFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *ShopFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ShopFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *ShopFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *ShopFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *ShopFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *ShopFlow) GetShopType() uint32 {
	if m != nil {
		return m.ShopType
	}
	return 0
}

func (m *ShopFlow) GetItemType() uint32 {
	if m != nil {
		return m.ItemType
	}
	return 0
}

func (m *ShopFlow) GetItemID() uint32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

func (m *ShopFlow) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ShopFlow) GetImoneyType() uint32 {
	if m != nil {
		return m.ImoneyType
	}
	return 0
}

func (m *ShopFlow) GetConsume() uint32 {
	if m != nil {
		return m.Consume
	}
	return 0
}

// OperFlow 操作模式表
type OperFlow struct {
	GameSvrID        string  `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string  `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string  `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32  `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32  `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string  `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string  `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32  `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32  `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32  `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string  `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string  `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string  `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string  `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32  `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	OperScene        uint32  `protobuf:"varint,16,opt,name=OperScene" json:"OperScene"`
	OperType         uint32  `protobuf:"varint,17,opt,name=OperType" json:"OperType"`
	FireMode         uint32  `protobuf:"varint,18,opt,name=FireMode" json:"FireMode"`
	PickMode         uint32  `protobuf:"varint,19,opt,name=PickMode" json:"PickMode"`
	Quick            float32 `protobuf:"fixed32,20,opt,name=Quick" json:"Quick"`
	Touch            float32 `protobuf:"fixed32,21,opt,name=Touch" json:"Touch"`
	FireFollow       uint32  `protobuf:"varint,22,opt,name=FireFollow" json:"FireFollow"`
	NearbyFre        uint32  `protobuf:"varint,23,opt,name=NearbyFre" json:"NearbyFre"`
	HitBack          uint32  `protobuf:"varint,24,opt,name=HitBack" json:"HitBack"`
	Quality          uint32  `protobuf:"varint,25,opt,name=Quality" json:"Quality"`
	WatchAble        uint32  `protobuf:"varint,26,opt,name=WatchAble" json:"WatchAble"`
}

func (m *OperFlow) Reset()                    { *m = OperFlow{} }
func (m *OperFlow) String() string            { return proto.CompactTextString(m) }
func (*OperFlow) ProtoMessage()               {}
func (*OperFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{87} }

func (m *OperFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *OperFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *OperFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *OperFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *OperFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *OperFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *OperFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *OperFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *OperFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *OperFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *OperFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *OperFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *OperFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *OperFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *OperFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *OperFlow) GetOperScene() uint32 {
	if m != nil {
		return m.OperScene
	}
	return 0
}

func (m *OperFlow) GetOperType() uint32 {
	if m != nil {
		return m.OperType
	}
	return 0
}

func (m *OperFlow) GetFireMode() uint32 {
	if m != nil {
		return m.FireMode
	}
	return 0
}

func (m *OperFlow) GetPickMode() uint32 {
	if m != nil {
		return m.PickMode
	}
	return 0
}

func (m *OperFlow) GetQuick() float32 {
	if m != nil {
		return m.Quick
	}
	return 0
}

func (m *OperFlow) GetTouch() float32 {
	if m != nil {
		return m.Touch
	}
	return 0
}

func (m *OperFlow) GetFireFollow() uint32 {
	if m != nil {
		return m.FireFollow
	}
	return 0
}

func (m *OperFlow) GetNearbyFre() uint32 {
	if m != nil {
		return m.NearbyFre
	}
	return 0
}

func (m *OperFlow) GetHitBack() uint32 {
	if m != nil {
		return m.HitBack
	}
	return 0
}

func (m *OperFlow) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *OperFlow) GetWatchAble() uint32 {
	if m != nil {
		return m.WatchAble
	}
	return 0
}

// MoneyFlow 货币流水表
type MoneyFlow struct {
	GameSvrID   string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID  string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID      uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID     string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	Level       uint32 `protobuf:"varint,7,opt,name=Level" json:"Level"`
	IMoney      uint32 `protobuf:"varint,8,opt,name=iMoney" json:"iMoney"`
	Reason      uint32 `protobuf:"varint,9,opt,name=Reason" json:"Reason"`
	AddOrReduce uint32 `protobuf:"varint,10,opt,name=AddOrReduce" json:"AddOrReduce"`
	IMoneyType  uint32 `protobuf:"varint,11,opt,name=iMoneyType" json:"iMoneyType"`
	IMoneyCount uint64 `protobuf:"varint,12,opt,name=iMoneyCount" json:"iMoneyCount"`
	MatchMode   uint32 `protobuf:"varint,13,opt,name=MatchMode" json:"MatchMode"`
}

func (m *MoneyFlow) Reset()                    { *m = MoneyFlow{} }
func (m *MoneyFlow) String() string            { return proto.CompactTextString(m) }
func (*MoneyFlow) ProtoMessage()               {}
func (*MoneyFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{88} }

func (m *MoneyFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *MoneyFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *MoneyFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *MoneyFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *MoneyFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *MoneyFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *MoneyFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MoneyFlow) GetIMoney() uint32 {
	if m != nil {
		return m.IMoney
	}
	return 0
}

func (m *MoneyFlow) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

func (m *MoneyFlow) GetAddOrReduce() uint32 {
	if m != nil {
		return m.AddOrReduce
	}
	return 0
}

func (m *MoneyFlow) GetIMoneyType() uint32 {
	if m != nil {
		return m.IMoneyType
	}
	return 0
}

func (m *MoneyFlow) GetIMoneyCount() uint64 {
	if m != nil {
		return m.IMoneyCount
	}
	return 0
}

func (m *MoneyFlow) GetMatchMode() uint32 {
	if m != nil {
		return m.MatchMode
	}
	return 0
}

// SnsFlow 社交系统流水表
type SnsFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	ActorOpenID      string `protobuf:"bytes,6,opt,name=ActorOpenID" json:"ActorOpenID"`
	Count            uint32 `protobuf:"varint,7,opt,name=Count" json:"Count"`
	SnsType          uint32 `protobuf:"varint,8,opt,name=SnsType" json:"SnsType"`
	AcceptOpenID     string `protobuf:"bytes,9,opt,name=AcceptOpenID" json:"AcceptOpenID"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
}

func (m *SnsFlow) Reset()                    { *m = SnsFlow{} }
func (m *SnsFlow) String() string            { return proto.CompactTextString(m) }
func (*SnsFlow) ProtoMessage()               {}
func (*SnsFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{89} }

func (m *SnsFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *SnsFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *SnsFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *SnsFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *SnsFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *SnsFlow) GetActorOpenID() string {
	if m != nil {
		return m.ActorOpenID
	}
	return ""
}

func (m *SnsFlow) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SnsFlow) GetSnsType() uint32 {
	if m != nil {
		return m.SnsType
	}
	return 0
}

func (m *SnsFlow) GetAcceptOpenID() string {
	if m != nil {
		return m.AcceptOpenID
	}
	return ""
}

func (m *SnsFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

// SecGameStartFlow (安全tlog)游戏开始流水表
type SecGameStartFlow struct {
	GameSvrId       string  `protobuf:"bytes,1,opt,name=GameSvrId" json:"GameSvrId"`
	DtEventTime     string  `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	GameAppID       string  `protobuf:"bytes,3,opt,name=GameAppID" json:"GameAppID"`
	OpenID          string  `protobuf:"bytes,4,opt,name=OpenID" json:"OpenID"`
	PlatID          uint32  `protobuf:"varint,5,opt,name=PlatID" json:"PlatID"`
	AreaID          uint32  `protobuf:"varint,6,opt,name=AreaID" json:"AreaID"`
	ZoneID          uint32  `protobuf:"varint,7,opt,name=ZoneID" json:"ZoneID"`
	BattleID        uint64  `protobuf:"varint,8,opt,name=BattleID" json:"BattleID"`
	ClientStartTime string  `protobuf:"bytes,9,opt,name=ClientStartTime" json:"ClientStartTime"`
	UserName        string  `protobuf:"bytes,10,opt,name=UserName" json:"UserName"`
	PicUrl          string  `protobuf:"bytes,11,opt,name=PicUrl" json:"PicUrl"`
	SvrUserMoney1   uint64  `protobuf:"varint,12,opt,name=SvrUserMoney1" json:"SvrUserMoney1"`
	SvrUserMoney2   uint64  `protobuf:"varint,13,opt,name=SvrUserMoney2" json:"SvrUserMoney2"`
	SvrUserMoney3   uint64  `protobuf:"varint,14,opt,name=SvrUserMoney3" json:"SvrUserMoney3"`
	SvrRoundRank    float32 `protobuf:"fixed32,15,opt,name=SvrRoundRank" json:"SvrRoundRank"`
	SvrRoundRank1   float32 `protobuf:"fixed32,16,opt,name=SvrRoundRank1" json:"SvrRoundRank1"`
	SvrRoundRank2   float32 `protobuf:"fixed32,17,opt,name=SvrRoundRank2" json:"SvrRoundRank2"`
	SvrRoundRank3   float32 `protobuf:"fixed32,18,opt,name=SvrRoundRank3" json:"SvrRoundRank3"`
	SvrRoleID       uint64  `protobuf:"varint,19,opt,name=SvrRoleID" json:"SvrRoleID"`
	SvrRoleType     uint32  `protobuf:"varint,20,opt,name=SvrRoleType" json:"SvrRoleType"`
	SvrMapid        uint32  `protobuf:"varint,21,opt,name=SvrMapid" json:"SvrMapid"`
	SvrWeatherid    uint32  `protobuf:"varint,22,opt,name=SvrWeatherid" json:"SvrWeatherid"`
	SvrItemList     string  `protobuf:"bytes,23,opt,name=SvrItemList" json:"SvrItemList"`
	WaitStartTime   string  `protobuf:"bytes,24,opt,name=WaitStartTime" json:"WaitStartTime"`
	WaitEndTime     string  `protobuf:"bytes,25,opt,name=WaitEndTime" json:"WaitEndTime"`
	RoleType        uint32  `protobuf:"varint,26,opt,name=RoleType" json:"RoleType"`
	Mapid           uint32  `protobuf:"varint,27,opt,name=Mapid" json:"Mapid"`
	Weatherid       uint32  `protobuf:"varint,28,opt,name=Weatherid" json:"Weatherid"`
	ItemList        string  `protobuf:"bytes,29,opt,name=ItemList" json:"ItemList"`
	GameType        uint32  `protobuf:"varint,30,opt,name=GameType" json:"GameType"`
	TeamType        uint32  `protobuf:"varint,31,opt,name=TeamType" json:"TeamType"`
	AutoMatch       uint32  `protobuf:"varint,32,opt,name=AutoMatch" json:"AutoMatch"`
	PlayerCount     uint32  `protobuf:"varint,33,opt,name=PlayerCount" json:"PlayerCount"`
	TeamID          uint64  `protobuf:"varint,34,opt,name=TeamID" json:"TeamID"`
	TeamPlayer1     string  `protobuf:"bytes,35,opt,name=TeamPlayer1" json:"TeamPlayer1"`
	TeamPlayer2     string  `protobuf:"bytes,36,opt,name=TeamPlayer2" json:"TeamPlayer2"`
	TeamPlayer3     string  `protobuf:"bytes,37,opt,name=TeamPlayer3" json:"TeamPlayer3"`
	TeamPlayer1Rank float32 `protobuf:"fixed32,38,opt,name=TeamPlayer1Rank" json:"TeamPlayer1Rank"`
	TeamPlayer2Rank float32 `protobuf:"fixed32,39,opt,name=TeamPlayer2Rank" json:"TeamPlayer2Rank"`
	TeamPlayer3Rank float32 `protobuf:"fixed32,40,opt,name=TeamPlayer3Rank" json:"TeamPlayer3Rank"`
}

func (m *SecGameStartFlow) Reset()                    { *m = SecGameStartFlow{} }
func (m *SecGameStartFlow) String() string            { return proto.CompactTextString(m) }
func (*SecGameStartFlow) ProtoMessage()               {}
func (*SecGameStartFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{90} }

func (m *SecGameStartFlow) GetGameSvrId() string {
	if m != nil {
		return m.GameSvrId
	}
	return ""
}

func (m *SecGameStartFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *SecGameStartFlow) GetGameAppID() string {
	if m != nil {
		return m.GameAppID
	}
	return ""
}

func (m *SecGameStartFlow) GetOpenID() string {
	if m != nil {
		return m.OpenID
	}
	return ""
}

func (m *SecGameStartFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *SecGameStartFlow) GetAreaID() uint32 {
	if m != nil {
		return m.AreaID
	}
	return 0
}

func (m *SecGameStartFlow) GetZoneID() uint32 {
	if m != nil {
		return m.ZoneID
	}
	return 0
}

func (m *SecGameStartFlow) GetBattleID() uint64 {
	if m != nil {
		return m.BattleID
	}
	return 0
}

func (m *SecGameStartFlow) GetClientStartTime() string {
	if m != nil {
		return m.ClientStartTime
	}
	return ""
}

func (m *SecGameStartFlow) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *SecGameStartFlow) GetPicUrl() string {
	if m != nil {
		return m.PicUrl
	}
	return ""
}

func (m *SecGameStartFlow) GetSvrUserMoney1() uint64 {
	if m != nil {
		return m.SvrUserMoney1
	}
	return 0
}

func (m *SecGameStartFlow) GetSvrUserMoney2() uint64 {
	if m != nil {
		return m.SvrUserMoney2
	}
	return 0
}

func (m *SecGameStartFlow) GetSvrUserMoney3() uint64 {
	if m != nil {
		return m.SvrUserMoney3
	}
	return 0
}

func (m *SecGameStartFlow) GetSvrRoundRank() float32 {
	if m != nil {
		return m.SvrRoundRank
	}
	return 0
}

func (m *SecGameStartFlow) GetSvrRoundRank1() float32 {
	if m != nil {
		return m.SvrRoundRank1
	}
	return 0
}

func (m *SecGameStartFlow) GetSvrRoundRank2() float32 {
	if m != nil {
		return m.SvrRoundRank2
	}
	return 0
}

func (m *SecGameStartFlow) GetSvrRoundRank3() float32 {
	if m != nil {
		return m.SvrRoundRank3
	}
	return 0
}

func (m *SecGameStartFlow) GetSvrRoleID() uint64 {
	if m != nil {
		return m.SvrRoleID
	}
	return 0
}

func (m *SecGameStartFlow) GetSvrRoleType() uint32 {
	if m != nil {
		return m.SvrRoleType
	}
	return 0
}

func (m *SecGameStartFlow) GetSvrMapid() uint32 {
	if m != nil {
		return m.SvrMapid
	}
	return 0
}

func (m *SecGameStartFlow) GetSvrWeatherid() uint32 {
	if m != nil {
		return m.SvrWeatherid
	}
	return 0
}

func (m *SecGameStartFlow) GetSvrItemList() string {
	if m != nil {
		return m.SvrItemList
	}
	return ""
}

func (m *SecGameStartFlow) GetWaitStartTime() string {
	if m != nil {
		return m.WaitStartTime
	}
	return ""
}

func (m *SecGameStartFlow) GetWaitEndTime() string {
	if m != nil {
		return m.WaitEndTime
	}
	return ""
}

func (m *SecGameStartFlow) GetRoleType() uint32 {
	if m != nil {
		return m.RoleType
	}
	return 0
}

func (m *SecGameStartFlow) GetMapid() uint32 {
	if m != nil {
		return m.Mapid
	}
	return 0
}

func (m *SecGameStartFlow) GetWeatherid() uint32 {
	if m != nil {
		return m.Weatherid
	}
	return 0
}

func (m *SecGameStartFlow) GetItemList() string {
	if m != nil {
		return m.ItemList
	}
	return ""
}

func (m *SecGameStartFlow) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *SecGameStartFlow) GetTeamType() uint32 {
	if m != nil {
		return m.TeamType
	}
	return 0
}

func (m *SecGameStartFlow) GetAutoMatch() uint32 {
	if m != nil {
		return m.AutoMatch
	}
	return 0
}

func (m *SecGameStartFlow) GetPlayerCount() uint32 {
	if m != nil {
		return m.PlayerCount
	}
	return 0
}

func (m *SecGameStartFlow) GetTeamID() uint64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *SecGameStartFlow) GetTeamPlayer1() string {
	if m != nil {
		return m.TeamPlayer1
	}
	return ""
}

func (m *SecGameStartFlow) GetTeamPlayer2() string {
	if m != nil {
		return m.TeamPlayer2
	}
	return ""
}

func (m *SecGameStartFlow) GetTeamPlayer3() string {
	if m != nil {
		return m.TeamPlayer3
	}
	return ""
}

func (m *SecGameStartFlow) GetTeamPlayer1Rank() float32 {
	if m != nil {
		return m.TeamPlayer1Rank
	}
	return 0
}

func (m *SecGameStartFlow) GetTeamPlayer2Rank() float32 {
	if m != nil {
		return m.TeamPlayer2Rank
	}
	return 0
}

func (m *SecGameStartFlow) GetTeamPlayer3Rank() float32 {
	if m != nil {
		return m.TeamPlayer3Rank
	}
	return 0
}

// SecGameEndFlow (安全tlog)结算日志
type SecGameEndFlow struct {
	GameSvrId            string  `protobuf:"bytes,1,opt,name=GameSvrId" json:"GameSvrId"`
	DtEventTime          string  `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	GameAppID            string  `protobuf:"bytes,3,opt,name=GameAppID" json:"GameAppID"`
	OpenID               string  `protobuf:"bytes,4,opt,name=OpenID" json:"OpenID"`
	PlatID               uint32  `protobuf:"varint,5,opt,name=PlatID" json:"PlatID"`
	AreaID               uint32  `protobuf:"varint,6,opt,name=AreaID" json:"AreaID"`
	ZoneID               uint32  `protobuf:"varint,7,opt,name=ZoneID" json:"ZoneID"`
	BattleID             uint64  `protobuf:"varint,8,opt,name=BattleID" json:"BattleID"`
	ClientStartTime      string  `protobuf:"bytes,9,opt,name=ClientStartTime" json:"ClientStartTime"`
	UserName             string  `protobuf:"bytes,10,opt,name=UserName" json:"UserName"`
	RoleID               uint64  `protobuf:"varint,11,opt,name=RoleID" json:"RoleID"`
	RoleType             uint32  `protobuf:"varint,12,opt,name=RoleType" json:"RoleType"`
	OverTime             int64   `protobuf:"varint,13,opt,name=OverTime" json:"OverTime"`
	EndType              uint32  `protobuf:"varint,14,opt,name=EndType" json:"EndType"`
	KillCount            uint32  `protobuf:"varint,15,opt,name=KillCount" json:"KillCount"`
	AssistsCount         uint32  `protobuf:"varint,16,opt,name=AssistsCount" json:"AssistsCount"`
	DropCount            uint32  `protobuf:"varint,17,opt,name=DropCount" json:"DropCount"`
	SaveCount            uint32  `protobuf:"varint,18,opt,name=SaveCount" json:"SaveCount"`
	RebornCount          uint32  `protobuf:"varint,19,opt,name=RebornCount" json:"RebornCount"`
	AliveType            uint32  `protobuf:"varint,20,opt,name=AliveType" json:"AliveType"`
	GoldGet              uint32  `protobuf:"varint,21,opt,name=GoldGet" json:"GoldGet"`
	DiamondGet           uint32  `protobuf:"varint,22,opt,name=DiamondGet" json:"DiamondGet"`
	ExpGet               uint32  `protobuf:"varint,23,opt,name=ExpGet" json:"ExpGet"`
	WinRank              uint32  `protobuf:"varint,24,opt,name=WinRank" json:"WinRank"`
	TotalPlayers         uint32  `protobuf:"varint,25,opt,name=TotalPlayers" json:"TotalPlayers"`
	RankEnd              float32 `protobuf:"fixed32,26,opt,name=RankEnd" json:"RankEnd"`
	TeamID               uint64  `protobuf:"varint,27,opt,name=TeamID" json:"TeamID"`
	TeamPlayer1          string  `protobuf:"bytes,28,opt,name=TeamPlayer1" json:"TeamPlayer1"`
	TeamPlayer2          string  `protobuf:"bytes,29,opt,name=TeamPlayer2" json:"TeamPlayer2"`
	TeamPlayer3          string  `protobuf:"bytes,30,opt,name=TeamPlayer3" json:"TeamPlayer3"`
	TeamPlayer1AliveType uint32  `protobuf:"varint,31,opt,name=TeamPlayer1AliveType" json:"TeamPlayer1AliveType"`
	TeamPlayer2AliveType uint32  `protobuf:"varint,32,opt,name=TeamPlayer2AliveType" json:"TeamPlayer2AliveType"`
	TeamPlayer3AliveType uint32  `protobuf:"varint,33,opt,name=TeamPlayer3AliveType" json:"TeamPlayer3AliveType"`
	TeamPlayer1Kill      uint32  `protobuf:"varint,34,opt,name=TeamPlayer1Kill" json:"TeamPlayer1Kill"`
	TeamPlayer2Kill      uint32  `protobuf:"varint,35,opt,name=TeamPlayer2Kill" json:"TeamPlayer2Kill"`
	TeamPlayer3Kill      uint32  `protobuf:"varint,36,opt,name=TeamPlayer3Kill" json:"TeamPlayer3Kill"`
}

func (m *SecGameEndFlow) Reset()                    { *m = SecGameEndFlow{} }
func (m *SecGameEndFlow) String() string            { return proto.CompactTextString(m) }
func (*SecGameEndFlow) ProtoMessage()               {}
func (*SecGameEndFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{91} }

func (m *SecGameEndFlow) GetGameSvrId() string {
	if m != nil {
		return m.GameSvrId
	}
	return ""
}

func (m *SecGameEndFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *SecGameEndFlow) GetGameAppID() string {
	if m != nil {
		return m.GameAppID
	}
	return ""
}

func (m *SecGameEndFlow) GetOpenID() string {
	if m != nil {
		return m.OpenID
	}
	return ""
}

func (m *SecGameEndFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *SecGameEndFlow) GetAreaID() uint32 {
	if m != nil {
		return m.AreaID
	}
	return 0
}

func (m *SecGameEndFlow) GetZoneID() uint32 {
	if m != nil {
		return m.ZoneID
	}
	return 0
}

func (m *SecGameEndFlow) GetBattleID() uint64 {
	if m != nil {
		return m.BattleID
	}
	return 0
}

func (m *SecGameEndFlow) GetClientStartTime() string {
	if m != nil {
		return m.ClientStartTime
	}
	return ""
}

func (m *SecGameEndFlow) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *SecGameEndFlow) GetRoleID() uint64 {
	if m != nil {
		return m.RoleID
	}
	return 0
}

func (m *SecGameEndFlow) GetRoleType() uint32 {
	if m != nil {
		return m.RoleType
	}
	return 0
}

func (m *SecGameEndFlow) GetOverTime() int64 {
	if m != nil {
		return m.OverTime
	}
	return 0
}

func (m *SecGameEndFlow) GetEndType() uint32 {
	if m != nil {
		return m.EndType
	}
	return 0
}

func (m *SecGameEndFlow) GetKillCount() uint32 {
	if m != nil {
		return m.KillCount
	}
	return 0
}

func (m *SecGameEndFlow) GetAssistsCount() uint32 {
	if m != nil {
		return m.AssistsCount
	}
	return 0
}

func (m *SecGameEndFlow) GetDropCount() uint32 {
	if m != nil {
		return m.DropCount
	}
	return 0
}

func (m *SecGameEndFlow) GetSaveCount() uint32 {
	if m != nil {
		return m.SaveCount
	}
	return 0
}

func (m *SecGameEndFlow) GetRebornCount() uint32 {
	if m != nil {
		return m.RebornCount
	}
	return 0
}

func (m *SecGameEndFlow) GetAliveType() uint32 {
	if m != nil {
		return m.AliveType
	}
	return 0
}

func (m *SecGameEndFlow) GetGoldGet() uint32 {
	if m != nil {
		return m.GoldGet
	}
	return 0
}

func (m *SecGameEndFlow) GetDiamondGet() uint32 {
	if m != nil {
		return m.DiamondGet
	}
	return 0
}

func (m *SecGameEndFlow) GetExpGet() uint32 {
	if m != nil {
		return m.ExpGet
	}
	return 0
}

func (m *SecGameEndFlow) GetWinRank() uint32 {
	if m != nil {
		return m.WinRank
	}
	return 0
}

func (m *SecGameEndFlow) GetTotalPlayers() uint32 {
	if m != nil {
		return m.TotalPlayers
	}
	return 0
}

func (m *SecGameEndFlow) GetRankEnd() float32 {
	if m != nil {
		return m.RankEnd
	}
	return 0
}

func (m *SecGameEndFlow) GetTeamID() uint64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *SecGameEndFlow) GetTeamPlayer1() string {
	if m != nil {
		return m.TeamPlayer1
	}
	return ""
}

func (m *SecGameEndFlow) GetTeamPlayer2() string {
	if m != nil {
		return m.TeamPlayer2
	}
	return ""
}

func (m *SecGameEndFlow) GetTeamPlayer3() string {
	if m != nil {
		return m.TeamPlayer3
	}
	return ""
}

func (m *SecGameEndFlow) GetTeamPlayer1AliveType() uint32 {
	if m != nil {
		return m.TeamPlayer1AliveType
	}
	return 0
}

func (m *SecGameEndFlow) GetTeamPlayer2AliveType() uint32 {
	if m != nil {
		return m.TeamPlayer2AliveType
	}
	return 0
}

func (m *SecGameEndFlow) GetTeamPlayer3AliveType() uint32 {
	if m != nil {
		return m.TeamPlayer3AliveType
	}
	return 0
}

func (m *SecGameEndFlow) GetTeamPlayer1Kill() uint32 {
	if m != nil {
		return m.TeamPlayer1Kill
	}
	return 0
}

func (m *SecGameEndFlow) GetTeamPlayer2Kill() uint32 {
	if m != nil {
		return m.TeamPlayer2Kill
	}
	return 0
}

func (m *SecGameEndFlow) GetTeamPlayer3Kill() uint32 {
	if m != nil {
		return m.TeamPlayer3Kill
	}
	return 0
}

// 腾讯RMB分享
type ShareRMBMoney struct {
	OpenID      string `protobuf:"bytes,1,opt,name=OpenID" json:"OpenID"`
	Channel     uint32 `protobuf:"varint,2,opt,name=Channel" json:"Channel"`
	AccessToken string `protobuf:"bytes,3,opt,name=AccessToken" json:"AccessToken"`
	ActID       uint32 `protobuf:"varint,4,opt,name=ActID" json:"ActID"`
	Ret         int32  `protobuf:"varint,5,opt,name=Ret" json:"Ret"`
	Msg         string `protobuf:"bytes,6,opt,name=Msg" json:"Msg"`
	BoxID       string `protobuf:"bytes,7,opt,name=BoxID" json:"BoxID"`
	Url         string `protobuf:"bytes,8,opt,name=Url" json:"Url"`
}

func (m *ShareRMBMoney) Reset()                    { *m = ShareRMBMoney{} }
func (m *ShareRMBMoney) String() string            { return proto.CompactTextString(m) }
func (*ShareRMBMoney) ProtoMessage()               {}
func (*ShareRMBMoney) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{92} }

func (m *ShareRMBMoney) GetOpenID() string {
	if m != nil {
		return m.OpenID
	}
	return ""
}

func (m *ShareRMBMoney) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *ShareRMBMoney) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *ShareRMBMoney) GetActID() uint32 {
	if m != nil {
		return m.ActID
	}
	return 0
}

func (m *ShareRMBMoney) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *ShareRMBMoney) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ShareRMBMoney) GetBoxID() string {
	if m != nil {
		return m.BoxID
	}
	return ""
}

func (m *ShareRMBMoney) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type OwnGoodsItem struct {
	Id         uint32 `protobuf:"varint,1,opt,name=id" json:"id"`
	State      uint32 `protobuf:"varint,2,opt,name=state" json:"state"`
	Used       uint32 `protobuf:"varint,3,opt,name=used" json:"used"`
	Sum        uint32 `protobuf:"varint,4,opt,name=sum" json:"sum"`
	Preference uint32 `protobuf:"varint,5,opt,name=preference" json:"preference"`
	EndTime    int64  `protobuf:"varint,6,opt,name=endTime" json:"endTime"`
}

func (m *OwnGoodsItem) Reset()                    { *m = OwnGoodsItem{} }
func (m *OwnGoodsItem) String() string            { return proto.CompactTextString(m) }
func (*OwnGoodsItem) ProtoMessage()               {}
func (*OwnGoodsItem) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{93} }

func (m *OwnGoodsItem) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OwnGoodsItem) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *OwnGoodsItem) GetUsed() uint32 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *OwnGoodsItem) GetSum() uint32 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *OwnGoodsItem) GetPreference() uint32 {
	if m != nil {
		return m.Preference
	}
	return 0
}

func (m *OwnGoodsItem) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type OwnGoodsInfo struct {
	List []*OwnGoodsItem `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *OwnGoodsInfo) Reset()                    { *m = OwnGoodsInfo{} }
func (m *OwnGoodsInfo) String() string            { return proto.CompactTextString(m) }
func (*OwnGoodsInfo) ProtoMessage()               {}
func (*OwnGoodsInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{94} }

func (m *OwnGoodsInfo) GetList() []*OwnGoodsItem {
	if m != nil {
		return m.List
	}
	return nil
}

type MemVoiceInfo struct {
	MemberId int32  `protobuf:"varint,1,opt,name=MemberId" json:"MemberId"`
	Uid      uint64 `protobuf:"varint,2,opt,name=Uid" json:"Uid"`
}

func (m *MemVoiceInfo) Reset()                    { *m = MemVoiceInfo{} }
func (m *MemVoiceInfo) String() string            { return proto.CompactTextString(m) }
func (*MemVoiceInfo) ProtoMessage()               {}
func (*MemVoiceInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{95} }

func (m *MemVoiceInfo) GetMemberId() int32 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *MemVoiceInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type TeamVoiceInfo struct {
	MemberInfos []*MemVoiceInfo `protobuf:"bytes,1,rep,name=MemberInfos" json:"MemberInfos,omitempty"`
}

func (m *TeamVoiceInfo) Reset()                    { *m = TeamVoiceInfo{} }
func (m *TeamVoiceInfo) String() string            { return proto.CompactTextString(m) }
func (*TeamVoiceInfo) ProtoMessage()               {}
func (*TeamVoiceInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{96} }

func (m *TeamVoiceInfo) GetMemberInfos() []*MemVoiceInfo {
	if m != nil {
		return m.MemberInfos
	}
	return nil
}

// MemberSettleInfo 队伍个人信息
type SettleMemInfo struct {
	Uid         uint64  `protobuf:"varint,1,opt,name=uid" json:"uid"`
	Name_       string  `protobuf:"bytes,2,opt,name=name" json:"name"`
	Url         string  `protobuf:"bytes,3,opt,name=url" json:"url"`
	Killnum     uint32  `protobuf:"varint,4,opt,name=killnum" json:"killnum"`
	Headshotnum uint32  `protobuf:"varint,5,opt,name=headshotnum" json:"headshotnum"`
	Damagehp    uint32  `protobuf:"varint,6,opt,name=damagehp" json:"damagehp"`
	Distance    float32 `protobuf:"fixed32,7,opt,name=distance" json:"distance"`
	Gametime    int64   `protobuf:"varint,8,opt,name=gametime" json:"gametime"`
	Veteran     uint32  `protobuf:"varint,9,opt,name=veteran" json:"veteran"`
	NameColor   uint32  `protobuf:"varint,10,opt,name=nameColor" json:"nameColor"`
}

func (m *SettleMemInfo) Reset()                    { *m = SettleMemInfo{} }
func (m *SettleMemInfo) String() string            { return proto.CompactTextString(m) }
func (*SettleMemInfo) ProtoMessage()               {}
func (*SettleMemInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{97} }

func (m *SettleMemInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SettleMemInfo) GetName_() string {
	if m != nil {
		return m.Name_
	}
	return ""
}

func (m *SettleMemInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SettleMemInfo) GetKillnum() uint32 {
	if m != nil {
		return m.Killnum
	}
	return 0
}

func (m *SettleMemInfo) GetHeadshotnum() uint32 {
	if m != nil {
		return m.Headshotnum
	}
	return 0
}

func (m *SettleMemInfo) GetDamagehp() uint32 {
	if m != nil {
		return m.Damagehp
	}
	return 0
}

func (m *SettleMemInfo) GetDistance() float32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *SettleMemInfo) GetGametime() int64 {
	if m != nil {
		return m.Gametime
	}
	return 0
}

func (m *SettleMemInfo) GetVeteran() uint32 {
	if m != nil {
		return m.Veteran
	}
	return 0
}

func (m *SettleMemInfo) GetNameColor() uint32 {
	if m != nil {
		return m.NameColor
	}
	return 0
}

// TeamSettleInfo 玩家组队队伍信息
type SettleInfo struct {
	List []*SettleMemInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *SettleInfo) Reset()                    { *m = SettleInfo{} }
func (m *SettleInfo) String() string            { return proto.CompactTextString(m) }
func (*SettleInfo) ProtoMessage()               {}
func (*SettleInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{98} }

func (m *SettleInfo) GetList() []*SettleMemInfo {
	if m != nil {
		return m.List
	}
	return nil
}

// s-->c 更新背包道具列表
type RefreshObjectListNotify struct {
	Obj []*T_Object `protobuf:"bytes,1,rep,name=obj" json:"obj,omitempty"`
}

func (m *RefreshObjectListNotify) Reset()                    { *m = RefreshObjectListNotify{} }
func (m *RefreshObjectListNotify) String() string            { return proto.CompactTextString(m) }
func (*RefreshObjectListNotify) ProtoMessage()               {}
func (*RefreshObjectListNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{99} }

func (m *RefreshObjectListNotify) GetObj() []*T_Object {
	if m != nil {
		return m.Obj
	}
	return nil
}

type StrangerList struct {
	List []uint64 `protobuf:"varint,1,rep,name=list" json:"list,omitempty"`
}

func (m *StrangerList) Reset()                    { *m = StrangerList{} }
func (m *StrangerList) String() string            { return proto.CompactTextString(m) }
func (*StrangerList) ProtoMessage()               {}
func (*StrangerList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{100} }

func (m *StrangerList) GetList() []uint64 {
	if m != nil {
		return m.List
	}
	return nil
}

// ReConnetionFlow 断线重连流水表
type ReConnetionFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
}

func (m *ReConnetionFlow) Reset()                    { *m = ReConnetionFlow{} }
func (m *ReConnetionFlow) String() string            { return proto.CompactTextString(m) }
func (*ReConnetionFlow) ProtoMessage()               {}
func (*ReConnetionFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{101} }

func (m *ReConnetionFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *ReConnetionFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *ReConnetionFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *ReConnetionFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *ReConnetionFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *ReConnetionFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *ReConnetionFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *ReConnetionFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *ReConnetionFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ReConnetionFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *ReConnetionFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ReConnetionFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *ReConnetionFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *ReConnetionFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *ReConnetionFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

type DropBoxInfo struct {
	Thisid   uint64   `protobuf:"varint,1,opt,name=thisid" json:"thisid"`
	Fakebox  uint32   `protobuf:"varint,2,opt,name=fakebox" json:"fakebox"`
	Pos      *Vector3 `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
	Havepick bool     `protobuf:"varint,4,opt,name=havepick" json:"havepick"`
}

func (m *DropBoxInfo) Reset()                    { *m = DropBoxInfo{} }
func (m *DropBoxInfo) String() string            { return proto.CompactTextString(m) }
func (*DropBoxInfo) ProtoMessage()               {}
func (*DropBoxInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{102} }

func (m *DropBoxInfo) GetThisid() uint64 {
	if m != nil {
		return m.Thisid
	}
	return 0
}

func (m *DropBoxInfo) GetFakebox() uint32 {
	if m != nil {
		return m.Fakebox
	}
	return 0
}

func (m *DropBoxInfo) GetPos() *Vector3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *DropBoxInfo) GetHavepick() bool {
	if m != nil {
		return m.Havepick
	}
	return false
}

type DropBoxList struct {
	Data []*DropBoxInfo `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *DropBoxList) Reset()                    { *m = DropBoxList{} }
func (m *DropBoxList) String() string            { return proto.CompactTextString(m) }
func (*DropBoxList) ProtoMessage()               {}
func (*DropBoxList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{103} }

func (m *DropBoxList) GetData() []*DropBoxInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

// ItemFlow 道具流水表
type ItemFlow struct {
	GameSvrID    string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime  string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID   string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID       uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID  uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID      string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	Level        uint32 `protobuf:"varint,7,opt,name=Level" json:"Level"`
	IGoodsType   uint32 `protobuf:"varint,8,opt,name=IGoodsType" json:"IGoodsType"`
	IGoodsId     uint32 `protobuf:"varint,9,opt,name=IGoodsId" json:"IGoodsId"`
	Count        uint32 `protobuf:"varint,10,opt,name=Count" json:"Count"`
	AfterCount   uint32 `protobuf:"varint,11,opt,name=AfterCount" json:"AfterCount"`
	Reason       uint32 `protobuf:"varint,12,opt,name=Reason" json:"Reason"`
	SubReason    uint32 `protobuf:"varint,13,opt,name=SubReason" json:"SubReason"`
	IMoney       uint32 `protobuf:"varint,14,opt,name=IMoney" json:"IMoney"`
	IMoneyType   uint32 `protobuf:"varint,15,opt,name=IMoneyType" json:"IMoneyType"`
	AddOrReduce  uint32 `protobuf:"varint,16,opt,name=AddOrReduce" json:"AddOrReduce"`
	ReduceReason uint32 `protobuf:"varint,17,opt,name=ReduceReason" json:"ReduceReason"`
	LeftUseTime  uint32 `protobuf:"varint,18,opt,name=LeftUseTime" json:"LeftUseTime"`
}

func (m *ItemFlow) Reset()                    { *m = ItemFlow{} }
func (m *ItemFlow) String() string            { return proto.CompactTextString(m) }
func (*ItemFlow) ProtoMessage()               {}
func (*ItemFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{104} }

func (m *ItemFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *ItemFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *ItemFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *ItemFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *ItemFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *ItemFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *ItemFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ItemFlow) GetIGoodsType() uint32 {
	if m != nil {
		return m.IGoodsType
	}
	return 0
}

func (m *ItemFlow) GetIGoodsId() uint32 {
	if m != nil {
		return m.IGoodsId
	}
	return 0
}

func (m *ItemFlow) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ItemFlow) GetAfterCount() uint32 {
	if m != nil {
		return m.AfterCount
	}
	return 0
}

func (m *ItemFlow) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

func (m *ItemFlow) GetSubReason() uint32 {
	if m != nil {
		return m.SubReason
	}
	return 0
}

func (m *ItemFlow) GetIMoney() uint32 {
	if m != nil {
		return m.IMoney
	}
	return 0
}

func (m *ItemFlow) GetIMoneyType() uint32 {
	if m != nil {
		return m.IMoneyType
	}
	return 0
}

func (m *ItemFlow) GetAddOrReduce() uint32 {
	if m != nil {
		return m.AddOrReduce
	}
	return 0
}

func (m *ItemFlow) GetReduceReason() uint32 {
	if m != nil {
		return m.ReduceReason
	}
	return 0
}

func (m *ItemFlow) GetLeftUseTime() uint32 {
	if m != nil {
		return m.LeftUseTime
	}
	return 0
}

// 比赛模式信息
type ModeInfo struct {
	Modeid      uint32 `protobuf:"varint,1,opt,name=modeid" json:"modeid"`
	Solo        bool   `protobuf:"varint,2,opt,name=solo" json:"solo"`
	Duo         bool   `protobuf:"varint,3,opt,name=duo" json:"duo"`
	Squad       bool   `protobuf:"varint,4,opt,name=squad" json:"squad"`
	SeasonStart string `protobuf:"bytes,5,opt,name=seasonStart" json:"seasonStart"`
	SeasonEnd   string `protobuf:"bytes,6,opt,name=seasonEnd" json:"seasonEnd"`
	Price       uint32 `protobuf:"varint,7,opt,name=price" json:"price"`
}

func (m *ModeInfo) Reset()                    { *m = ModeInfo{} }
func (m *ModeInfo) String() string            { return proto.CompactTextString(m) }
func (*ModeInfo) ProtoMessage()               {}
func (*ModeInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{105} }

func (m *ModeInfo) GetModeid() uint32 {
	if m != nil {
		return m.Modeid
	}
	return 0
}

func (m *ModeInfo) GetSolo() bool {
	if m != nil {
		return m.Solo
	}
	return false
}

func (m *ModeInfo) GetDuo() bool {
	if m != nil {
		return m.Duo
	}
	return false
}

func (m *ModeInfo) GetSquad() bool {
	if m != nil {
		return m.Squad
	}
	return false
}

func (m *ModeInfo) GetSeasonStart() string {
	if m != nil {
		return m.SeasonStart
	}
	return ""
}

func (m *ModeInfo) GetSeasonEnd() string {
	if m != nil {
		return m.SeasonEnd
	}
	return ""
}

func (m *ModeInfo) GetPrice() uint32 {
	if m != nil {
		return m.Price
	}
	return 0
}

// s-->c 比赛模式开放信息通知
type MatchModeNotify struct {
	Infos []*ModeInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
}

func (m *MatchModeNotify) Reset()                    { *m = MatchModeNotify{} }
func (m *MatchModeNotify) String() string            { return proto.CompactTextString(m) }
func (*MatchModeNotify) ProtoMessage()               {}
func (*MatchModeNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{106} }

func (m *MatchModeNotify) GetInfos() []*ModeInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

// ActivityState 活动状态
type ActivityState struct {
	Id     uint32 `protobuf:"varint,1,opt,name=Id" json:"Id"`
	State  uint32 `protobuf:"varint,2,opt,name=State" json:"State"`
	RedDot uint32 `protobuf:"varint,3,opt,name=RedDot" json:"RedDot"`
}

func (m *ActivityState) Reset()                    { *m = ActivityState{} }
func (m *ActivityState) String() string            { return proto.CompactTextString(m) }
func (*ActivityState) ProtoMessage()               {}
func (*ActivityState) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{107} }

func (m *ActivityState) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ActivityState) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ActivityState) GetRedDot() uint32 {
	if m != nil {
		return m.RedDot
	}
	return 0
}

// ActivitysInfo 活动信息
type ActivitysInfo struct {
	ActivityState []*ActivityState `protobuf:"bytes,1,rep,name=ActivityState" json:"ActivityState,omitempty"`
	ExchangeState []*ActivityState `protobuf:"bytes,2,rep,name=ExchangeState" json:"ExchangeState,omitempty"`
}

func (m *ActivitysInfo) Reset()                    { *m = ActivitysInfo{} }
func (m *ActivitysInfo) String() string            { return proto.CompactTextString(m) }
func (*ActivitysInfo) ProtoMessage()               {}
func (*ActivitysInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{108} }

func (m *ActivitysInfo) GetActivityState() []*ActivityState {
	if m != nil {
		return m.ActivityState
	}
	return nil
}

func (m *ActivitysInfo) GetExchangeState() []*ActivityState {
	if m != nil {
		return m.ExchangeState
	}
	return nil
}

// 勋章收集
type MedalDataItem struct {
	Id  uint32 `protobuf:"varint,1,opt,name=id" json:"id"`
	Num uint32 `protobuf:"varint,2,opt,name=num" json:"num"`
}

func (m *MedalDataItem) Reset()                    { *m = MedalDataItem{} }
func (m *MedalDataItem) String() string            { return proto.CompactTextString(m) }
func (*MedalDataItem) ProtoMessage()               {}
func (*MedalDataItem) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{109} }

func (m *MedalDataItem) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MedalDataItem) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type MedalDataList struct {
	Data []*MedalDataItem `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *MedalDataList) Reset()                    { *m = MedalDataList{} }
func (m *MedalDataList) String() string            { return proto.CompactTextString(m) }
func (*MedalDataList) ProtoMessage()               {}
func (*MedalDataList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{110} }

func (m *MedalDataList) GetData() []*MedalDataItem {
	if m != nil {
		return m.Data
	}
	return nil
}

// 击杀掉落
type KillDrop struct {
	Thisid        uint64   `protobuf:"varint,1,opt,name=thisid" json:"thisid"`
	Pos           *Vector3 `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
	Disappeartime uint64   `protobuf:"varint,3,opt,name=disappeartime" json:"disappeartime"`
}

func (m *KillDrop) Reset()                    { *m = KillDrop{} }
func (m *KillDrop) String() string            { return proto.CompactTextString(m) }
func (*KillDrop) ProtoMessage()               {}
func (*KillDrop) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{111} }

func (m *KillDrop) GetThisid() uint64 {
	if m != nil {
		return m.Thisid
	}
	return 0
}

func (m *KillDrop) GetPos() *Vector3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *KillDrop) GetDisappeartime() uint64 {
	if m != nil {
		return m.Disappeartime
	}
	return 0
}

type KillDropList struct {
	Data []*KillDrop `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *KillDropList) Reset()                    { *m = KillDropList{} }
func (m *KillDropList) String() string            { return proto.CompactTextString(m) }
func (*KillDropList) ProtoMessage()               {}
func (*KillDropList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{112} }

func (m *KillDropList) GetData() []*KillDrop {
	if m != nil {
		return m.Data
	}
	return nil
}

// GoodRecordFlow 物品存量流水表
type GoodRecordFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	BehaveType       uint32 `protobuf:"varint,16,opt,name=BehaveType" json:"BehaveType"`
	RoleStock        string `protobuf:"bytes,17,opt,name=RoleStock" json:"RoleStock"`
	BrollyStock      string `protobuf:"bytes,18,opt,name=BrollyStock" json:"BrollyStock"`
}

func (m *GoodRecordFlow) Reset()                    { *m = GoodRecordFlow{} }
func (m *GoodRecordFlow) String() string            { return proto.CompactTextString(m) }
func (*GoodRecordFlow) ProtoMessage()               {}
func (*GoodRecordFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{113} }

func (m *GoodRecordFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *GoodRecordFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *GoodRecordFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *GoodRecordFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *GoodRecordFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *GoodRecordFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *GoodRecordFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *GoodRecordFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *GoodRecordFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GoodRecordFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *GoodRecordFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *GoodRecordFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *GoodRecordFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *GoodRecordFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *GoodRecordFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *GoodRecordFlow) GetBehaveType() uint32 {
	if m != nil {
		return m.BehaveType
	}
	return 0
}

func (m *GoodRecordFlow) GetRoleStock() string {
	if m != nil {
		return m.RoleStock
	}
	return ""
}

func (m *GoodRecordFlow) GetBrollyStock() string {
	if m != nil {
		return m.BrollyStock
	}
	return ""
}

type GoodsTimeLeft struct {
	Id       uint32 `protobuf:"varint,1,opt,name=id" json:"id"`
	TimeLeft int64  `protobuf:"varint,2,opt,name=timeLeft" json:"timeLeft"`
}

func (m *GoodsTimeLeft) Reset()                    { *m = GoodsTimeLeft{} }
func (m *GoodsTimeLeft) String() string            { return proto.CompactTextString(m) }
func (*GoodsTimeLeft) ProtoMessage()               {}
func (*GoodsTimeLeft) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{114} }

func (m *GoodsTimeLeft) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GoodsTimeLeft) GetTimeLeft() int64 {
	if m != nil {
		return m.TimeLeft
	}
	return 0
}

// 玩家时限商品的剩余可使用时间，永久商品不在该列表内
type GoodsTimeLeftNotify struct {
	Infos []*GoodsTimeLeft `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
}

func (m *GoodsTimeLeftNotify) Reset()                    { *m = GoodsTimeLeftNotify{} }
func (m *GoodsTimeLeftNotify) String() string            { return proto.CompactTextString(m) }
func (*GoodsTimeLeftNotify) ProtoMessage()               {}
func (*GoodsTimeLeftNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{115} }

func (m *GoodsTimeLeftNotify) GetInfos() []*GoodsTimeLeft {
	if m != nil {
		return m.Infos
	}
	return nil
}

type NewYearGood struct {
	Key        uint32 `protobuf:"varint,1,opt,name=Key" json:"Key"`
	Num        int32  `protobuf:"varint,2,opt,name=Num" json:"Num"`
	TargetType uint32 `protobuf:"varint,3,opt,name=TargetType" json:"TargetType"`
	TargetNum  uint32 `protobuf:"varint,4,opt,name=TargetNum" json:"TargetNum"`
}

func (m *NewYearGood) Reset()                    { *m = NewYearGood{} }
func (m *NewYearGood) String() string            { return proto.CompactTextString(m) }
func (*NewYearGood) ProtoMessage()               {}
func (*NewYearGood) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{116} }

func (m *NewYearGood) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *NewYearGood) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *NewYearGood) GetTargetType() uint32 {
	if m != nil {
		return m.TargetType
	}
	return 0
}

func (m *NewYearGood) GetTargetNum() uint32 {
	if m != nil {
		return m.TargetNum
	}
	return 0
}

// NewYearInfo 新年活动消息
type NewYearInfo struct {
	GoodID   []*NewYearGood `protobuf:"bytes,1,rep,name=GoodID" json:"GoodID,omitempty"`
	RecState uint32         `protobuf:"varint,2,opt,name=RecState" json:"RecState"`
	Index    uint32         `protobuf:"varint,3,opt,name=Index" json:"Index"`
}

func (m *NewYearInfo) Reset()                    { *m = NewYearInfo{} }
func (m *NewYearInfo) String() string            { return proto.CompactTextString(m) }
func (*NewYearInfo) ProtoMessage()               {}
func (*NewYearInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{117} }

func (m *NewYearInfo) GetGoodID() []*NewYearGood {
	if m != nil {
		return m.GoodID
	}
	return nil
}

func (m *NewYearInfo) GetRecState() uint32 {
	if m != nil {
		return m.RecState
	}
	return 0
}

func (m *NewYearInfo) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// 成就系统tlog
type AchievementFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	AchievementID    uint32 `protobuf:"varint,16,opt,name=AchievementID" json:"AchievementID"`
	AchievementLevel uint32 `protobuf:"varint,17,opt,name=AchievementLevel" json:"AchievementLevel"`
	AchievementExp   uint32 `protobuf:"varint,18,opt,name=AchievementExp" json:"AchievementExp"`
}

func (m *AchievementFlow) Reset()                    { *m = AchievementFlow{} }
func (m *AchievementFlow) String() string            { return proto.CompactTextString(m) }
func (*AchievementFlow) ProtoMessage()               {}
func (*AchievementFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{118} }

func (m *AchievementFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *AchievementFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *AchievementFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *AchievementFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *AchievementFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *AchievementFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *AchievementFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *AchievementFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *AchievementFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AchievementFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *AchievementFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *AchievementFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *AchievementFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *AchievementFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *AchievementFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *AchievementFlow) GetAchievementID() uint32 {
	if m != nil {
		return m.AchievementID
	}
	return 0
}

func (m *AchievementFlow) GetAchievementLevel() uint32 {
	if m != nil {
		return m.AchievementLevel
	}
	return 0
}

func (m *AchievementFlow) GetAchievementExp() uint32 {
	if m != nil {
		return m.AchievementExp
	}
	return 0
}

// 勋章系统tlog
type InsigniaFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	LogType          uint32 `protobuf:"varint,16,opt,name=LogType" json:"LogType"`
	InsigniaID       uint32 `protobuf:"varint,17,opt,name=InsigniaID" json:"InsigniaID"`
	InsigniaNum      uint32 `protobuf:"varint,18,opt,name=InsigniaNum" json:"InsigniaNum"`
	InsigniaUse      uint32 `protobuf:"varint,19,opt,name=InsigniaUse" json:"InsigniaUse"`
}

func (m *InsigniaFlow) Reset()                    { *m = InsigniaFlow{} }
func (m *InsigniaFlow) String() string            { return proto.CompactTextString(m) }
func (*InsigniaFlow) ProtoMessage()               {}
func (*InsigniaFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{119} }

func (m *InsigniaFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *InsigniaFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *InsigniaFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *InsigniaFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *InsigniaFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *InsigniaFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *InsigniaFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *InsigniaFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *InsigniaFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *InsigniaFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *InsigniaFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *InsigniaFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *InsigniaFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *InsigniaFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *InsigniaFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *InsigniaFlow) GetLogType() uint32 {
	if m != nil {
		return m.LogType
	}
	return 0
}

func (m *InsigniaFlow) GetInsigniaID() uint32 {
	if m != nil {
		return m.InsigniaID
	}
	return 0
}

func (m *InsigniaFlow) GetInsigniaNum() uint32 {
	if m != nil {
		return m.InsigniaNum
	}
	return 0
}

func (m *InsigniaFlow) GetInsigniaUse() uint32 {
	if m != nil {
		return m.InsigniaUse
	}
	return 0
}

// 成就信息
type Achievement struct {
	Id    uint32   `protobuf:"varint,1,opt,name=id" json:"id"`
	Stamp []uint64 `protobuf:"varint,2,rep,name=stamp" json:"stamp,omitempty"`
	Flag  uint32   `protobuf:"varint,3,opt,name=flag" json:"flag"`
}

func (m *Achievement) Reset()                    { *m = Achievement{} }
func (m *Achievement) String() string            { return proto.CompactTextString(m) }
func (*Achievement) ProtoMessage()               {}
func (*Achievement) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{120} }

func (m *Achievement) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Achievement) GetStamp() []uint64 {
	if m != nil {
		return m.Stamp
	}
	return nil
}

func (m *Achievement) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type AchievementProcess struct {
	Id  uint32  `protobuf:"varint,1,opt,name=id" json:"id"`
	Num float32 `protobuf:"fixed32,2,opt,name=num" json:"num"`
}

func (m *AchievementProcess) Reset()                    { *m = AchievementProcess{} }
func (m *AchievementProcess) String() string            { return proto.CompactTextString(m) }
func (*AchievementProcess) ProtoMessage()               {}
func (*AchievementProcess) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{121} }

func (m *AchievementProcess) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AchievementProcess) GetNum() float32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// 成就面板
type AchievmentInfo struct {
	Level   uint32                `protobuf:"varint,1,opt,name=level" json:"level"`
	Exp     uint32                `protobuf:"varint,2,opt,name=exp" json:"exp"`
	List    []*Achievement        `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Reward  []uint32              `protobuf:"varint,4,rep,name=reward" json:"reward,omitempty"`
	Used    []uint32              `protobuf:"varint,5,rep,name=used" json:"used,omitempty"`
	Process []*AchievementProcess `protobuf:"bytes,6,rep,name=process" json:"process,omitempty"`
}

func (m *AchievmentInfo) Reset()                    { *m = AchievmentInfo{} }
func (m *AchievmentInfo) String() string            { return proto.CompactTextString(m) }
func (*AchievmentInfo) ProtoMessage()               {}
func (*AchievmentInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{122} }

func (m *AchievmentInfo) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AchievmentInfo) GetExp() uint32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *AchievmentInfo) GetList() []*Achievement {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AchievmentInfo) GetReward() []uint32 {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *AchievmentInfo) GetUsed() []uint32 {
	if m != nil {
		return m.Used
	}
	return nil
}

func (m *AchievmentInfo) GetProcess() []*AchievementProcess {
	if m != nil {
		return m.Process
	}
	return nil
}

// 勋章信息
type Insignia struct {
	Id    uint32 `protobuf:"varint,1,opt,name=id" json:"id"`
	Count uint32 `protobuf:"varint,2,opt,name=count" json:"count"`
	Flag  uint32 `protobuf:"varint,3,opt,name=flag" json:"flag"`
}

func (m *Insignia) Reset()                    { *m = Insignia{} }
func (m *Insignia) String() string            { return proto.CompactTextString(m) }
func (*Insignia) ProtoMessage()               {}
func (*Insignia) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{123} }

func (m *Insignia) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Insignia) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Insignia) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

// 勋章面板
type InsigniaInfo struct {
	Info []*Insignia `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
	Use  uint32      `protobuf:"varint,2,opt,name=use" json:"use"`
}

func (m *InsigniaInfo) Reset()                    { *m = InsigniaInfo{} }
func (m *InsigniaInfo) String() string            { return proto.CompactTextString(m) }
func (*InsigniaInfo) ProtoMessage()               {}
func (*InsigniaInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{124} }

func (m *InsigniaInfo) GetInfo() []*Insignia {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *InsigniaInfo) GetUse() uint32 {
	if m != nil {
		return m.Use
	}
	return 0
}

// 奖励项
type AwardItem struct {
	Id  uint32 `protobuf:"varint,1,opt,name=id" json:"id"`
	Num uint32 `protobuf:"varint,2,opt,name=num" json:"num"`
}

func (m *AwardItem) Reset()                    { *m = AwardItem{} }
func (m *AwardItem) String() string            { return proto.CompactTextString(m) }
func (*AwardItem) ProtoMessage()               {}
func (*AwardItem) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{125} }

func (m *AwardItem) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AwardItem) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// 奖励条目
type SeasonAwards struct {
	Season int32        `protobuf:"varint,1,opt,name=season" json:"season"`
	Items  []*AwardItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *SeasonAwards) Reset()                    { *m = SeasonAwards{} }
func (m *SeasonAwards) String() string            { return proto.CompactTextString(m) }
func (*SeasonAwards) ProtoMessage()               {}
func (*SeasonAwards) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{126} }

func (m *SeasonAwards) GetSeason() int32 {
	if m != nil {
		return m.Season
	}
	return 0
}

func (m *SeasonAwards) GetItems() []*AwardItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// 外观幻化
type WearInGame struct {
	First  uint32 `protobuf:"varint,1,opt,name=first" json:"first"`
	Second uint32 `protobuf:"varint,2,opt,name=second" json:"second"`
	Third  uint32 `protobuf:"varint,3,opt,name=third" json:"third"`
}

func (m *WearInGame) Reset()                    { *m = WearInGame{} }
func (m *WearInGame) String() string            { return proto.CompactTextString(m) }
func (*WearInGame) ProtoMessage()               {}
func (*WearInGame) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{127} }

func (m *WearInGame) GetFirst() uint32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *WearInGame) GetSecond() uint32 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *WearInGame) GetThird() uint32 {
	if m != nil {
		return m.Third
	}
	return 0
}

// 外观幻化系统tlog
type WearInGameFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	ActionType       uint32 `protobuf:"varint,16,opt,name=ActionType" json:"ActionType"`
	EquipID          uint32 `protobuf:"varint,17,opt,name=EquipID" json:"EquipID"`
}

func (m *WearInGameFlow) Reset()                    { *m = WearInGameFlow{} }
func (m *WearInGameFlow) String() string            { return proto.CompactTextString(m) }
func (*WearInGameFlow) ProtoMessage()               {}
func (*WearInGameFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{128} }

func (m *WearInGameFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *WearInGameFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *WearInGameFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *WearInGameFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *WearInGameFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *WearInGameFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *WearInGameFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *WearInGameFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *WearInGameFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *WearInGameFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *WearInGameFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *WearInGameFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *WearInGameFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *WearInGameFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *WearInGameFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *WearInGameFlow) GetActionType() uint32 {
	if m != nil {
		return m.ActionType
	}
	return 0
}

func (m *WearInGameFlow) GetEquipID() uint32 {
	if m != nil {
		return m.EquipID
	}
	return 0
}

// 生化模式小地图精英武器位置(每隔1秒同步一次)
type EliteWeaponPos struct {
	Id  uint64   `protobuf:"varint,1,opt,name=id" json:"id"`
	Pos *Vector3 `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
}

func (m *EliteWeaponPos) Reset()                    { *m = EliteWeaponPos{} }
func (m *EliteWeaponPos) String() string            { return proto.CompactTextString(m) }
func (*EliteWeaponPos) ProtoMessage()               {}
func (*EliteWeaponPos) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{129} }

func (m *EliteWeaponPos) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EliteWeaponPos) GetPos() *Vector3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

type EliteWeaponPosList struct {
	Items []*EliteWeaponPos `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *EliteWeaponPosList) Reset()                    { *m = EliteWeaponPosList{} }
func (m *EliteWeaponPosList) String() string            { return proto.CompactTextString(m) }
func (*EliteWeaponPosList) ProtoMessage()               {}
func (*EliteWeaponPosList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{130} }

func (m *EliteWeaponPosList) GetItems() []*EliteWeaponPos {
	if m != nil {
		return m.Items
	}
	return nil
}

// 生化模式小地图空投箱位置(落地时发送)
type DropBoxPos struct {
	Id  uint64   `protobuf:"varint,1,opt,name=id" json:"id"`
	Pos *Vector3 `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
}

func (m *DropBoxPos) Reset()                    { *m = DropBoxPos{} }
func (m *DropBoxPos) String() string            { return proto.CompactTextString(m) }
func (*DropBoxPos) ProtoMessage()               {}
func (*DropBoxPos) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{131} }

func (m *DropBoxPos) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DropBoxPos) GetPos() *Vector3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

type DropBoxPosList struct {
	Items []*DropBoxPos `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *DropBoxPosList) Reset()                    { *m = DropBoxPosList{} }
func (m *DropBoxPosList) String() string            { return proto.CompactTextString(m) }
func (*DropBoxPosList) ProtoMessage()               {}
func (*DropBoxPosList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{132} }

func (m *DropBoxPosList) GetItems() []*DropBoxPos {
	if m != nil {
		return m.Items
	}
	return nil
}

// TreasureBoxInfo 宝箱领取信息
type TreasureBoxInfo struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	CoinType uint32 `protobuf:"varint,2,opt,name=coinType" json:"coinType"`
	CoinNum  uint32 `protobuf:"varint,3,opt,name=coinNum" json:"coinNum"`
}

func (m *TreasureBoxInfo) Reset()                    { *m = TreasureBoxInfo{} }
func (m *TreasureBoxInfo) String() string            { return proto.CompactTextString(m) }
func (*TreasureBoxInfo) ProtoMessage()               {}
func (*TreasureBoxInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{133} }

func (m *TreasureBoxInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TreasureBoxInfo) GetCoinType() uint32 {
	if m != nil {
		return m.CoinType
	}
	return 0
}

func (m *TreasureBoxInfo) GetCoinNum() uint32 {
	if m != nil {
		return m.CoinNum
	}
	return 0
}

type TreasureBoxList struct {
	Info []*TreasureBoxInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *TreasureBoxList) Reset()                    { *m = TreasureBoxList{} }
func (m *TreasureBoxList) String() string            { return proto.CompactTextString(m) }
func (*TreasureBoxList) ProtoMessage()               {}
func (*TreasureBoxList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{134} }

func (m *TreasureBoxList) GetInfo() []*TreasureBoxInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// TreasureBoxFlow 开宝箱tlog
type TreasureBoxFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	BoxID            uint32 `protobuf:"varint,16,opt,name=BoxID" json:"BoxID"`
	OpenNum          uint32 `protobuf:"varint,17,opt,name=OpenNum" json:"OpenNum"`
	IMoneyType       uint32 `protobuf:"varint,18,opt,name=IMoneyType" json:"IMoneyType"`
	IMoney           uint32 `protobuf:"varint,19,opt,name=IMoney" json:"IMoney"`
	ItemID           uint32 `protobuf:"varint,20,opt,name=ItemID" json:"ItemID"`
}

func (m *TreasureBoxFlow) Reset()                    { *m = TreasureBoxFlow{} }
func (m *TreasureBoxFlow) String() string            { return proto.CompactTextString(m) }
func (*TreasureBoxFlow) ProtoMessage()               {}
func (*TreasureBoxFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{135} }

func (m *TreasureBoxFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *TreasureBoxFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *TreasureBoxFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *TreasureBoxFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *TreasureBoxFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *TreasureBoxFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *TreasureBoxFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *TreasureBoxFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *TreasureBoxFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *TreasureBoxFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *TreasureBoxFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *TreasureBoxFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *TreasureBoxFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *TreasureBoxFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *TreasureBoxFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *TreasureBoxFlow) GetBoxID() uint32 {
	if m != nil {
		return m.BoxID
	}
	return 0
}

func (m *TreasureBoxFlow) GetOpenNum() uint32 {
	if m != nil {
		return m.OpenNum
	}
	return 0
}

func (m *TreasureBoxFlow) GetIMoneyType() uint32 {
	if m != nil {
		return m.IMoneyType
	}
	return 0
}

func (m *TreasureBoxFlow) GetIMoney() uint32 {
	if m != nil {
		return m.IMoney
	}
	return 0
}

func (m *TreasureBoxFlow) GetItemID() uint32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

// 军衔tlog
type MilitaryRankFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	Exp              uint32 `protobuf:"varint,16,opt,name=Exp" json:"Exp"`
	MilitaryRank     string `protobuf:"bytes,17,opt,name=MilitaryRank" json:"MilitaryRank"`
}

func (m *MilitaryRankFlow) Reset()                    { *m = MilitaryRankFlow{} }
func (m *MilitaryRankFlow) String() string            { return proto.CompactTextString(m) }
func (*MilitaryRankFlow) ProtoMessage()               {}
func (*MilitaryRankFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{136} }

func (m *MilitaryRankFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *MilitaryRankFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *MilitaryRankFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *MilitaryRankFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *MilitaryRankFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *MilitaryRankFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *MilitaryRankFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *MilitaryRankFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *MilitaryRankFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MilitaryRankFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *MilitaryRankFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *MilitaryRankFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *MilitaryRankFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *MilitaryRankFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *MilitaryRankFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *MilitaryRankFlow) GetExp() uint32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *MilitaryRankFlow) GetMilitaryRank() string {
	if m != nil {
		return m.MilitaryRank
	}
	return ""
}

// 任务项
type TaskItem struct {
	TaskId      uint32 `protobuf:"varint,1,opt,name=taskId" json:"taskId"`
	FinishedNum uint32 `protobuf:"varint,2,opt,name=finishedNum" json:"finishedNum"`
	Awards      uint32 `protobuf:"varint,3,opt,name=awards" json:"awards"`
	State       uint32 `protobuf:"varint,4,opt,name=state" json:"state"`
}

func (m *TaskItem) Reset()                    { *m = TaskItem{} }
func (m *TaskItem) String() string            { return proto.CompactTextString(m) }
func (*TaskItem) ProtoMessage()               {}
func (*TaskItem) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{137} }

func (m *TaskItem) GetTaskId() uint32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TaskItem) GetFinishedNum() uint32 {
	if m != nil {
		return m.FinishedNum
	}
	return 0
}

func (m *TaskItem) GetAwards() uint32 {
	if m != nil {
		return m.Awards
	}
	return 0
}

func (m *TaskItem) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 客户端的任务相关数据发生变化时，服务器主动推送给客户端，客户端做更新
type TaskUpdate struct {
	TaskName  string      `protobuf:"bytes,1,opt,name=taskName" json:"taskName"`
	Groupid   uint32      `protobuf:"varint,2,opt,name=groupid" json:"groupid"`
	TaskItems []*TaskItem `protobuf:"bytes,3,rep,name=taskItems" json:"taskItems,omitempty"`
}

func (m *TaskUpdate) Reset()                    { *m = TaskUpdate{} }
func (m *TaskUpdate) String() string            { return proto.CompactTextString(m) }
func (*TaskUpdate) ProtoMessage()               {}
func (*TaskUpdate) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{138} }

func (m *TaskUpdate) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *TaskUpdate) GetGroupid() uint32 {
	if m != nil {
		return m.Groupid
	}
	return 0
}

func (m *TaskUpdate) GetTaskItems() []*TaskItem {
	if m != nil {
		return m.TaskItems
	}
	return nil
}

// 活跃度宝箱
type ActiveAwardsBox struct {
	BoxId  uint32 `protobuf:"varint,1,opt,name=boxId" json:"boxId"`
	Awards uint32 `protobuf:"varint,2,opt,name=awards" json:"awards"`
}

func (m *ActiveAwardsBox) Reset()                    { *m = ActiveAwardsBox{} }
func (m *ActiveAwardsBox) String() string            { return proto.CompactTextString(m) }
func (*ActiveAwardsBox) ProtoMessage()               {}
func (*ActiveAwardsBox) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{139} }

func (m *ActiveAwardsBox) GetBoxId() uint32 {
	if m != nil {
		return m.BoxId
	}
	return 0
}

func (m *ActiveAwardsBox) GetAwards() uint32 {
	if m != nil {
		return m.Awards
	}
	return 0
}

// 客户端上线后，服务器主动推送每日任务相关信息，客户端做缓存
type DayTaskDetail struct {
	DayActiveness  uint32             `protobuf:"varint,1,opt,name=dayActiveness" json:"dayActiveness"`
	DayBoxs        []*ActiveAwardsBox `protobuf:"bytes,2,rep,name=dayBoxs" json:"dayBoxs,omitempty"`
	WeekActiveness uint32             `protobuf:"varint,3,opt,name=weekActiveness" json:"weekActiveness"`
	WeekBoxs       []*ActiveAwardsBox `protobuf:"bytes,4,rep,name=weekBoxs" json:"weekBoxs,omitempty"`
	DayTaskList    []*TaskItem        `protobuf:"bytes,5,rep,name=dayTaskList" json:"dayTaskList,omitempty"`
}

func (m *DayTaskDetail) Reset()                    { *m = DayTaskDetail{} }
func (m *DayTaskDetail) String() string            { return proto.CompactTextString(m) }
func (*DayTaskDetail) ProtoMessage()               {}
func (*DayTaskDetail) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{140} }

func (m *DayTaskDetail) GetDayActiveness() uint32 {
	if m != nil {
		return m.DayActiveness
	}
	return 0
}

func (m *DayTaskDetail) GetDayBoxs() []*ActiveAwardsBox {
	if m != nil {
		return m.DayBoxs
	}
	return nil
}

func (m *DayTaskDetail) GetWeekActiveness() uint32 {
	if m != nil {
		return m.WeekActiveness
	}
	return 0
}

func (m *DayTaskDetail) GetWeekBoxs() []*ActiveAwardsBox {
	if m != nil {
		return m.WeekBoxs
	}
	return nil
}

func (m *DayTaskDetail) GetDayTaskList() []*TaskItem {
	if m != nil {
		return m.DayTaskList
	}
	return nil
}

// 每日任务tlog
type DayTaskFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	TaskItemID       uint32 `protobuf:"varint,16,opt,name=TaskItemID" json:"TaskItemID"`
	TaskItemFinished uint32 `protobuf:"varint,17,opt,name=TaskItemFinished" json:"TaskItemFinished"`
}

func (m *DayTaskFlow) Reset()                    { *m = DayTaskFlow{} }
func (m *DayTaskFlow) String() string            { return proto.CompactTextString(m) }
func (*DayTaskFlow) ProtoMessage()               {}
func (*DayTaskFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{141} }

func (m *DayTaskFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *DayTaskFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *DayTaskFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *DayTaskFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *DayTaskFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *DayTaskFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *DayTaskFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *DayTaskFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *DayTaskFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *DayTaskFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *DayTaskFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *DayTaskFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *DayTaskFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *DayTaskFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *DayTaskFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *DayTaskFlow) GetTaskItemID() uint32 {
	if m != nil {
		return m.TaskItemID
	}
	return 0
}

func (m *DayTaskFlow) GetTaskItemFinished() uint32 {
	if m != nil {
		return m.TaskItemFinished
	}
	return 0
}

// 活跃度tlog
type ActivenessFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	DayActiveness    uint32 `protobuf:"varint,16,opt,name=DayActiveness" json:"DayActiveness"`
	WeekActiveness   uint32 `protobuf:"varint,17,opt,name=WeekActiveness" json:"WeekActiveness"`
}

func (m *ActivenessFlow) Reset()                    { *m = ActivenessFlow{} }
func (m *ActivenessFlow) String() string            { return proto.CompactTextString(m) }
func (*ActivenessFlow) ProtoMessage()               {}
func (*ActivenessFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{142} }

func (m *ActivenessFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *ActivenessFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *ActivenessFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *ActivenessFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *ActivenessFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *ActivenessFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *ActivenessFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *ActivenessFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *ActivenessFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ActivenessFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *ActivenessFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ActivenessFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *ActivenessFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *ActivenessFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *ActivenessFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *ActivenessFlow) GetDayActiveness() uint32 {
	if m != nil {
		return m.DayActiveness
	}
	return 0
}

func (m *ActivenessFlow) GetWeekActiveness() uint32 {
	if m != nil {
		return m.WeekActiveness
	}
	return 0
}

// 战友任务tlog
type ComradeTaskFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	TaskItemID       uint32 `protobuf:"varint,16,opt,name=TaskItemID" json:"TaskItemID"`
	TaskItemFinished uint32 `protobuf:"varint,17,opt,name=TaskItemFinished" json:"TaskItemFinished"`
}

func (m *ComradeTaskFlow) Reset()                    { *m = ComradeTaskFlow{} }
func (m *ComradeTaskFlow) String() string            { return proto.CompactTextString(m) }
func (*ComradeTaskFlow) ProtoMessage()               {}
func (*ComradeTaskFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{143} }

func (m *ComradeTaskFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *ComradeTaskFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *ComradeTaskFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *ComradeTaskFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *ComradeTaskFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *ComradeTaskFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *ComradeTaskFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *ComradeTaskFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *ComradeTaskFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ComradeTaskFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *ComradeTaskFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ComradeTaskFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *ComradeTaskFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *ComradeTaskFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *ComradeTaskFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *ComradeTaskFlow) GetTaskItemID() uint32 {
	if m != nil {
		return m.TaskItemID
	}
	return 0
}

func (m *ComradeTaskFlow) GetTaskItemFinished() uint32 {
	if m != nil {
		return m.TaskItemFinished
	}
	return 0
}

// 红蓝对决模式玩家位置
type PlayerPos struct {
	Id  uint64   `protobuf:"varint,1,opt,name=id" json:"id"`
	Typ uint32   `protobuf:"varint,2,opt,name=typ" json:"typ"`
	Pos *Vector3 `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
}

func (m *PlayerPos) Reset()                    { *m = PlayerPos{} }
func (m *PlayerPos) String() string            { return proto.CompactTextString(m) }
func (*PlayerPos) ProtoMessage()               {}
func (*PlayerPos) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{144} }

func (m *PlayerPos) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlayerPos) GetTyp() uint32 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *PlayerPos) GetPos() *Vector3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

// 红蓝对决模式玩家位置列表
type PlayerPosList struct {
	PlayerPos []*PlayerPos `protobuf:"bytes,1,rep,name=playerPos" json:"playerPos,omitempty"`
}

func (m *PlayerPosList) Reset()                    { *m = PlayerPosList{} }
func (m *PlayerPosList) String() string            { return proto.CompactTextString(m) }
func (*PlayerPosList) ProtoMessage()               {}
func (*PlayerPosList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{145} }

func (m *PlayerPosList) GetPlayerPos() []*PlayerPos {
	if m != nil {
		return m.PlayerPos
	}
	return nil
}

// 跟随信息
type FollowInfo struct {
	Target    uint64   `protobuf:"varint,1,opt,name=target" json:"target"`
	Followers []uint64 `protobuf:"varint,2,rep,name=followers" json:"followers,omitempty"`
}

func (m *FollowInfo) Reset()                    { *m = FollowInfo{} }
func (m *FollowInfo) String() string            { return proto.CompactTextString(m) }
func (*FollowInfo) ProtoMessage()               {}
func (*FollowInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{146} }

func (m *FollowInfo) GetTarget() uint64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *FollowInfo) GetFollowers() []uint64 {
	if m != nil {
		return m.Followers
	}
	return nil
}

// 跟随或取消跟随成功后，在队伍内广播通知消息
type FollowDetail struct {
	Infos []*FollowInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
}

func (m *FollowDetail) Reset()                    { *m = FollowDetail{} }
func (m *FollowDetail) String() string            { return proto.CompactTextString(m) }
func (*FollowDetail) ProtoMessage()               {}
func (*FollowDetail) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{147} }

func (m *FollowDetail) GetInfos() []*FollowInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

// 炮弹爆炸时，服务器在aoi范围内广播爆炸数据
type ShellExplodeNotify struct {
	Typ     uint32   `protobuf:"varint,1,opt,name=typ" json:"typ"`
	Shooter uint64   `protobuf:"varint,2,opt,name=shooter" json:"shooter"`
	Baseid  uint32   `protobuf:"varint,3,opt,name=baseid" json:"baseid"`
	Center  *Vector3 `protobuf:"bytes,4,opt,name=center" json:"center,omitempty"`
}

func (m *ShellExplodeNotify) Reset()                    { *m = ShellExplodeNotify{} }
func (m *ShellExplodeNotify) String() string            { return proto.CompactTextString(m) }
func (*ShellExplodeNotify) ProtoMessage()               {}
func (*ShellExplodeNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{148} }

func (m *ShellExplodeNotify) GetTyp() uint32 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *ShellExplodeNotify) GetShooter() uint64 {
	if m != nil {
		return m.Shooter
	}
	return 0
}

func (m *ShellExplodeNotify) GetBaseid() uint32 {
	if m != nil {
		return m.Baseid
	}
	return 0
}

func (m *ShellExplodeNotify) GetCenter() *Vector3 {
	if m != nil {
		return m.Center
	}
	return nil
}

// 奖励信息
type AwardInfo struct {
	Id    uint32 `protobuf:"varint,1,opt,name=id" json:"id"`
	State uint32 `protobuf:"varint,2,opt,name=state" json:"state"`
}

func (m *AwardInfo) Reset()                    { *m = AwardInfo{} }
func (m *AwardInfo) String() string            { return proto.CompactTextString(m) }
func (*AwardInfo) ProtoMessage()               {}
func (*AwardInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{149} }

func (m *AwardInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AwardInfo) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 以老带新详情
type OldBringNewDetail struct {
	Typ      uint32       `protobuf:"varint,1,opt,name=typ" json:"typ"`
	Teachers []uint64     `protobuf:"varint,2,rep,name=teachers" json:"teachers,omitempty"`
	Pupils   []uint64     `protobuf:"varint,3,rep,name=pupils" json:"pupils,omitempty"`
	TimeLeft uint32       `protobuf:"varint,4,opt,name=timeLeft" json:"timeLeft"`
	Awards   []*AwardInfo `protobuf:"bytes,5,rep,name=awards" json:"awards,omitempty"`
}

func (m *OldBringNewDetail) Reset()                    { *m = OldBringNewDetail{} }
func (m *OldBringNewDetail) String() string            { return proto.CompactTextString(m) }
func (*OldBringNewDetail) ProtoMessage()               {}
func (*OldBringNewDetail) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{150} }

func (m *OldBringNewDetail) GetTyp() uint32 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *OldBringNewDetail) GetTeachers() []uint64 {
	if m != nil {
		return m.Teachers
	}
	return nil
}

func (m *OldBringNewDetail) GetPupils() []uint64 {
	if m != nil {
		return m.Pupils
	}
	return nil
}

func (m *OldBringNewDetail) GetTimeLeft() uint32 {
	if m != nil {
		return m.TimeLeft
	}
	return 0
}

func (m *OldBringNewDetail) GetAwards() []*AwardInfo {
	if m != nil {
		return m.Awards
	}
	return nil
}

// 客户端上线后，服务器主动推送战友任务相关信息，客户端做缓存
type ComradeTaskDetail struct {
	ComradeTaskList []*TaskItem `protobuf:"bytes,1,rep,name=comradeTaskList" json:"comradeTaskList,omitempty"`
}

func (m *ComradeTaskDetail) Reset()                    { *m = ComradeTaskDetail{} }
func (m *ComradeTaskDetail) String() string            { return proto.CompactTextString(m) }
func (*ComradeTaskDetail) ProtoMessage()               {}
func (*ComradeTaskDetail) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{151} }

func (m *ComradeTaskDetail) GetComradeTaskList() []*TaskItem {
	if m != nil {
		return m.ComradeTaskList
	}
	return nil
}

// 老兵召回平台好友信息
type VeteranInfo struct {
	Uid       uint64 `protobuf:"varint,1,opt,name=Uid" json:"Uid"`
	Url       string `protobuf:"bytes,2,opt,name=Url" json:"Url"`
	UserName  string `protobuf:"bytes,3,opt,name=UserName" json:"UserName"`
	NameColor uint32 `protobuf:"varint,4,opt,name=NameColor" json:"NameColor"`
}

func (m *VeteranInfo) Reset()                    { *m = VeteranInfo{} }
func (m *VeteranInfo) String() string            { return proto.CompactTextString(m) }
func (*VeteranInfo) ProtoMessage()               {}
func (*VeteranInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{152} }

func (m *VeteranInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *VeteranInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *VeteranInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *VeteranInfo) GetNameColor() uint32 {
	if m != nil {
		return m.NameColor
	}
	return 0
}

// 老兵召回平台好友列表
type VeteranRecallList struct {
	VeteranList []*VeteranInfo `protobuf:"bytes,1,rep,name=VeteranList" json:"VeteranList,omitempty"`
	State       uint32         `protobuf:"varint,2,opt,name=State" json:"State"`
	Index       uint32         `protobuf:"varint,3,opt,name=Index" json:"Index"`
}

func (m *VeteranRecallList) Reset()                    { *m = VeteranRecallList{} }
func (m *VeteranRecallList) String() string            { return proto.CompactTextString(m) }
func (*VeteranRecallList) ProtoMessage()               {}
func (*VeteranRecallList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{153} }

func (m *VeteranRecallList) GetVeteranList() []*VeteranInfo {
	if m != nil {
		return m.VeteranList
	}
	return nil
}

func (m *VeteranRecallList) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *VeteranRecallList) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// 成功召回好友的奖励领取列表
type VeteranRecallReward struct {
	RecallSusNum uint32   `protobuf:"varint,1,opt,name=RecallSusNum" json:"RecallSusNum"`
	RewardIdList []uint32 `protobuf:"varint,2,rep,name=RewardIdList" json:"RewardIdList,omitempty"`
}

func (m *VeteranRecallReward) Reset()                    { *m = VeteranRecallReward{} }
func (m *VeteranRecallReward) String() string            { return proto.CompactTextString(m) }
func (*VeteranRecallReward) ProtoMessage()               {}
func (*VeteranRecallReward) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{154} }

func (m *VeteranRecallReward) GetRecallSusNum() uint32 {
	if m != nil {
		return m.RecallSusNum
	}
	return 0
}

func (m *VeteranRecallReward) GetRewardIdList() []uint32 {
	if m != nil {
		return m.RewardIdList
	}
	return nil
}

// 武器装备信息
type WeaponInfo struct {
	WeaponId  uint32   `protobuf:"varint,1,opt,name=weaponId" json:"weaponId"`
	Additions []uint32 `protobuf:"varint,2,rep,name=additions" json:"additions,omitempty"`
}

func (m *WeaponInfo) Reset()                    { *m = WeaponInfo{} }
func (m *WeaponInfo) String() string            { return proto.CompactTextString(m) }
func (*WeaponInfo) ProtoMessage()               {}
func (*WeaponInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{155} }

func (m *WeaponInfo) GetWeaponId() uint32 {
	if m != nil {
		return m.WeaponId
	}
	return 0
}

func (m *WeaponInfo) GetAdditions() []uint32 {
	if m != nil {
		return m.Additions
	}
	return nil
}

type WeaponInGame struct {
	Weapons []*WeaponInfo `protobuf:"bytes,1,rep,name=weapons" json:"weapons,omitempty"`
}

func (m *WeaponInGame) Reset()                    { *m = WeaponInGame{} }
func (m *WeaponInGame) String() string            { return proto.CompactTextString(m) }
func (*WeaponInGame) ProtoMessage()               {}
func (*WeaponInGame) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{156} }

func (m *WeaponInGame) GetWeapons() []*WeaponInfo {
	if m != nil {
		return m.Weapons
	}
	return nil
}

type VehicleFullNotify struct {
	Id  uint64   `protobuf:"varint,1,opt,name=id" json:"id"`
	Uid []uint64 `protobuf:"varint,2,rep,name=uid" json:"uid,omitempty"`
}

func (m *VehicleFullNotify) Reset()                    { *m = VehicleFullNotify{} }
func (m *VehicleFullNotify) String() string            { return proto.CompactTextString(m) }
func (*VehicleFullNotify) ProtoMessage()               {}
func (*VehicleFullNotify) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{157} }

func (m *VehicleFullNotify) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VehicleFullNotify) GetUid() []uint64 {
	if m != nil {
		return m.Uid
	}
	return nil
}

// PreferenceInfo 偏好设置信息
type PreferenceInfo struct {
	Id      uint32   `protobuf:"varint,1,opt,name=Id" json:"Id"`
	Start   []bool   `protobuf:"varint,2,rep,name=Start" json:"Start,omitempty"`
	PreType []uint32 `protobuf:"varint,3,rep,name=PreType" json:"PreType,omitempty"`
}

func (m *PreferenceInfo) Reset()                    { *m = PreferenceInfo{} }
func (m *PreferenceInfo) String() string            { return proto.CompactTextString(m) }
func (*PreferenceInfo) ProtoMessage()               {}
func (*PreferenceInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{158} }

func (m *PreferenceInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PreferenceInfo) GetStart() []bool {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *PreferenceInfo) GetPreType() []uint32 {
	if m != nil {
		return m.PreType
	}
	return nil
}

// PreferenceList 偏好设置列表(顺序：角色，伞包，背包，头盔)
type PreferenceList struct {
	Info []*PreferenceInfo `protobuf:"bytes,1,rep,name=Info" json:"Info,omitempty"`
}

func (m *PreferenceList) Reset()                    { *m = PreferenceList{} }
func (m *PreferenceList) String() string            { return proto.CompactTextString(m) }
func (*PreferenceList) ProtoMessage()               {}
func (*PreferenceList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{159} }

func (m *PreferenceList) GetInfo() []*PreferenceInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 随机偏好tlog
type PreferenceFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	ItemType         uint32 `protobuf:"varint,16,opt,name=ItemType" json:"ItemType"`
	PreType          uint32 `protobuf:"varint,17,opt,name=PreType" json:"PreType"`
}

func (m *PreferenceFlow) Reset()                    { *m = PreferenceFlow{} }
func (m *PreferenceFlow) String() string            { return proto.CompactTextString(m) }
func (*PreferenceFlow) ProtoMessage()               {}
func (*PreferenceFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{160} }

func (m *PreferenceFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *PreferenceFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *PreferenceFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *PreferenceFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *PreferenceFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *PreferenceFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *PreferenceFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *PreferenceFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *PreferenceFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PreferenceFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *PreferenceFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *PreferenceFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *PreferenceFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *PreferenceFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *PreferenceFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *PreferenceFlow) GetItemType() uint32 {
	if m != nil {
		return m.ItemType
	}
	return 0
}

func (m *PreferenceFlow) GetPreType() uint32 {
	if m != nil {
		return m.PreType
	}
	return 0
}

// 战绩详情
type GameRecordDetail struct {
	Id          uint64  `protobuf:"varint,1,opt,name=id" json:"id"`
	Level       uint32  `protobuf:"varint,2,opt,name=level" json:"level"`
	SoloRating  uint32  `protobuf:"varint,3,opt,name=soloRating" json:"soloRating"`
	DuoRating   uint32  `protobuf:"varint,4,opt,name=duoRating" json:"duoRating"`
	SquadRating uint32  `protobuf:"varint,5,opt,name=squadRating" json:"squadRating"`
	Battles     uint32  `protobuf:"varint,6,opt,name=battles" json:"battles"`
	Wins        uint32  `protobuf:"varint,7,opt,name=wins" json:"wins"`
	TopTens     uint32  `protobuf:"varint,8,opt,name=topTens" json:"topTens"`
	Kda         float32 `protobuf:"fixed32,9,opt,name=kda" json:"kda"`
}

func (m *GameRecordDetail) Reset()                    { *m = GameRecordDetail{} }
func (m *GameRecordDetail) String() string            { return proto.CompactTextString(m) }
func (*GameRecordDetail) ProtoMessage()               {}
func (*GameRecordDetail) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{161} }

func (m *GameRecordDetail) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameRecordDetail) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GameRecordDetail) GetSoloRating() uint32 {
	if m != nil {
		return m.SoloRating
	}
	return 0
}

func (m *GameRecordDetail) GetDuoRating() uint32 {
	if m != nil {
		return m.DuoRating
	}
	return 0
}

func (m *GameRecordDetail) GetSquadRating() uint32 {
	if m != nil {
		return m.SquadRating
	}
	return 0
}

func (m *GameRecordDetail) GetBattles() uint32 {
	if m != nil {
		return m.Battles
	}
	return 0
}

func (m *GameRecordDetail) GetWins() uint32 {
	if m != nil {
		return m.Wins
	}
	return 0
}

func (m *GameRecordDetail) GetTopTens() uint32 {
	if m != nil {
		return m.TopTens
	}
	return 0
}

func (m *GameRecordDetail) GetKda() float32 {
	if m != nil {
		return m.Kda
	}
	return 0
}

// 世界杯冠军竞猜下注信息
type ContestInfo struct {
	TeamId uint32 `protobuf:"varint,1,opt,name=teamId" json:"teamId"`
	Bouns  uint64 `protobuf:"varint,2,opt,name=bouns" json:"bouns"`
}

func (m *ContestInfo) Reset()                    { *m = ContestInfo{} }
func (m *ContestInfo) String() string            { return proto.CompactTextString(m) }
func (*ContestInfo) ProtoMessage()               {}
func (*ContestInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{162} }

func (m *ContestInfo) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *ContestInfo) GetBouns() uint64 {
	if m != nil {
		return m.Bouns
	}
	return 0
}

// 世界杯冠军竞猜下注信息列表
type ChampionContestInfo struct {
	Info []*ContestInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
	Team []uint32       `protobuf:"varint,2,rep,name=team" json:"team,omitempty"`
}

func (m *ChampionContestInfo) Reset()                    { *m = ChampionContestInfo{} }
func (m *ChampionContestInfo) String() string            { return proto.CompactTextString(m) }
func (*ChampionContestInfo) ProtoMessage()               {}
func (*ChampionContestInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{163} }

func (m *ChampionContestInfo) GetInfo() []*ContestInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ChampionContestInfo) GetTeam() []uint32 {
	if m != nil {
		return m.Team
	}
	return nil
}

// 世界杯冠军竞猜队伍赔率
type OddsInfo struct {
	TeamId uint32  `protobuf:"varint,1,opt,name=teamId" json:"teamId"`
	Odds   float32 `protobuf:"fixed32,2,opt,name=odds" json:"odds"`
}

func (m *OddsInfo) Reset()                    { *m = OddsInfo{} }
func (m *OddsInfo) String() string            { return proto.CompactTextString(m) }
func (*OddsInfo) ProtoMessage()               {}
func (*OddsInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{164} }

func (m *OddsInfo) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *OddsInfo) GetOdds() float32 {
	if m != nil {
		return m.Odds
	}
	return 0
}

// 世界杯冠军竞猜队伍赔率列表
type ChampionOddsInfo struct {
	Info []*OddsInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *ChampionOddsInfo) Reset()                    { *m = ChampionOddsInfo{} }
func (m *ChampionOddsInfo) String() string            { return proto.CompactTextString(m) }
func (*ChampionOddsInfo) ProtoMessage()               {}
func (*ChampionOddsInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{165} }

func (m *ChampionOddsInfo) GetInfo() []*OddsInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 世界杯冠军竞猜投注记录
type ContestRecord struct {
	TeamId uint32  `protobuf:"varint,1,opt,name=teamId" json:"teamId"`
	Stamp  int64   `protobuf:"varint,2,opt,name=stamp" json:"stamp"`
	Odds   float32 `protobuf:"fixed32,3,opt,name=odds" json:"odds"`
}

func (m *ContestRecord) Reset()                    { *m = ContestRecord{} }
func (m *ContestRecord) String() string            { return proto.CompactTextString(m) }
func (*ContestRecord) ProtoMessage()               {}
func (*ContestRecord) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{166} }

func (m *ContestRecord) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *ContestRecord) GetStamp() int64 {
	if m != nil {
		return m.Stamp
	}
	return 0
}

func (m *ContestRecord) GetOdds() float32 {
	if m != nil {
		return m.Odds
	}
	return 0
}

// 世界杯冠军竞猜投注记录列表
type ChampionContestRecord struct {
	Record []*ContestRecord `protobuf:"bytes,1,rep,name=record" json:"record,omitempty"`
}

func (m *ChampionContestRecord) Reset()                    { *m = ChampionContestRecord{} }
func (m *ChampionContestRecord) String() string            { return proto.CompactTextString(m) }
func (*ChampionContestRecord) ProtoMessage()               {}
func (*ChampionContestRecord) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{167} }

func (m *ChampionContestRecord) GetRecord() []*ContestRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

// 世界杯胜负竞猜比赛数据
type WorldCupMatch struct {
	MatchId    uint32    `protobuf:"varint,1,opt,name=matchId" json:"matchId"`
	Contest    []uint64  `protobuf:"varint,2,rep,name=contest" json:"contest,omitempty"`
	Odds       []float32 `protobuf:"fixed32,3,rep,name=odds" json:"odds,omitempty"`
	Team       []string  `protobuf:"bytes,4,rep,name=team" json:"team,omitempty"`
	Score      []uint32  `protobuf:"varint,5,rep,name=score" json:"score,omitempty"`
	IsDone     uint32    `protobuf:"varint,6,opt,name=isDone" json:"isDone"`
	IsReward   uint32    `protobuf:"varint,7,opt,name=isReward" json:"isReward"`
	ScoreFinal []uint32  `protobuf:"varint,8,rep,name=scoreFinal" json:"scoreFinal,omitempty"`
}

func (m *WorldCupMatch) Reset()                    { *m = WorldCupMatch{} }
func (m *WorldCupMatch) String() string            { return proto.CompactTextString(m) }
func (*WorldCupMatch) ProtoMessage()               {}
func (*WorldCupMatch) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{168} }

func (m *WorldCupMatch) GetMatchId() uint32 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *WorldCupMatch) GetContest() []uint64 {
	if m != nil {
		return m.Contest
	}
	return nil
}

func (m *WorldCupMatch) GetOdds() []float32 {
	if m != nil {
		return m.Odds
	}
	return nil
}

func (m *WorldCupMatch) GetTeam() []string {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *WorldCupMatch) GetScore() []uint32 {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *WorldCupMatch) GetIsDone() uint32 {
	if m != nil {
		return m.IsDone
	}
	return 0
}

func (m *WorldCupMatch) GetIsReward() uint32 {
	if m != nil {
		return m.IsReward
	}
	return 0
}

func (m *WorldCupMatch) GetScoreFinal() []uint32 {
	if m != nil {
		return m.ScoreFinal
	}
	return nil
}

// 世界杯胜负竞猜比赛列表
type WorldCupMatchInfo struct {
	Info []*WorldCupMatch `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *WorldCupMatchInfo) Reset()                    { *m = WorldCupMatchInfo{} }
func (m *WorldCupMatchInfo) String() string            { return proto.CompactTextString(m) }
func (*WorldCupMatchInfo) ProtoMessage()               {}
func (*WorldCupMatchInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{169} }

func (m *WorldCupMatchInfo) GetInfo() []*WorldCupMatch {
	if m != nil {
		return m.Info
	}
	return nil
}

// 世界杯胜负竞猜投注记录
type WorldCupMatchRecord struct {
	MatchId uint32   `protobuf:"varint,1,opt,name=matchId" json:"matchId"`
	Kind    uint32   `protobuf:"varint,2,opt,name=kind" json:"kind"`
	Stamp   int64    `protobuf:"varint,3,opt,name=stamp" json:"stamp"`
	Odds    float32  `protobuf:"fixed32,4,opt,name=odds" json:"odds"`
	Team    []string `protobuf:"bytes,5,rep,name=team" json:"team,omitempty"`
}

func (m *WorldCupMatchRecord) Reset()                    { *m = WorldCupMatchRecord{} }
func (m *WorldCupMatchRecord) String() string            { return proto.CompactTextString(m) }
func (*WorldCupMatchRecord) ProtoMessage()               {}
func (*WorldCupMatchRecord) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{170} }

func (m *WorldCupMatchRecord) GetMatchId() uint32 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *WorldCupMatchRecord) GetKind() uint32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *WorldCupMatchRecord) GetStamp() int64 {
	if m != nil {
		return m.Stamp
	}
	return 0
}

func (m *WorldCupMatchRecord) GetOdds() float32 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *WorldCupMatchRecord) GetTeam() []string {
	if m != nil {
		return m.Team
	}
	return nil
}

// 世界杯胜负竞猜投注记录列表
type WorldCupMatchRecordInfo struct {
	Info []*WorldCupMatchRecord `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *WorldCupMatchRecordInfo) Reset()                    { *m = WorldCupMatchRecordInfo{} }
func (m *WorldCupMatchRecordInfo) String() string            { return proto.CompactTextString(m) }
func (*WorldCupMatchRecordInfo) ProtoMessage()               {}
func (*WorldCupMatchRecordInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{171} }

func (m *WorldCupMatchRecordInfo) GetInfo() []*WorldCupMatchRecord {
	if m != nil {
		return m.Info
	}
	return nil
}

type FestivalInfo struct {
	Id    uint32 `protobuf:"varint,1,opt,name=Id" json:"Id"`
	Num   uint32 `protobuf:"varint,2,opt,name=Num" json:"Num"`
	State uint32 `protobuf:"varint,3,opt,name=State" json:"State"`
}

func (m *FestivalInfo) Reset()                    { *m = FestivalInfo{} }
func (m *FestivalInfo) String() string            { return proto.CompactTextString(m) }
func (*FestivalInfo) ProtoMessage()               {}
func (*FestivalInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{172} }

func (m *FestivalInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FestivalInfo) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *FestivalInfo) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

// FestivalList 节日活动list
type FestivalList struct {
	ActState uint32          `protobuf:"varint,1,opt,name=ActState" json:"ActState"`
	Info     []*FestivalInfo `protobuf:"bytes,2,rep,name=Info" json:"Info,omitempty"`
}

func (m *FestivalList) Reset()                    { *m = FestivalList{} }
func (m *FestivalList) String() string            { return proto.CompactTextString(m) }
func (*FestivalList) ProtoMessage()               {}
func (*FestivalList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{173} }

func (m *FestivalList) GetActState() uint32 {
	if m != nil {
		return m.ActState
	}
	return 0
}

func (m *FestivalList) GetInfo() []*FestivalInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type ExchangeInfo struct {
	Id          uint32   `protobuf:"varint,1,opt,name=Id" json:"Id"`
	Num         []uint32 `protobuf:"varint,2,rep,name=Num" json:"Num,omitempty"`
	State       uint32   `protobuf:"varint,3,opt,name=State" json:"State"`
	ExchangeNum uint32   `protobuf:"varint,4,opt,name=ExchangeNum" json:"ExchangeNum"`
}

func (m *ExchangeInfo) Reset()                    { *m = ExchangeInfo{} }
func (m *ExchangeInfo) String() string            { return proto.CompactTextString(m) }
func (*ExchangeInfo) ProtoMessage()               {}
func (*ExchangeInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{174} }

func (m *ExchangeInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ExchangeInfo) GetNum() []uint32 {
	if m != nil {
		return m.Num
	}
	return nil
}

func (m *ExchangeInfo) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ExchangeInfo) GetExchangeNum() uint32 {
	if m != nil {
		return m.ExchangeNum
	}
	return 0
}

// ExchangeList 兑换活动list
type ExchangeList struct {
	Id       uint32          `protobuf:"varint,1,opt,name=Id" json:"Id"`
	ActState uint32          `protobuf:"varint,2,opt,name=ActState" json:"ActState"`
	Info     []*ExchangeInfo `protobuf:"bytes,3,rep,name=Info" json:"Info,omitempty"`
}

func (m *ExchangeList) Reset()                    { *m = ExchangeList{} }
func (m *ExchangeList) String() string            { return proto.CompactTextString(m) }
func (*ExchangeList) ProtoMessage()               {}
func (*ExchangeList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{175} }

func (m *ExchangeList) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ExchangeList) GetActState() uint32 {
	if m != nil {
		return m.ActState
	}
	return 0
}

func (m *ExchangeList) GetInfo() []*ExchangeInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type ExchangeTotalList struct {
	List []*ExchangeList `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
}

func (m *ExchangeTotalList) Reset()                    { *m = ExchangeTotalList{} }
func (m *ExchangeTotalList) String() string            { return proto.CompactTextString(m) }
func (*ExchangeTotalList) ProtoMessage()               {}
func (*ExchangeTotalList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{176} }

func (m *ExchangeTotalList) GetList() []*ExchangeList {
	if m != nil {
		return m.List
	}
	return nil
}

// FestivalFlow 节日活动tlog
type FestivalFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	TaskID           uint32 `protobuf:"varint,16,opt,name=TaskID" json:"TaskID"`
	Rewards          string `protobuf:"bytes,17,opt,name=Rewards" json:"Rewards"`
}

func (m *FestivalFlow) Reset()                    { *m = FestivalFlow{} }
func (m *FestivalFlow) String() string            { return proto.CompactTextString(m) }
func (*FestivalFlow) ProtoMessage()               {}
func (*FestivalFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{177} }

func (m *FestivalFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *FestivalFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *FestivalFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *FestivalFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *FestivalFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *FestivalFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *FestivalFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *FestivalFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *FestivalFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *FestivalFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *FestivalFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *FestivalFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *FestivalFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *FestivalFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *FestivalFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *FestivalFlow) GetTaskID() uint32 {
	if m != nil {
		return m.TaskID
	}
	return 0
}

func (m *FestivalFlow) GetRewards() string {
	if m != nil {
		return m.Rewards
	}
	return ""
}

// ExchangeFlow 兑换活动tlog
type ExchangeFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	ActID            uint32 `protobuf:"varint,16,opt,name=ActID" json:"ActID"`
	ExchangeID       uint32 `protobuf:"varint,17,opt,name=ExchangeID" json:"ExchangeID"`
	ExchangeNum      uint32 `protobuf:"varint,18,opt,name=ExchangeNum" json:"ExchangeNum"`
	Rewards          string `protobuf:"bytes,19,opt,name=Rewards" json:"Rewards"`
}

func (m *ExchangeFlow) Reset()                    { *m = ExchangeFlow{} }
func (m *ExchangeFlow) String() string            { return proto.CompactTextString(m) }
func (*ExchangeFlow) ProtoMessage()               {}
func (*ExchangeFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{178} }

func (m *ExchangeFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *ExchangeFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *ExchangeFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *ExchangeFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *ExchangeFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *ExchangeFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *ExchangeFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *ExchangeFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *ExchangeFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ExchangeFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *ExchangeFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ExchangeFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *ExchangeFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *ExchangeFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *ExchangeFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *ExchangeFlow) GetActID() uint32 {
	if m != nil {
		return m.ActID
	}
	return 0
}

func (m *ExchangeFlow) GetExchangeID() uint32 {
	if m != nil {
		return m.ExchangeID
	}
	return 0
}

func (m *ExchangeFlow) GetExchangeNum() uint32 {
	if m != nil {
		return m.ExchangeNum
	}
	return 0
}

func (m *ExchangeFlow) GetRewards() string {
	if m != nil {
		return m.Rewards
	}
	return ""
}

type BallStarReward struct {
	Id    uint32 `protobuf:"varint,1,opt,name=Id" json:"Id"`
	State uint32 `protobuf:"varint,2,opt,name=State" json:"State"`
}

func (m *BallStarReward) Reset()                    { *m = BallStarReward{} }
func (m *BallStarReward) String() string            { return proto.CompactTextString(m) }
func (*BallStarReward) ProtoMessage()               {}
func (*BallStarReward) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{179} }

func (m *BallStarReward) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BallStarReward) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

// BallStarInfo 一球成名活动info
type BallStarInfo struct {
	Id          uint32            `protobuf:"varint,1,opt,name=Id" json:"Id"`
	ActState    uint32            `protobuf:"varint,2,opt,name=ActState" json:"ActState"`
	Position    uint32            `protobuf:"varint,3,opt,name=Position" json:"Position"`
	Sum         uint32            `protobuf:"varint,4,opt,name=Sum" json:"Sum"`
	RewardState []*BallStarReward `protobuf:"bytes,5,rep,name=RewardState" json:"RewardState,omitempty"`
}

func (m *BallStarInfo) Reset()                    { *m = BallStarInfo{} }
func (m *BallStarInfo) String() string            { return proto.CompactTextString(m) }
func (*BallStarInfo) ProtoMessage()               {}
func (*BallStarInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{180} }

func (m *BallStarInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BallStarInfo) GetActState() uint32 {
	if m != nil {
		return m.ActState
	}
	return 0
}

func (m *BallStarInfo) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *BallStarInfo) GetSum() uint32 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *BallStarInfo) GetRewardState() []*BallStarReward {
	if m != nil {
		return m.RewardState
	}
	return nil
}

// BallStarFlow 一球成名活动tlog
type BallStarFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	Position         uint32 `protobuf:"varint,16,opt,name=Position" json:"Position"`
	Sum              uint32 `protobuf:"varint,17,opt,name=Sum" json:"Sum"`
	RewardsID        uint32 `protobuf:"varint,18,opt,name=RewardsID" json:"RewardsID"`
	RewardsNum       uint32 `protobuf:"varint,19,opt,name=RewardsNum" json:"RewardsNum"`
}

func (m *BallStarFlow) Reset()                    { *m = BallStarFlow{} }
func (m *BallStarFlow) String() string            { return proto.CompactTextString(m) }
func (*BallStarFlow) ProtoMessage()               {}
func (*BallStarFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{181} }

func (m *BallStarFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *BallStarFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *BallStarFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *BallStarFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *BallStarFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *BallStarFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *BallStarFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *BallStarFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *BallStarFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *BallStarFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *BallStarFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *BallStarFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *BallStarFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *BallStarFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *BallStarFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *BallStarFlow) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *BallStarFlow) GetSum() uint32 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *BallStarFlow) GetRewardsID() uint32 {
	if m != nil {
		return m.RewardsID
	}
	return 0
}

func (m *BallStarFlow) GetRewardsNum() uint32 {
	if m != nil {
		return m.RewardsNum
	}
	return 0
}

// CheaterReportFlow 举报tlog
type CheaterReportFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	ReportOpenID     string `protobuf:"bytes,16,opt,name=ReportOpenID" json:"ReportOpenID"`
	ReportName       string `protobuf:"bytes,17,opt,name=ReportName" json:"ReportName"`
	ReportTypeID     uint32 `protobuf:"varint,18,opt,name=ReportTypeID" json:"ReportTypeID"`
	ReportTypeSum    string `protobuf:"bytes,19,opt,name=ReportTypeSum" json:"ReportTypeSum"`
}

func (m *CheaterReportFlow) Reset()                    { *m = CheaterReportFlow{} }
func (m *CheaterReportFlow) String() string            { return proto.CompactTextString(m) }
func (*CheaterReportFlow) ProtoMessage()               {}
func (*CheaterReportFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{182} }

func (m *CheaterReportFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *CheaterReportFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *CheaterReportFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *CheaterReportFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *CheaterReportFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *CheaterReportFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *CheaterReportFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *CheaterReportFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *CheaterReportFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CheaterReportFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *CheaterReportFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *CheaterReportFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *CheaterReportFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *CheaterReportFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *CheaterReportFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *CheaterReportFlow) GetReportOpenID() string {
	if m != nil {
		return m.ReportOpenID
	}
	return ""
}

func (m *CheaterReportFlow) GetReportName() string {
	if m != nil {
		return m.ReportName
	}
	return ""
}

func (m *CheaterReportFlow) GetReportTypeID() uint32 {
	if m != nil {
		return m.ReportTypeID
	}
	return 0
}

func (m *CheaterReportFlow) GetReportTypeSum() string {
	if m != nil {
		return m.ReportTypeSum
	}
	return ""
}

// 世界杯冠军竞猜
type WorldCupChampionFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	TeamID           uint32 `protobuf:"varint,16,opt,name=TeamID" json:"TeamID"`
	Odds             string `protobuf:"bytes,17,opt,name=Odds" json:"Odds"`
}

func (m *WorldCupChampionFlow) Reset()                    { *m = WorldCupChampionFlow{} }
func (m *WorldCupChampionFlow) String() string            { return proto.CompactTextString(m) }
func (*WorldCupChampionFlow) ProtoMessage()               {}
func (*WorldCupChampionFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{183} }

func (m *WorldCupChampionFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *WorldCupChampionFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *WorldCupChampionFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *WorldCupChampionFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *WorldCupChampionFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *WorldCupChampionFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *WorldCupChampionFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *WorldCupChampionFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *WorldCupChampionFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *WorldCupChampionFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *WorldCupChampionFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *WorldCupChampionFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *WorldCupChampionFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *WorldCupChampionFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *WorldCupChampionFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *WorldCupChampionFlow) GetTeamID() uint32 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *WorldCupChampionFlow) GetOdds() string {
	if m != nil {
		return m.Odds
	}
	return ""
}

// 世界杯胜负竞猜
type WorldCupMatchFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	MatchId          uint32 `protobuf:"varint,16,opt,name=MatchId" json:"MatchId"`
	Odds             string `protobuf:"bytes,17,opt,name=Odds" json:"Odds"`
	Kind             uint32 `protobuf:"varint,18,opt,name=Kind" json:"Kind"`
}

func (m *WorldCupMatchFlow) Reset()                    { *m = WorldCupMatchFlow{} }
func (m *WorldCupMatchFlow) String() string            { return proto.CompactTextString(m) }
func (*WorldCupMatchFlow) ProtoMessage()               {}
func (*WorldCupMatchFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{184} }

func (m *WorldCupMatchFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *WorldCupMatchFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *WorldCupMatchFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *WorldCupMatchFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *WorldCupMatchFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *WorldCupMatchFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *WorldCupMatchFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *WorldCupMatchFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *WorldCupMatchFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *WorldCupMatchFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *WorldCupMatchFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *WorldCupMatchFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *WorldCupMatchFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *WorldCupMatchFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *WorldCupMatchFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *WorldCupMatchFlow) GetMatchId() uint32 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *WorldCupMatchFlow) GetOdds() string {
	if m != nil {
		return m.Odds
	}
	return ""
}

func (m *WorldCupMatchFlow) GetKind() uint32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

// 任务列表
type TaskList struct {
	TaskItems []*TaskItem `protobuf:"bytes,1,rep,name=taskItems" json:"taskItems,omitempty"`
}

func (m *TaskList) Reset()                    { *m = TaskList{} }
func (m *TaskList) String() string            { return proto.CompactTextString(m) }
func (*TaskList) ProtoMessage()               {}
func (*TaskList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{185} }

func (m *TaskList) GetTaskItems() []*TaskItem {
	if m != nil {
		return m.TaskItems
	}
	return nil
}

// 奖励列表
type AwardList struct {
	Infos []*AwardInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
}

func (m *AwardList) Reset()                    { *m = AwardList{} }
func (m *AwardList) String() string            { return proto.CompactTextString(m) }
func (*AwardList) ProtoMessage()               {}
func (*AwardList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{186} }

func (m *AwardList) GetInfos() []*AwardInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

// 客户端上线后，服务器主动推送任务相关信息，客户端做缓存
type TaskDetail struct {
	Name_   string      `protobuf:"bytes,1,opt,name=name" json:"name"`
	WhatDay uint32      `protobuf:"varint,2,opt,name=whatDay" json:"whatDay"`
	Lists   []*TaskList `protobuf:"bytes,3,rep,name=lists" json:"lists,omitempty"`
}

func (m *TaskDetail) Reset()                    { *m = TaskDetail{} }
func (m *TaskDetail) String() string            { return proto.CompactTextString(m) }
func (*TaskDetail) ProtoMessage()               {}
func (*TaskDetail) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{187} }

func (m *TaskDetail) GetName_() string {
	if m != nil {
		return m.Name_
	}
	return ""
}

func (m *TaskDetail) GetWhatDay() uint32 {
	if m != nil {
		return m.WhatDay
	}
	return 0
}

func (m *TaskDetail) GetLists() []*TaskList {
	if m != nil {
		return m.Lists
	}
	return nil
}

// 特训任务详情
type SpecialTaskDetail struct {
	Detail       *TaskDetail `protobuf:"bytes,1,opt,name=detail" json:"detail,omitempty"`
	Enable       bool        `protobuf:"varint,2,opt,name=enable" json:"enable"`
	Medals       uint32      `protobuf:"varint,3,opt,name=medals" json:"medals"`
	Awards       *AwardList  `protobuf:"bytes,4,opt,name=awards" json:"awards,omitempty"`
	Replacements uint32      `protobuf:"varint,5,opt,name=replacements" json:"replacements"`
}

func (m *SpecialTaskDetail) Reset()                    { *m = SpecialTaskDetail{} }
func (m *SpecialTaskDetail) String() string            { return proto.CompactTextString(m) }
func (*SpecialTaskDetail) ProtoMessage()               {}
func (*SpecialTaskDetail) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{188} }

func (m *SpecialTaskDetail) GetDetail() *TaskDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (m *SpecialTaskDetail) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *SpecialTaskDetail) GetMedals() uint32 {
	if m != nil {
		return m.Medals
	}
	return 0
}

func (m *SpecialTaskDetail) GetAwards() *AwardList {
	if m != nil {
		return m.Awards
	}
	return nil
}

func (m *SpecialTaskDetail) GetReplacements() uint32 {
	if m != nil {
		return m.Replacements
	}
	return 0
}

// 任务tlog
type TaskFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	TaskName         string `protobuf:"bytes,16,opt,name=TaskName" json:"TaskName"`
	TaskType         uint32 `protobuf:"varint,17,opt,name=TaskType" json:"TaskType"`
	TaskItemID       uint32 `protobuf:"varint,18,opt,name=TaskItemID" json:"TaskItemID"`
	TaskItemFinished uint32 `protobuf:"varint,19,opt,name=TaskItemFinished" json:"TaskItemFinished"`
}

func (m *TaskFlow) Reset()                    { *m = TaskFlow{} }
func (m *TaskFlow) String() string            { return proto.CompactTextString(m) }
func (*TaskFlow) ProtoMessage()               {}
func (*TaskFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{189} }

func (m *TaskFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *TaskFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *TaskFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *TaskFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *TaskFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *TaskFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *TaskFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *TaskFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *TaskFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *TaskFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *TaskFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *TaskFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *TaskFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *TaskFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *TaskFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *TaskFlow) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *TaskFlow) GetTaskType() uint32 {
	if m != nil {
		return m.TaskType
	}
	return 0
}

func (m *TaskFlow) GetTaskItemID() uint32 {
	if m != nil {
		return m.TaskItemID
	}
	return 0
}

func (m *TaskFlow) GetTaskItemFinished() uint32 {
	if m != nil {
		return m.TaskItemFinished
	}
	return 0
}

// 聊天系统玩家信息
type ChaterInfo struct {
	Uid        uint64 `protobuf:"varint,1,opt,name=uid" json:"uid"`
	Name_      string `protobuf:"bytes,2,opt,name=name" json:"name"`
	Url        string `protobuf:"bytes,3,opt,name=url" json:"url"`
	Gender     uint32 `protobuf:"varint,4,opt,name=gender" json:"gender"`
	Level      uint32 `protobuf:"varint,5,opt,name=level" json:"level"`
	BattleTeam string `protobuf:"bytes,6,opt,name=battleTeam" json:"battleTeam"`
	NameColor  uint32 `protobuf:"varint,7,opt,name=nameColor" json:"nameColor"`
}

func (m *ChaterInfo) Reset()                    { *m = ChaterInfo{} }
func (m *ChaterInfo) String() string            { return proto.CompactTextString(m) }
func (*ChaterInfo) ProtoMessage()               {}
func (*ChaterInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{190} }

func (m *ChaterInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ChaterInfo) GetName_() string {
	if m != nil {
		return m.Name_
	}
	return ""
}

func (m *ChaterInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ChaterInfo) GetGender() uint32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *ChaterInfo) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ChaterInfo) GetBattleTeam() string {
	if m != nil {
		return m.BattleTeam
	}
	return ""
}

func (m *ChaterInfo) GetNameColor() uint32 {
	if m != nil {
		return m.NameColor
	}
	return 0
}

// 定制队伍
type TeamCustom struct {
	Id        uint64      `protobuf:"varint,1,opt,name=id" json:"id"`
	Info      *ChaterInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Typ       uint32      `protobuf:"varint,3,opt,name=typ" json:"typ"`
	Channel   uint32      `protobuf:"varint,4,opt,name=channel" json:"channel"`
	MatchMode uint32      `protobuf:"varint,5,opt,name=matchMode" json:"matchMode"`
	Mapid     uint32      `protobuf:"varint,6,opt,name=mapid" json:"mapid"`
	MatchTyp  uint32      `protobuf:"varint,7,opt,name=matchTyp" json:"matchTyp"`
	CurNum    uint32      `protobuf:"varint,8,opt,name=curNum" json:"curNum"`
	Tags      []uint32    `protobuf:"varint,9,rep,name=tags" json:"tags,omitempty"`
	Slogan    string      `protobuf:"bytes,10,opt,name=slogan" json:"slogan"`
}

func (m *TeamCustom) Reset()                    { *m = TeamCustom{} }
func (m *TeamCustom) String() string            { return proto.CompactTextString(m) }
func (*TeamCustom) ProtoMessage()               {}
func (*TeamCustom) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{191} }

func (m *TeamCustom) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TeamCustom) GetInfo() *ChaterInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *TeamCustom) GetTyp() uint32 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *TeamCustom) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *TeamCustom) GetMatchMode() uint32 {
	if m != nil {
		return m.MatchMode
	}
	return 0
}

func (m *TeamCustom) GetMapid() uint32 {
	if m != nil {
		return m.Mapid
	}
	return 0
}

func (m *TeamCustom) GetMatchTyp() uint32 {
	if m != nil {
		return m.MatchTyp
	}
	return 0
}

func (m *TeamCustom) GetCurNum() uint32 {
	if m != nil {
		return m.CurNum
	}
	return 0
}

func (m *TeamCustom) GetTags() []uint32 {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TeamCustom) GetSlogan() string {
	if m != nil {
		return m.Slogan
	}
	return ""
}

// 聊天详情
type ChatDetail struct {
	Info    *ChaterInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Channel uint32      `protobuf:"varint,2,opt,name=channel" json:"channel"`
	Content string      `protobuf:"bytes,3,opt,name=content" json:"content"`
	Trumpet bool        `protobuf:"varint,4,opt,name=trumpet" json:"trumpet"`
}

func (m *ChatDetail) Reset()                    { *m = ChatDetail{} }
func (m *ChatDetail) String() string            { return proto.CompactTextString(m) }
func (*ChatDetail) ProtoMessage()               {}
func (*ChatDetail) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{192} }

func (m *ChatDetail) GetInfo() *ChaterInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ChatDetail) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *ChatDetail) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ChatDetail) GetTrumpet() bool {
	if m != nil {
		return m.Trumpet
	}
	return false
}

// 聊天信息
type ChatInfo struct {
	Uid     uint64 `protobuf:"varint,1,opt,name=uid" json:"uid"`
	Stamp   uint64 `protobuf:"varint,2,opt,name=stamp" json:"stamp"`
	Content string `protobuf:"bytes,3,opt,name=content" json:"content"`
}

func (m *ChatInfo) Reset()                    { *m = ChatInfo{} }
func (m *ChatInfo) String() string            { return proto.CompactTextString(m) }
func (*ChatInfo) ProtoMessage()               {}
func (*ChatInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{193} }

func (m *ChatInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ChatInfo) GetStamp() uint64 {
	if m != nil {
		return m.Stamp
	}
	return 0
}

func (m *ChatInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// 未读聊天信息
type UnreadChatDetail struct {
	Infos []*ChatInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
}

func (m *UnreadChatDetail) Reset()                    { *m = UnreadChatDetail{} }
func (m *UnreadChatDetail) String() string            { return proto.CompactTextString(m) }
func (*UnreadChatDetail) ProtoMessage()               {}
func (*UnreadChatDetail) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{194} }

func (m *UnreadChatDetail) GetInfos() []*ChatInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

// 公告详情
type AnnouncementDetail struct {
	Uid       uint64 `protobuf:"varint,1,opt,name=uid" json:"uid"`
	Name_     string `protobuf:"bytes,2,opt,name=name" json:"name"`
	Typ       uint32 `protobuf:"varint,3,opt,name=typ" json:"typ"`
	Id        uint32 `protobuf:"varint,4,opt,name=id" json:"id"`
	Days      uint32 `protobuf:"varint,5,opt,name=days" json:"days"`
	Num       uint32 `protobuf:"varint,6,opt,name=num" json:"num"`
	NameColor uint32 `protobuf:"varint,7,opt,name=nameColor" json:"nameColor"`
}

func (m *AnnouncementDetail) Reset()                    { *m = AnnouncementDetail{} }
func (m *AnnouncementDetail) String() string            { return proto.CompactTextString(m) }
func (*AnnouncementDetail) ProtoMessage()               {}
func (*AnnouncementDetail) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{195} }

func (m *AnnouncementDetail) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *AnnouncementDetail) GetName_() string {
	if m != nil {
		return m.Name_
	}
	return ""
}

func (m *AnnouncementDetail) GetTyp() uint32 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *AnnouncementDetail) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AnnouncementDetail) GetDays() uint32 {
	if m != nil {
		return m.Days
	}
	return 0
}

func (m *AnnouncementDetail) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *AnnouncementDetail) GetNameColor() uint32 {
	if m != nil {
		return m.NameColor
	}
	return 0
}

// SkillPosition 技能对应的装备位置
type SkillPosition struct {
	Position uint32 `protobuf:"varint,1,opt,name=Position" json:"Position"`
	SkillID  uint32 `protobuf:"varint,2,opt,name=SkillID" json:"SkillID"`
}

func (m *SkillPosition) Reset()                    { *m = SkillPosition{} }
func (m *SkillPosition) String() string            { return proto.CompactTextString(m) }
func (*SkillPosition) ProtoMessage()               {}
func (*SkillPosition) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{196} }

func (m *SkillPosition) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *SkillPosition) GetSkillID() uint32 {
	if m != nil {
		return m.SkillID
	}
	return 0
}

// ModeSkillInfo 该模式技能信息
type ModeSkillInfo struct {
	ModeID       uint32           `protobuf:"varint,1,opt,name=ModeID" json:"ModeID"`
	InitiveSkill []*SkillPosition `protobuf:"bytes,2,rep,name=InitiveSkill" json:"InitiveSkill,omitempty"`
	PassiveSkill []*SkillPosition `protobuf:"bytes,3,rep,name=PassiveSkill" json:"PassiveSkill,omitempty"`
}

func (m *ModeSkillInfo) Reset()                    { *m = ModeSkillInfo{} }
func (m *ModeSkillInfo) String() string            { return proto.CompactTextString(m) }
func (*ModeSkillInfo) ProtoMessage()               {}
func (*ModeSkillInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{197} }

func (m *ModeSkillInfo) GetModeID() uint32 {
	if m != nil {
		return m.ModeID
	}
	return 0
}

func (m *ModeSkillInfo) GetInitiveSkill() []*SkillPosition {
	if m != nil {
		return m.InitiveSkill
	}
	return nil
}

func (m *ModeSkillInfo) GetPassiveSkill() []*SkillPosition {
	if m != nil {
		return m.PassiveSkill
	}
	return nil
}

// RoleSkillInfo 该角色的所有模式技能
type RoleSkillInfo struct {
	RoleID   uint32           `protobuf:"varint,1,opt,name=RoleID" json:"RoleID"`
	ModeList []*ModeSkillInfo `protobuf:"bytes,2,rep,name=ModeList" json:"ModeList,omitempty"`
}

func (m *RoleSkillInfo) Reset()                    { *m = RoleSkillInfo{} }
func (m *RoleSkillInfo) String() string            { return proto.CompactTextString(m) }
func (*RoleSkillInfo) ProtoMessage()               {}
func (*RoleSkillInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{198} }

func (m *RoleSkillInfo) GetRoleID() uint32 {
	if m != nil {
		return m.RoleID
	}
	return 0
}

func (m *RoleSkillInfo) GetModeList() []*ModeSkillInfo {
	if m != nil {
		return m.ModeList
	}
	return nil
}

// AllSkillList 所有角色技能list
type AllSkillList struct {
	List []*RoleSkillInfo `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
}

func (m *AllSkillList) Reset()                    { *m = AllSkillList{} }
func (m *AllSkillList) String() string            { return proto.CompactTextString(m) }
func (*AllSkillList) ProtoMessage()               {}
func (*AllSkillList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{199} }

func (m *AllSkillList) GetList() []*RoleSkillInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type SkillEffect struct {
	Id    uint32 `protobuf:"varint,1,opt,name=id" json:"id"`
	Value uint32 `protobuf:"varint,2,opt,name=value" json:"value"`
}

func (m *SkillEffect) Reset()                    { *m = SkillEffect{} }
func (m *SkillEffect) String() string            { return proto.CompactTextString(m) }
func (*SkillEffect) ProtoMessage()               {}
func (*SkillEffect) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{200} }

func (m *SkillEffect) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SkillEffect) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// SkillEffectList 技能效果list
type SkillEffectList struct {
	List []*SkillEffect `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
}

func (m *SkillEffectList) Reset()                    { *m = SkillEffectList{} }
func (m *SkillEffectList) String() string            { return proto.CompactTextString(m) }
func (*SkillEffectList) ProtoMessage()               {}
func (*SkillEffectList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{201} }

func (m *SkillEffectList) GetList() []*SkillEffect {
	if m != nil {
		return m.List
	}
	return nil
}

// 预约好友tlog
type BattleBookingFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	Booker           uint64 `protobuf:"varint,16,opt,name=booker" json:"booker"`
	BookTarget       uint64 `protobuf:"varint,17,opt,name=bookTarget" json:"bookTarget"`
	Resp             uint32 `protobuf:"varint,18,opt,name=resp" json:"resp"`
}

func (m *BattleBookingFlow) Reset()                    { *m = BattleBookingFlow{} }
func (m *BattleBookingFlow) String() string            { return proto.CompactTextString(m) }
func (*BattleBookingFlow) ProtoMessage()               {}
func (*BattleBookingFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{202} }

func (m *BattleBookingFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *BattleBookingFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *BattleBookingFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *BattleBookingFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *BattleBookingFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *BattleBookingFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *BattleBookingFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *BattleBookingFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *BattleBookingFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *BattleBookingFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *BattleBookingFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *BattleBookingFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *BattleBookingFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *BattleBookingFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *BattleBookingFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *BattleBookingFlow) GetBooker() uint64 {
	if m != nil {
		return m.Booker
	}
	return 0
}

func (m *BattleBookingFlow) GetBookTarget() uint64 {
	if m != nil {
		return m.BookTarget
	}
	return 0
}

func (m *BattleBookingFlow) GetResp() uint32 {
	if m != nil {
		return m.Resp
	}
	return 0
}

// 任务列表
type CommonTaskList struct {
	Id        uint32      `protobuf:"varint,1,opt,name=id" json:"id"`
	Enable    bool        `protobuf:"varint,2,opt,name=enable" json:"enable"`
	TaskItems []*TaskItem `protobuf:"bytes,3,rep,name=taskItems" json:"taskItems,omitempty"`
}

func (m *CommonTaskList) Reset()                    { *m = CommonTaskList{} }
func (m *CommonTaskList) String() string            { return proto.CompactTextString(m) }
func (*CommonTaskList) ProtoMessage()               {}
func (*CommonTaskList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{203} }

func (m *CommonTaskList) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CommonTaskList) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *CommonTaskList) GetTaskItems() []*TaskItem {
	if m != nil {
		return m.TaskItems
	}
	return nil
}

// 挑战任务详情
type ChallengeTaskDetail struct {
	Season       uint32            `protobuf:"varint,1,opt,name=season" json:"season"`
	LeftTime     uint32            `protobuf:"varint,2,opt,name=leftTime" json:"leftTime"`
	Grade        uint32            `protobuf:"varint,3,opt,name=grade" json:"grade"`
	Medals       uint32            `protobuf:"varint,4,opt,name=medals" json:"medals"`
	EliteEnable  bool              `protobuf:"varint,5,opt,name=eliteEnable" json:"eliteEnable"`
	List         []*CommonTaskList `protobuf:"bytes,6,rep,name=list" json:"list,omitempty"`
	NormalAwards *AwardList        `protobuf:"bytes,7,opt,name=normalAwards" json:"normalAwards,omitempty"`
	EliteAwards  *AwardList        `protobuf:"bytes,8,opt,name=eliteAwards" json:"eliteAwards,omitempty"`
}

func (m *ChallengeTaskDetail) Reset()                    { *m = ChallengeTaskDetail{} }
func (m *ChallengeTaskDetail) String() string            { return proto.CompactTextString(m) }
func (*ChallengeTaskDetail) ProtoMessage()               {}
func (*ChallengeTaskDetail) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{204} }

func (m *ChallengeTaskDetail) GetSeason() uint32 {
	if m != nil {
		return m.Season
	}
	return 0
}

func (m *ChallengeTaskDetail) GetLeftTime() uint32 {
	if m != nil {
		return m.LeftTime
	}
	return 0
}

func (m *ChallengeTaskDetail) GetGrade() uint32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

func (m *ChallengeTaskDetail) GetMedals() uint32 {
	if m != nil {
		return m.Medals
	}
	return 0
}

func (m *ChallengeTaskDetail) GetEliteEnable() bool {
	if m != nil {
		return m.EliteEnable
	}
	return false
}

func (m *ChallengeTaskDetail) GetList() []*CommonTaskList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ChallengeTaskDetail) GetNormalAwards() *AwardList {
	if m != nil {
		return m.NormalAwards
	}
	return nil
}

func (m *ChallengeTaskDetail) GetEliteAwards() *AwardList {
	if m != nil {
		return m.EliteAwards
	}
	return nil
}

// 预约好友信息
type BattleBookingInfo struct {
	Typ     uint32   `protobuf:"varint,1,opt,name=typ" json:"typ"`
	List    []uint64 `protobuf:"varint,2,rep,name=list" json:"list,omitempty"`
	Tmplist []uint64 `protobuf:"varint,3,rep,name=tmplist" json:"tmplist,omitempty"`
}

func (m *BattleBookingInfo) Reset()                    { *m = BattleBookingInfo{} }
func (m *BattleBookingInfo) String() string            { return proto.CompactTextString(m) }
func (*BattleBookingInfo) ProtoMessage()               {}
func (*BattleBookingInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{205} }

func (m *BattleBookingInfo) GetTyp() uint32 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *BattleBookingInfo) GetList() []uint64 {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *BattleBookingInfo) GetTmplist() []uint64 {
	if m != nil {
		return m.Tmplist
	}
	return nil
}

// 特训经验tlog
type SpecialExpFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	SpecialExp       uint32 `protobuf:"varint,16,opt,name=SpecialExp" json:"SpecialExp"`
}

func (m *SpecialExpFlow) Reset()                    { *m = SpecialExpFlow{} }
func (m *SpecialExpFlow) String() string            { return proto.CompactTextString(m) }
func (*SpecialExpFlow) ProtoMessage()               {}
func (*SpecialExpFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{206} }

func (m *SpecialExpFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *SpecialExpFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *SpecialExpFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *SpecialExpFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *SpecialExpFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *SpecialExpFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *SpecialExpFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *SpecialExpFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *SpecialExpFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *SpecialExpFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *SpecialExpFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *SpecialExpFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *SpecialExpFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *SpecialExpFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *SpecialExpFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *SpecialExpFlow) GetSpecialExp() uint32 {
	if m != nil {
		return m.SpecialExp
	}
	return 0
}

// WatchFlow 好友观战记录表
type WatchFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	WatchType        uint32 `protobuf:"varint,16,opt,name=WatchType" json:"WatchType"`
	WatchID          uint64 `protobuf:"varint,17,opt,name=WatchID" json:"WatchID"`
	BeWatchID        uint64 `protobuf:"varint,18,opt,name=BeWatchID" json:"BeWatchID"`
	BeWatchName      string `protobuf:"bytes,19,opt,name=BeWatchName" json:"BeWatchName"`
	BattleID         uint64 `protobuf:"varint,20,opt,name=BattleID" json:"BattleID"`
	WatchNum         uint32 `protobuf:"varint,21,opt,name=WatchNum" json:"WatchNum"`
	WatchTime        uint32 `protobuf:"varint,22,opt,name=WatchTime" json:"WatchTime"`
	Loading          uint32 `protobuf:"varint,23,opt,name=Loading" json:"Loading"`
}

func (m *WatchFlow) Reset()                    { *m = WatchFlow{} }
func (m *WatchFlow) String() string            { return proto.CompactTextString(m) }
func (*WatchFlow) ProtoMessage()               {}
func (*WatchFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{207} }

func (m *WatchFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *WatchFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *WatchFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *WatchFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *WatchFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *WatchFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *WatchFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *WatchFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *WatchFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *WatchFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *WatchFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *WatchFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *WatchFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *WatchFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *WatchFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *WatchFlow) GetWatchType() uint32 {
	if m != nil {
		return m.WatchType
	}
	return 0
}

func (m *WatchFlow) GetWatchID() uint64 {
	if m != nil {
		return m.WatchID
	}
	return 0
}

func (m *WatchFlow) GetBeWatchID() uint64 {
	if m != nil {
		return m.BeWatchID
	}
	return 0
}

func (m *WatchFlow) GetBeWatchName() string {
	if m != nil {
		return m.BeWatchName
	}
	return ""
}

func (m *WatchFlow) GetBattleID() uint64 {
	if m != nil {
		return m.BattleID
	}
	return 0
}

func (m *WatchFlow) GetWatchNum() uint32 {
	if m != nil {
		return m.WatchNum
	}
	return 0
}

func (m *WatchFlow) GetWatchTime() uint32 {
	if m != nil {
		return m.WatchTime
	}
	return 0
}

func (m *WatchFlow) GetLoading() uint32 {
	if m != nil {
		return m.Loading
	}
	return 0
}

// uint32数组
type Uint32Array struct {
	List []uint32 `protobuf:"varint,1,rep,name=list" json:"list,omitempty"`
}

func (m *Uint32Array) Reset()                    { *m = Uint32Array{} }
func (m *Uint32Array) String() string            { return proto.CompactTextString(m) }
func (*Uint32Array) ProtoMessage()               {}
func (*Uint32Array) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{208} }

func (m *Uint32Array) GetList() []uint32 {
	if m != nil {
		return m.List
	}
	return nil
}

// 月卡tlog
type MonthCardFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	BeginTime        int64  `protobuf:"varint,16,opt,name=BeginTime" json:"BeginTime"`
	EndTime          int64  `protobuf:"varint,17,opt,name=EndTime" json:"EndTime"`
}

func (m *MonthCardFlow) Reset()                    { *m = MonthCardFlow{} }
func (m *MonthCardFlow) String() string            { return proto.CompactTextString(m) }
func (*MonthCardFlow) ProtoMessage()               {}
func (*MonthCardFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{209} }

func (m *MonthCardFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *MonthCardFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *MonthCardFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *MonthCardFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *MonthCardFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *MonthCardFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *MonthCardFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *MonthCardFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *MonthCardFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MonthCardFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *MonthCardFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *MonthCardFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *MonthCardFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *MonthCardFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *MonthCardFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *MonthCardFlow) GetBeginTime() int64 {
	if m != nil {
		return m.BeginTime
	}
	return 0
}

func (m *MonthCardFlow) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type RedDotOnce struct {
	ID  uint32 `protobuf:"varint,1,opt,name=ID" json:"ID"`
	Dot uint32 `protobuf:"varint,2,opt,name=Dot" json:"Dot"`
}

func (m *RedDotOnce) Reset()                    { *m = RedDotOnce{} }
func (m *RedDotOnce) String() string            { return proto.CompactTextString(m) }
func (*RedDotOnce) ProtoMessage()               {}
func (*RedDotOnce) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{210} }

func (m *RedDotOnce) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RedDotOnce) GetDot() uint32 {
	if m != nil {
		return m.Dot
	}
	return 0
}

// RedDotList 一次行点击类红点列表
type RedDotList struct {
	List []*RedDotOnce `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
}

func (m *RedDotList) Reset()                    { *m = RedDotList{} }
func (m *RedDotList) String() string            { return proto.CompactTextString(m) }
func (*RedDotList) ProtoMessage()               {}
func (*RedDotList) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{211} }

func (m *RedDotList) GetList() []*RedDotOnce {
	if m != nil {
		return m.List
	}
	return nil
}

// 赛季经验tlog
type SeasonExpFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	SeasonExp        uint32 `protobuf:"varint,16,opt,name=SeasonExp" json:"SeasonExp"`
}

func (m *SeasonExpFlow) Reset()                    { *m = SeasonExpFlow{} }
func (m *SeasonExpFlow) String() string            { return proto.CompactTextString(m) }
func (*SeasonExpFlow) ProtoMessage()               {}
func (*SeasonExpFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{212} }

func (m *SeasonExpFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *SeasonExpFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *SeasonExpFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *SeasonExpFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *SeasonExpFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *SeasonExpFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *SeasonExpFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *SeasonExpFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *SeasonExpFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *SeasonExpFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *SeasonExpFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *SeasonExpFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *SeasonExpFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *SeasonExpFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *SeasonExpFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *SeasonExpFlow) GetSeasonExp() uint32 {
	if m != nil {
		return m.SeasonExp
	}
	return 0
}

// 技能tlog
type SkillUseFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	MatchMode        uint32 `protobuf:"varint,16,opt,name=MatchMode" json:"MatchMode"`
	InitiveSkillID   uint32 `protobuf:"varint,17,opt,name=InitiveSkillID" json:"InitiveSkillID"`
	PassiveSkillID   uint32 `protobuf:"varint,18,opt,name=PassiveSkillID" json:"PassiveSkillID"`
}

func (m *SkillUseFlow) Reset()                    { *m = SkillUseFlow{} }
func (m *SkillUseFlow) String() string            { return proto.CompactTextString(m) }
func (*SkillUseFlow) ProtoMessage()               {}
func (*SkillUseFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{213} }

func (m *SkillUseFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *SkillUseFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *SkillUseFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *SkillUseFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *SkillUseFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *SkillUseFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *SkillUseFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *SkillUseFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *SkillUseFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *SkillUseFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *SkillUseFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *SkillUseFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *SkillUseFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *SkillUseFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *SkillUseFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *SkillUseFlow) GetMatchMode() uint32 {
	if m != nil {
		return m.MatchMode
	}
	return 0
}

func (m *SkillUseFlow) GetInitiveSkillID() uint32 {
	if m != nil {
		return m.InitiveSkillID
	}
	return 0
}

func (m *SkillUseFlow) GetPassiveSkillID() uint32 {
	if m != nil {
		return m.PassiveSkillID
	}
	return 0
}

// 购买道具tlog
type BuyGoodsFlow struct {
	GameSvrID        string `protobuf:"bytes,1,opt,name=GameSvrID" json:"GameSvrID"`
	DtEventTime      string `protobuf:"bytes,2,opt,name=DtEventTime" json:"DtEventTime"`
	VGameAppID       string `protobuf:"bytes,3,opt,name=VGameAppID" json:"VGameAppID"`
	PlatID           uint32 `protobuf:"varint,4,opt,name=PlatID" json:"PlatID"`
	IZoneAreaID      uint32 `protobuf:"varint,5,opt,name=IZoneAreaID" json:"IZoneAreaID"`
	VOpenID          string `protobuf:"bytes,6,opt,name=VOpenID" json:"VOpenID"`
	VRoleName        string `protobuf:"bytes,7,opt,name=VRoleName" json:"VRoleName"`
	VRoleProfession  uint32 `protobuf:"varint,8,opt,name=VRoleProfession" json:"VRoleProfession"`
	Level            uint32 `protobuf:"varint,9,opt,name=Level" json:"Level"`
	PlayerFriendsNum uint32 `protobuf:"varint,10,opt,name=PlayerFriendsNum" json:"PlayerFriendsNum"`
	ClientVersion    string `protobuf:"bytes,11,opt,name=ClientVersion" json:"ClientVersion"`
	SystemHardware   string `protobuf:"bytes,12,opt,name=SystemHardware" json:"SystemHardware"`
	TelecomOper      string `protobuf:"bytes,13,opt,name=TelecomOper" json:"TelecomOper"`
	Network          string `protobuf:"bytes,14,opt,name=Network" json:"Network"`
	LoginChannel     uint32 `protobuf:"varint,15,opt,name=LoginChannel" json:"LoginChannel"`
	BillNo           string `protobuf:"bytes,16,opt,name=BillNo" json:"BillNo"`
	IMoneyType       uint32 `protobuf:"varint,17,opt,name=iMoneyType" json:"iMoneyType"`
	IMoney           uint32 `protobuf:"varint,18,opt,name=iMoney" json:"iMoney"`
	SuccGoods        string `protobuf:"bytes,19,opt,name=SuccGoods" json:"SuccGoods"`
	FailGoods        string `protobuf:"bytes,20,opt,name=FailGoods" json:"FailGoods"`
	SuccBuy          uint32 `protobuf:"varint,21,opt,name=SuccBuy" json:"SuccBuy"`
	SuccRoll         uint32 `protobuf:"varint,22,opt,name=SuccRoll" json:"SuccRoll"`
}

func (m *BuyGoodsFlow) Reset()                    { *m = BuyGoodsFlow{} }
func (m *BuyGoodsFlow) String() string            { return proto.CompactTextString(m) }
func (*BuyGoodsFlow) ProtoMessage()               {}
func (*BuyGoodsFlow) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{214} }

func (m *BuyGoodsFlow) GetGameSvrID() string {
	if m != nil {
		return m.GameSvrID
	}
	return ""
}

func (m *BuyGoodsFlow) GetDtEventTime() string {
	if m != nil {
		return m.DtEventTime
	}
	return ""
}

func (m *BuyGoodsFlow) GetVGameAppID() string {
	if m != nil {
		return m.VGameAppID
	}
	return ""
}

func (m *BuyGoodsFlow) GetPlatID() uint32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *BuyGoodsFlow) GetIZoneAreaID() uint32 {
	if m != nil {
		return m.IZoneAreaID
	}
	return 0
}

func (m *BuyGoodsFlow) GetVOpenID() string {
	if m != nil {
		return m.VOpenID
	}
	return ""
}

func (m *BuyGoodsFlow) GetVRoleName() string {
	if m != nil {
		return m.VRoleName
	}
	return ""
}

func (m *BuyGoodsFlow) GetVRoleProfession() uint32 {
	if m != nil {
		return m.VRoleProfession
	}
	return 0
}

func (m *BuyGoodsFlow) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *BuyGoodsFlow) GetPlayerFriendsNum() uint32 {
	if m != nil {
		return m.PlayerFriendsNum
	}
	return 0
}

func (m *BuyGoodsFlow) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *BuyGoodsFlow) GetSystemHardware() string {
	if m != nil {
		return m.SystemHardware
	}
	return ""
}

func (m *BuyGoodsFlow) GetTelecomOper() string {
	if m != nil {
		return m.TelecomOper
	}
	return ""
}

func (m *BuyGoodsFlow) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *BuyGoodsFlow) GetLoginChannel() uint32 {
	if m != nil {
		return m.LoginChannel
	}
	return 0
}

func (m *BuyGoodsFlow) GetBillNo() string {
	if m != nil {
		return m.BillNo
	}
	return ""
}

func (m *BuyGoodsFlow) GetIMoneyType() uint32 {
	if m != nil {
		return m.IMoneyType
	}
	return 0
}

func (m *BuyGoodsFlow) GetIMoney() uint32 {
	if m != nil {
		return m.IMoney
	}
	return 0
}

func (m *BuyGoodsFlow) GetSuccGoods() string {
	if m != nil {
		return m.SuccGoods
	}
	return ""
}

func (m *BuyGoodsFlow) GetFailGoods() string {
	if m != nil {
		return m.FailGoods
	}
	return ""
}

func (m *BuyGoodsFlow) GetSuccBuy() uint32 {
	if m != nil {
		return m.SuccBuy
	}
	return 0
}

func (m *BuyGoodsFlow) GetSuccRoll() uint32 {
	if m != nil {
		return m.SuccRoll
	}
	return 0
}

func init() {
	proto.RegisterType((*UserMainDataNotify)(nil), "protoMsg.UserMainDataNotify")
	proto.RegisterType((*Vector3)(nil), "protoMsg.Vector3")
	proto.RegisterType((*T_Object)(nil), "protoMsg.T_Object")
	proto.RegisterType((*ChracterMapDataInfo)(nil), "protoMsg.ChracterMapDataInfo")
	proto.RegisterType((*RefreshObjectNotify)(nil), "protoMsg.RefreshObjectNotify")
	proto.RegisterType((*UseObjectReq)(nil), "protoMsg.UseObjectReq")
	proto.RegisterType((*RemoveObjectNotify)(nil), "protoMsg.RemoveObjectNotify")
	proto.RegisterType((*RefreshGunNotify)(nil), "protoMsg.RefreshGunNotify")
	proto.RegisterType((*DropGunNotify)(nil), "protoMsg.DropGunNotify")
	proto.RegisterType((*ExchangeGunReq)(nil), "protoMsg.ExchangeGunReq")
	proto.RegisterType((*ExchangeGunRet)(nil), "protoMsg.ExchangeGunRet")
	proto.RegisterType((*GunReformReq)(nil), "protoMsg.GunReformReq")
	proto.RegisterType((*GunReformUnequipReq)(nil), "protoMsg.GunReformUnequipReq")
	proto.RegisterType((*AttackReq)(nil), "protoMsg.AttackReq")
	proto.RegisterType((*ShootReq)(nil), "protoMsg.ShootReq")
	proto.RegisterType((*MapCharacterResultNotify)(nil), "protoMsg.MapCharacterResultNotify")
	proto.RegisterType((*ChatNotify)(nil), "protoMsg.ChatNotify")
	proto.RegisterType((*ZoneNotify)(nil), "protoMsg.ZoneNotify")
	proto.RegisterType((*ChangeBulletReq)(nil), "protoMsg.ChangeBulletReq")
	proto.RegisterType((*ChangeBulletRet)(nil), "protoMsg.ChangeBulletRet")
	proto.RegisterType((*TeamMemberInfo)(nil), "protoMsg.TeamMemberInfo")
	proto.RegisterType((*SyncTeamInfoRet)(nil), "protoMsg.SyncTeamInfoRet")
	proto.RegisterType((*RefreshPackCellNotify)(nil), "protoMsg.RefreshPackCellNotify")
	proto.RegisterType((*SummonAINotify)(nil), "protoMsg.SummonAINotify")
	proto.RegisterType((*RefreshGunBulletNotify)(nil), "protoMsg.RefreshGunBulletNotify")
	proto.RegisterType((*InitRoomTeamPlayerItem)(nil), "protoMsg.InitRoomTeamPlayerItem")
	proto.RegisterType((*InitRoomTeamInfoRet)(nil), "protoMsg.InitRoomTeamInfoRet")
	proto.RegisterType((*SyncRoomTeamPlayerItem)(nil), "protoMsg.SyncRoomTeamPlayerItem")
	proto.RegisterType((*SymcRoomTeamInfoRet)(nil), "protoMsg.SymcRoomTeamInfoRet")
	proto.RegisterType((*DieNotifyRet)(nil), "protoMsg.DieNotifyRet")
	proto.RegisterType((*CopilotData)(nil), "protoMsg.CopilotData")
	proto.RegisterType((*VehicleProp)(nil), "protoMsg.VehicleProp")
	proto.RegisterType((*ItemProp)(nil), "protoMsg.ItemProp")
	proto.RegisterType((*RefreshBoxObjNotify)(nil), "protoMsg.RefreshBoxObjNotify")
	proto.RegisterType((*HeadProp)(nil), "protoMsg.HeadProp")
	proto.RegisterType((*BodyProp)(nil), "protoMsg.BodyProp")
	proto.RegisterType((*BackPackProp)(nil), "protoMsg.BackPackProp")
	proto.RegisterType((*PlayerRegister)(nil), "protoMsg.PlayerRegister")
	proto.RegisterType((*PlayerLogin)(nil), "protoMsg.PlayerLogin")
	proto.RegisterType((*PlayerLogout)(nil), "protoMsg.PlayerLogout")
	proto.RegisterType((*MailObject)(nil), "protoMsg.MailObject")
	proto.RegisterType((*MailInfo)(nil), "protoMsg.MailInfo")
	proto.RegisterType((*MailInfoList)(nil), "protoMsg.MailInfoList")
	proto.RegisterType((*ReqGetMailList)(nil), "protoMsg.ReqGetMailList")
	proto.RegisterType((*RetMailList)(nil), "protoMsg.RetMailList")
	proto.RegisterType((*ReqMailInfo)(nil), "protoMsg.ReqMailInfo")
	proto.RegisterType((*RetMailInfo)(nil), "protoMsg.RetMailInfo")
	proto.RegisterType((*DelMail)(nil), "protoMsg.DelMail")
	proto.RegisterType((*GetMailObj)(nil), "protoMsg.GetMailObj")
	proto.RegisterType((*AnnuonceInfo)(nil), "protoMsg.AnnuonceInfo")
	proto.RegisterType((*InitAnnuonceInfoRet)(nil), "protoMsg.InitAnnuonceInfoRet")
	proto.RegisterType((*FriendInfo)(nil), "protoMsg.FriendInfo")
	proto.RegisterType((*PlatFriendStateReq)(nil), "protoMsg.PlatFriendStateReq")
	proto.RegisterType((*PlatFriendState)(nil), "protoMsg.PlatFriendState")
	proto.RegisterType((*PlatFriendStateRet)(nil), "protoMsg.PlatFriendStateRet")
	proto.RegisterType((*FriendRankInfo)(nil), "protoMsg.FriendRankInfo")
	proto.RegisterType((*SyncFriendRankList)(nil), "protoMsg.SyncFriendRankList")
	proto.RegisterType((*SyncFriendList)(nil), "protoMsg.SyncFriendList")
	proto.RegisterType((*FriendApplyInfo)(nil), "protoMsg.FriendApplyInfo")
	proto.RegisterType((*SyncFriendApplyList)(nil), "protoMsg.SyncFriendApplyList")
	proto.RegisterType((*DoSendItemReq)(nil), "protoMsg.DoSendItemReq")
	proto.RegisterType((*GameSvrState)(nil), "protoMsg.GameSvrState")
	proto.RegisterType((*RoundFlow)(nil), "protoMsg.RoundFlow")
	proto.RegisterType((*CareerData)(nil), "protoMsg.CareerData")
	proto.RegisterType((*CareerBase)(nil), "protoMsg.CareerBase")
	proto.RegisterType((*MatchRecord)(nil), "protoMsg.MatchRecord")
	proto.RegisterType((*DayRecordData)(nil), "protoMsg.DayRecordData")
	proto.RegisterType((*SettleDayData)(nil), "protoMsg.SettleDayData")
	proto.RegisterType((*DayTag)(nil), "protoMsg.DayTag")
	proto.RegisterType((*VehiclePhysics)(nil), "protoMsg.VehiclePhysics")
	proto.RegisterType((*Vehicle)(nil), "protoMsg.Vehicle")
	proto.RegisterType((*DamageDefend)(nil), "protoMsg.DamageDefend")
	proto.RegisterType((*ThrowDamageInfo)(nil), "protoMsg.ThrowDamageInfo")
	proto.RegisterType((*DoorList)(nil), "protoMsg.DoorList")
	proto.RegisterType((*DoorData)(nil), "protoMsg.DoorData")
	proto.RegisterType((*LogItem)(nil), "protoMsg.LogItem")
	proto.RegisterType((*SpaceLogInfo)(nil), "protoMsg.SpaceLogInfo")
	proto.RegisterType((*GuideFlow)(nil), "protoMsg.GuideFlow")
	proto.RegisterType((*ChatFlow)(nil), "protoMsg.ChatFlow")
	proto.RegisterType((*BattleItemFlow)(nil), "protoMsg.BattleItemFlow")
	proto.RegisterType((*BattleFlow)(nil), "protoMsg.BattleFlow")
	proto.RegisterType((*BattleResult)(nil), "protoMsg.BattleResult")
	proto.RegisterType((*MatchFlow)(nil), "protoMsg.MatchFlow")
	proto.RegisterType((*LiveFlow)(nil), "protoMsg.LiveFlow")
	proto.RegisterType((*GunFlow)(nil), "protoMsg.GunFlow")
	proto.RegisterType((*CampFlow)(nil), "protoMsg.CampFlow")
	proto.RegisterType((*ShopFlow)(nil), "protoMsg.ShopFlow")
	proto.RegisterType((*OperFlow)(nil), "protoMsg.OperFlow")
	proto.RegisterType((*MoneyFlow)(nil), "protoMsg.MoneyFlow")
	proto.RegisterType((*SnsFlow)(nil), "protoMsg.SnsFlow")
	proto.RegisterType((*SecGameStartFlow)(nil), "protoMsg.SecGameStartFlow")
	proto.RegisterType((*SecGameEndFlow)(nil), "protoMsg.SecGameEndFlow")
	proto.RegisterType((*ShareRMBMoney)(nil), "protoMsg.ShareRMBMoney")
	proto.RegisterType((*OwnGoodsItem)(nil), "protoMsg.OwnGoodsItem")
	proto.RegisterType((*OwnGoodsInfo)(nil), "protoMsg.OwnGoodsInfo")
	proto.RegisterType((*MemVoiceInfo)(nil), "protoMsg.MemVoiceInfo")
	proto.RegisterType((*TeamVoiceInfo)(nil), "protoMsg.TeamVoiceInfo")
	proto.RegisterType((*SettleMemInfo)(nil), "protoMsg.SettleMemInfo")
	proto.RegisterType((*SettleInfo)(nil), "protoMsg.SettleInfo")
	proto.RegisterType((*RefreshObjectListNotify)(nil), "protoMsg.RefreshObjectListNotify")
	proto.RegisterType((*StrangerList)(nil), "protoMsg.StrangerList")
	proto.RegisterType((*ReConnetionFlow)(nil), "protoMsg.ReConnetionFlow")
	proto.RegisterType((*DropBoxInfo)(nil), "protoMsg.DropBoxInfo")
	proto.RegisterType((*DropBoxList)(nil), "protoMsg.DropBoxList")
	proto.RegisterType((*ItemFlow)(nil), "protoMsg.ItemFlow")
	proto.RegisterType((*ModeInfo)(nil), "protoMsg.ModeInfo")
	proto.RegisterType((*MatchModeNotify)(nil), "protoMsg.MatchModeNotify")
	proto.RegisterType((*ActivityState)(nil), "protoMsg.ActivityState")
	proto.RegisterType((*ActivitysInfo)(nil), "protoMsg.ActivitysInfo")
	proto.RegisterType((*MedalDataItem)(nil), "protoMsg.MedalDataItem")
	proto.RegisterType((*MedalDataList)(nil), "protoMsg.MedalDataList")
	proto.RegisterType((*KillDrop)(nil), "protoMsg.KillDrop")
	proto.RegisterType((*KillDropList)(nil), "protoMsg.KillDropList")
	proto.RegisterType((*GoodRecordFlow)(nil), "protoMsg.GoodRecordFlow")
	proto.RegisterType((*GoodsTimeLeft)(nil), "protoMsg.GoodsTimeLeft")
	proto.RegisterType((*GoodsTimeLeftNotify)(nil), "protoMsg.GoodsTimeLeftNotify")
	proto.RegisterType((*NewYearGood)(nil), "protoMsg.NewYearGood")
	proto.RegisterType((*NewYearInfo)(nil), "protoMsg.NewYearInfo")
	proto.RegisterType((*AchievementFlow)(nil), "protoMsg.AchievementFlow")
	proto.RegisterType((*InsigniaFlow)(nil), "protoMsg.InsigniaFlow")
	proto.RegisterType((*Achievement)(nil), "protoMsg.Achievement")
	proto.RegisterType((*AchievementProcess)(nil), "protoMsg.AchievementProcess")
	proto.RegisterType((*AchievmentInfo)(nil), "protoMsg.AchievmentInfo")
	proto.RegisterType((*Insignia)(nil), "protoMsg.Insignia")
	proto.RegisterType((*InsigniaInfo)(nil), "protoMsg.InsigniaInfo")
	proto.RegisterType((*AwardItem)(nil), "protoMsg.AwardItem")
	proto.RegisterType((*SeasonAwards)(nil), "protoMsg.SeasonAwards")
	proto.RegisterType((*WearInGame)(nil), "protoMsg.WearInGame")
	proto.RegisterType((*WearInGameFlow)(nil), "protoMsg.WearInGameFlow")
	proto.RegisterType((*EliteWeaponPos)(nil), "protoMsg.EliteWeaponPos")
	proto.RegisterType((*EliteWeaponPosList)(nil), "protoMsg.EliteWeaponPosList")
	proto.RegisterType((*DropBoxPos)(nil), "protoMsg.DropBoxPos")
	proto.RegisterType((*DropBoxPosList)(nil), "protoMsg.DropBoxPosList")
	proto.RegisterType((*TreasureBoxInfo)(nil), "protoMsg.TreasureBoxInfo")
	proto.RegisterType((*TreasureBoxList)(nil), "protoMsg.TreasureBoxList")
	proto.RegisterType((*TreasureBoxFlow)(nil), "protoMsg.TreasureBoxFlow")
	proto.RegisterType((*MilitaryRankFlow)(nil), "protoMsg.MilitaryRankFlow")
	proto.RegisterType((*TaskItem)(nil), "protoMsg.TaskItem")
	proto.RegisterType((*TaskUpdate)(nil), "protoMsg.TaskUpdate")
	proto.RegisterType((*ActiveAwardsBox)(nil), "protoMsg.ActiveAwardsBox")
	proto.RegisterType((*DayTaskDetail)(nil), "protoMsg.DayTaskDetail")
	proto.RegisterType((*DayTaskFlow)(nil), "protoMsg.DayTaskFlow")
	proto.RegisterType((*ActivenessFlow)(nil), "protoMsg.ActivenessFlow")
	proto.RegisterType((*ComradeTaskFlow)(nil), "protoMsg.ComradeTaskFlow")
	proto.RegisterType((*PlayerPos)(nil), "protoMsg.PlayerPos")
	proto.RegisterType((*PlayerPosList)(nil), "protoMsg.PlayerPosList")
	proto.RegisterType((*FollowInfo)(nil), "protoMsg.FollowInfo")
	proto.RegisterType((*FollowDetail)(nil), "protoMsg.FollowDetail")
	proto.RegisterType((*ShellExplodeNotify)(nil), "protoMsg.ShellExplodeNotify")
	proto.RegisterType((*AwardInfo)(nil), "protoMsg.AwardInfo")
	proto.RegisterType((*OldBringNewDetail)(nil), "protoMsg.OldBringNewDetail")
	proto.RegisterType((*ComradeTaskDetail)(nil), "protoMsg.ComradeTaskDetail")
	proto.RegisterType((*VeteranInfo)(nil), "protoMsg.VeteranInfo")
	proto.RegisterType((*VeteranRecallList)(nil), "protoMsg.VeteranRecallList")
	proto.RegisterType((*VeteranRecallReward)(nil), "protoMsg.VeteranRecallReward")
	proto.RegisterType((*WeaponInfo)(nil), "protoMsg.WeaponInfo")
	proto.RegisterType((*WeaponInGame)(nil), "protoMsg.WeaponInGame")
	proto.RegisterType((*VehicleFullNotify)(nil), "protoMsg.VehicleFullNotify")
	proto.RegisterType((*PreferenceInfo)(nil), "protoMsg.PreferenceInfo")
	proto.RegisterType((*PreferenceList)(nil), "protoMsg.PreferenceList")
	proto.RegisterType((*PreferenceFlow)(nil), "protoMsg.PreferenceFlow")
	proto.RegisterType((*GameRecordDetail)(nil), "protoMsg.GameRecordDetail")
	proto.RegisterType((*ContestInfo)(nil), "protoMsg.ContestInfo")
	proto.RegisterType((*ChampionContestInfo)(nil), "protoMsg.ChampionContestInfo")
	proto.RegisterType((*OddsInfo)(nil), "protoMsg.OddsInfo")
	proto.RegisterType((*ChampionOddsInfo)(nil), "protoMsg.ChampionOddsInfo")
	proto.RegisterType((*ContestRecord)(nil), "protoMsg.ContestRecord")
	proto.RegisterType((*ChampionContestRecord)(nil), "protoMsg.ChampionContestRecord")
	proto.RegisterType((*WorldCupMatch)(nil), "protoMsg.WorldCupMatch")
	proto.RegisterType((*WorldCupMatchInfo)(nil), "protoMsg.WorldCupMatchInfo")
	proto.RegisterType((*WorldCupMatchRecord)(nil), "protoMsg.WorldCupMatchRecord")
	proto.RegisterType((*WorldCupMatchRecordInfo)(nil), "protoMsg.WorldCupMatchRecordInfo")
	proto.RegisterType((*FestivalInfo)(nil), "protoMsg.FestivalInfo")
	proto.RegisterType((*FestivalList)(nil), "protoMsg.FestivalList")
	proto.RegisterType((*ExchangeInfo)(nil), "protoMsg.ExchangeInfo")
	proto.RegisterType((*ExchangeList)(nil), "protoMsg.ExchangeList")
	proto.RegisterType((*ExchangeTotalList)(nil), "protoMsg.ExchangeTotalList")
	proto.RegisterType((*FestivalFlow)(nil), "protoMsg.FestivalFlow")
	proto.RegisterType((*ExchangeFlow)(nil), "protoMsg.ExchangeFlow")
	proto.RegisterType((*BallStarReward)(nil), "protoMsg.BallStarReward")
	proto.RegisterType((*BallStarInfo)(nil), "protoMsg.BallStarInfo")
	proto.RegisterType((*BallStarFlow)(nil), "protoMsg.BallStarFlow")
	proto.RegisterType((*CheaterReportFlow)(nil), "protoMsg.CheaterReportFlow")
	proto.RegisterType((*WorldCupChampionFlow)(nil), "protoMsg.WorldCupChampionFlow")
	proto.RegisterType((*WorldCupMatchFlow)(nil), "protoMsg.WorldCupMatchFlow")
	proto.RegisterType((*TaskList)(nil), "protoMsg.TaskList")
	proto.RegisterType((*AwardList)(nil), "protoMsg.AwardList")
	proto.RegisterType((*TaskDetail)(nil), "protoMsg.TaskDetail")
	proto.RegisterType((*SpecialTaskDetail)(nil), "protoMsg.SpecialTaskDetail")
	proto.RegisterType((*TaskFlow)(nil), "protoMsg.TaskFlow")
	proto.RegisterType((*ChaterInfo)(nil), "protoMsg.ChaterInfo")
	proto.RegisterType((*TeamCustom)(nil), "protoMsg.TeamCustom")
	proto.RegisterType((*ChatDetail)(nil), "protoMsg.ChatDetail")
	proto.RegisterType((*ChatInfo)(nil), "protoMsg.ChatInfo")
	proto.RegisterType((*UnreadChatDetail)(nil), "protoMsg.UnreadChatDetail")
	proto.RegisterType((*AnnouncementDetail)(nil), "protoMsg.AnnouncementDetail")
	proto.RegisterType((*SkillPosition)(nil), "protoMsg.SkillPosition")
	proto.RegisterType((*ModeSkillInfo)(nil), "protoMsg.ModeSkillInfo")
	proto.RegisterType((*RoleSkillInfo)(nil), "protoMsg.RoleSkillInfo")
	proto.RegisterType((*AllSkillList)(nil), "protoMsg.AllSkillList")
	proto.RegisterType((*SkillEffect)(nil), "protoMsg.SkillEffect")
	proto.RegisterType((*SkillEffectList)(nil), "protoMsg.SkillEffectList")
	proto.RegisterType((*BattleBookingFlow)(nil), "protoMsg.BattleBookingFlow")
	proto.RegisterType((*CommonTaskList)(nil), "protoMsg.CommonTaskList")
	proto.RegisterType((*ChallengeTaskDetail)(nil), "protoMsg.ChallengeTaskDetail")
	proto.RegisterType((*BattleBookingInfo)(nil), "protoMsg.BattleBookingInfo")
	proto.RegisterType((*SpecialExpFlow)(nil), "protoMsg.SpecialExpFlow")
	proto.RegisterType((*WatchFlow)(nil), "protoMsg.WatchFlow")
	proto.RegisterType((*Uint32Array)(nil), "protoMsg.Uint32Array")
	proto.RegisterType((*MonthCardFlow)(nil), "protoMsg.MonthCardFlow")
	proto.RegisterType((*RedDotOnce)(nil), "protoMsg.RedDotOnce")
	proto.RegisterType((*RedDotList)(nil), "protoMsg.RedDotList")
	proto.RegisterType((*SeasonExpFlow)(nil), "protoMsg.SeasonExpFlow")
	proto.RegisterType((*SkillUseFlow)(nil), "protoMsg.SkillUseFlow")
	proto.RegisterType((*BuyGoodsFlow)(nil), "protoMsg.BuyGoodsFlow")
}
func (m *UserMainDataNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMainDataNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Name_)))
	i += copy(dAtA[i:], m.Name_)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Coins))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Diams))
	return i, nil
}

func (m *Vector3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector3) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xd
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.X))))
	dAtA[i] = 0x15
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Y))))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Z))))
	return i, nil
}

func (m *T_Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *T_Object) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Baseid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Thisid))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Count))
	if len(m.Gunreform) > 0 {
		for _, num := range m.Gunreform {
			dAtA[i] = 0x20
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Bullet))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Reducedam))
	return i, nil
}

func (m *ChracterMapDataInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChracterMapDataInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Name_)))
	i += copy(dAtA[i:], m.Name_)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	if m.Pos != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Pos.Size()))
		n1, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	dAtA[i] = 0x2d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Mvspeed))))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Maxhp))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Hp))
	dAtA[i] = 0x45
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Orientation))))
	if m.Weapon != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Weapon.Size()))
		n2, err := m.Weapon.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Secweapon != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Secweapon.Size()))
		n3, err := m.Secweapon.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Armors) > 0 {
		for _, num := range m.Armors {
			dAtA[i] = 0x58
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *RefreshObjectNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshObjectNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Obj != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Obj.Size()))
		n4, err := m.Obj.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *UseObjectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseObjectReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Thisid))
	return i, nil
}

func (m *RemoveObjectNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveObjectNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Thisid))
	return i, nil
}

func (m *RefreshGunNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshGunNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Objs != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Objs.Size()))
		n5, err := m.Objs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Useweapon))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	return i, nil
}

func (m *DropGunNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropGunNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	if m.Use != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Use.Size()))
		n6, err := m.Use.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ExchangeGunReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeGunReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Useweapon))
	return i, nil
}

func (m *ExchangeGunRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeGunRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Useweapon))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	return i, nil
}

func (m *GunReformReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GunReformReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Reformthisid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Gunthisid))
	return i, nil
}

func (m *GunReformUnequipReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GunReformUnequipReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Gunthisid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Baseid))
	return i, nil
}

func (m *AttackReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttackReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Defendid))
	dAtA[i] = 0x10
	i++
	if m.Ishead {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.Origion != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Origion.Size()))
		n7, err := m.Origion.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Dir != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Dir.Size()))
		n8, err := m.Dir.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Firetime))
	dAtA[i] = 0x35
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Distance))))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Attackid))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AttackPos))
	return i, nil
}

func (m *ShootReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShootReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Issuc {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Attackid))
	return i, nil
}

func (m *MapCharacterResultNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapCharacterResultNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Rank))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Kill))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Timeinseconds))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Amount))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Round))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Headshotnum))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Shotnum))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Effectharm))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Recovernum))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Revivenum))
	dAtA[i] = 0x5d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Killdistance))))
	dAtA[i] = 0x60
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Destroycarnum))
	dAtA[i] = 0x68
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Killstmnum))
	dAtA[i] = 0x70
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Attacknum))
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Roadkillnum))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Clothnum))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Speednum))
	dAtA[i] = 0x95
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Rundistance))))
	dAtA[i] = 0x9d
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Killscore))))
	dAtA[i] = 0xa5
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Rankscore))))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Totalrank))
	dAtA[i] = 0xb5
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Totalscore))))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Coin))
	dAtA[i] = 0xc2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.BraveCoin)))
	i += copy(dAtA[i:], m.BraveCoin)
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Matchmode))
	return i, nil
}

func (m *ChatNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Content)))
	i += copy(dAtA[i:], m.Content)
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Type))
	return i, nil
}

func (m *ZoneNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZoneNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Type))
	if m.Center != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Center.Size()))
		n9, err := m.Center.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Radius))))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Interval))
	return i, nil
}

func (m *ChangeBulletReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBulletReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Full {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ChangeBulletRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeBulletRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Bullet))
	return i, nil
}

func (m *TeamMemberInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamMemberInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Name_)))
	i += copy(dAtA[i:], m.Name_)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MemState))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Modelid))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Intotime))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Location)))
	i += copy(dAtA[i:], m.Location)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Dbid))
	dAtA[i] = 0x42
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Insignia)))
	i += copy(dAtA[i:], m.Insignia)
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Veteran))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NameColor))
	dAtA[i] = 0x58
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.OutsideWeapon))
	return i, nil
}

func (m *SyncTeamInfoRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncTeamInfoRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamState))
	if len(m.Memberinfo) > 0 {
		for _, msg := range m.Memberinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Leaderid))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Teamtype))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Automatch))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Mapid))
	return i, nil
}

func (m *RefreshPackCellNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshPackCellNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Num))
	return i, nil
}

func (m *SummonAINotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SummonAINotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Ainum))
	if len(m.Users) > 0 {
		for _, num := range m.Users {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Skybox))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SceneType))
	return i, nil
}

func (m *RefreshGunBulletNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshGunBulletNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Thisid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Bullet))
	return i, nil
}

func (m *InitRoomTeamPlayerItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitRoomTeamPlayerItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Name_)))
	i += copy(dAtA[i:], m.Name_)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Hp))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Maxhp))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.State))
	if m.Pos != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Pos.Size()))
		n10, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Color))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NameColor))
	return i, nil
}

func (m *InitRoomTeamInfoRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitRoomTeamInfoRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, msg := range m.Item {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SyncRoomTeamPlayerItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRoomTeamPlayerItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Hp))
	if m.Pos != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Pos.Size()))
		n11, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.State))
	if m.Rota != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Rota.Size()))
		n12, err := m.Rota.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *SymcRoomTeamInfoRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SymcRoomTeamInfoRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, msg := range m.Item {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DieNotifyRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DieNotifyRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Attackerid))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Defenderid))
	dAtA[i] = 0x22
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Attackername)))
	i += copy(dAtA[i:], m.Attackername)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Defendername)))
	i += copy(dAtA[i:], m.Defendername)
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IsHeadhost))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Gunid))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Defenderstate))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.CurAliveSum))
	dAtA[i] = 0x52
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Attackerinsignia)))
	i += copy(dAtA[i:], m.Attackerinsignia)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Defenderinsignia)))
	i += copy(dAtA[i:], m.Defenderinsignia)
	dAtA[i] = 0x60
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Attackercolor))
	dAtA[i] = 0x68
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Defendercolor))
	return i, nil
}

func (m *CopilotData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopilotData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Index))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	return i, nil
}

func (m *VehicleProp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VehicleProp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VehicleID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PilotID))
	if len(m.Copilots) > 0 {
		for _, msg := range m.Copilots {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x20
	i++
	if m.Enter {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Reducedam))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Thisid))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Reducemax))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Usetime))
	dAtA[i] = 0x48
	i++
	if m.Haveexplode {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x55
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.FuelLeft))))
	dAtA[i] = 0x5d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.FuelMax))))
	return i, nil
}

func (m *ItemProp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemProp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Baseid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Num))
	return i, nil
}

func (m *RefreshBoxObjNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshBoxObjNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HeadProp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeadProp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Baseid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Reducedam))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Maxreduce))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Itemid))
	return i, nil
}

func (m *BodyProp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BodyProp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Baseid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Reducedam))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Maxreduce))
	return i, nil
}

func (m *BackPackProp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackPackProp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Baseid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Itemid))
	return i, nil
}

func (m *PlayerRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerRegister) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x42
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.RegChannel)))
	i += copy(dAtA[i:], m.RegChannel)
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	return i, nil
}

func (m *PlayerLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x52
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x68
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleID)))
	i += copy(dAtA[i:], m.VRoleID)
	dAtA[i] = 0x7a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.RegChannel)))
	i += copy(dAtA[i:], m.RegChannel)
	return i, nil
}

func (m *PlayerLogout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerLogout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.OnlineTime))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x52
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	return i, nil
}

func (m *MailObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Num))
	return i, nil
}

func (m *MailInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Mailid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Mailtype))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Gettime))
	dAtA[i] = 0x20
	i++
	if m.Haveread {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Title)))
	i += copy(dAtA[i:], m.Title)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Url)))
	i += copy(dAtA[i:], m.Url)
	if len(m.Objs) > 0 {
		for _, msg := range m.Objs {
			dAtA[i] = 0x42
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x48
	i++
	if m.Haveget {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x52
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Button)))
	i += copy(dAtA[i:], m.Button)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Os)))
	i += copy(dAtA[i:], m.Os)
	return i, nil
}

func (m *MailInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailInfoList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqGetMailList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetMailList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RetMailList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMailList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mails) > 0 {
		for _, msg := range m.Mails {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqMailInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMailInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Mailid))
	return i, nil
}

func (m *RetMailInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetMailInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mail != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Mail.Size()))
		n13, err := m.Mail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *DelMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelMail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mailid) > 0 {
		for _, num := range m.Mailid {
			dAtA[i] = 0x8
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *GetMailObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMailObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Mailid))
	return i, nil
}

func (m *AnnuonceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnuonceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.StartTime))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.EndTime))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.InternalTime))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Content)))
	i += copy(dAtA[i:], m.Content)
	return i, nil
}

func (m *InitAnnuonceInfoRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitAnnuonceInfoRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, msg := range m.Item {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FriendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Name_)))
	i += copy(dAtA[i:], m.Name_)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.State))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Time))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Url)))
	i += copy(dAtA[i:], m.Url)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Enterplat)))
	i += copy(dAtA[i:], m.Enterplat)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Qqvip))
	dAtA[i] = 0x42
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Nickname)))
	i += copy(dAtA[i:], m.Nickname)
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Gender))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x58
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Watchable))
	dAtA[i] = 0x60
	i++
	if m.Bound {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.BattleTeam)))
	i += copy(dAtA[i:], m.BattleTeam)
	dAtA[i] = 0x70
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Stamp))
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NameColor))
	return i, nil
}

func (m *PlatFriendStateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlatFriendStateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Openid) > 0 {
		for _, s := range m.Openid {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *PlatFriendState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlatFriendState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Openid)))
	i += copy(dAtA[i:], m.Openid)
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.State))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Time))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Name_)))
	i += copy(dAtA[i:], m.Name_)
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NameColor))
	dAtA[i] = 0x40
	i++
	if m.Bound {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *PlatFriendStateRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlatFriendStateRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FriendRankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendRankInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Name_)))
	i += copy(dAtA[i:], m.Name_)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Url)))
	i += copy(dAtA[i:], m.Url)
	dAtA[i] = 0x25
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SoloRating))))
	dAtA[i] = 0x2d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.DuoRating))))
	dAtA[i] = 0x35
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SquadRating))))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.QqVip))
	dAtA[i] = 0x42
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameEenter)))
	i += copy(dAtA[i:], m.GameEenter)
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NameColor))
	return i, nil
}

func (m *SyncFriendRankList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncFriendRankList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, msg := range m.Item {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SyncFriendList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncFriendList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, msg := range m.Item {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BlackList) > 0 {
		for _, msg := range m.BlackList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FriendApplyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendApplyInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Name_)))
	i += copy(dAtA[i:], m.Name_)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ApplyTime))
	dAtA[i] = 0x22
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Url)))
	i += copy(dAtA[i:], m.Url)
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NameColor))
	return i, nil
}

func (m *SyncFriendApplyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncFriendApplyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, msg := range m.Item {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DoSendItemReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoSendItemReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Title)))
	i += copy(dAtA[i:], m.Title)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Content)))
	i += copy(dAtA[i:], m.Content)
	if len(m.Objs) > 0 {
		for _, msg := range m.Objs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Url)))
	i += copy(dAtA[i:], m.Url)
	return i, nil
}

func (m *GameSvrState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameSvrState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameIP)))
	i += copy(dAtA[i:], m.VGameIP)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	return i, nil
}

func (m *RoundFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoundFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BattleID))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BattleType))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RoundScore))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RoundTime))
	dAtA[i] = 0x58
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Result))
	dAtA[i] = 0x60
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Rank))
	dAtA[i] = 0x68
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Gold))
	dAtA[i] = 0x70
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalBattleNum))
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.FirstNum))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TopTenNum))
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.FirstRate)))
	i += copy(dAtA[i:], m.FirstRate)
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TopTenRate)))
	i += copy(dAtA[i:], m.TopTenRate)
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SingleMaxKill))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalKillNum))
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.AverageKillNum)))
	i += copy(dAtA[i:], m.AverageKillNum)
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SingleMaxHeadShot))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalHeadShot))
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalEffectHarm))
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.AverageEffectHarm)))
	i += copy(dAtA[i:], m.AverageEffectHarm)
	dAtA[i] = 0xd2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.HeadShotRate)))
	i += copy(dAtA[i:], m.HeadShotRate)
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RecvItemUseNum))
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.CarUseNum))
	dAtA[i] = 0xe8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.CarDestroyNum))
	dAtA[i] = 0xf5
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.KillRating))))
	dAtA[i] = 0xfd
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.WinRating))))
	dAtA[i] = 0x85
	i++
	dAtA[i] = 0x2
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.RoundRating))))
	dAtA[i] = 0x8d
	i++
	dAtA[i] = 0x2
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.TotalRating))))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerNum))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AINum))
	dAtA[i] = 0xa5
	i++
	dAtA[i] = 0x2
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.PlayerRunDistance))))
	dAtA[i] = 0xad
	i++
	dAtA[i] = 0x2
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.CarRunDistance))))
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.DEADTYPE))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RecoverHp))
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BandageNum))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MedicalBoxNum))
	dAtA[i] = 0xd0
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PainkillerNum))
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.EnergyNum))
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.HeadShotNum))
	dAtA[i] = 0xe8
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.EffectHarm))
	dAtA[i] = 0xf0
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ShotNum))
	dAtA[i] = 0xf8
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ReviveNum))
	dAtA[i] = 0x85
	i++
	dAtA[i] = 0x3
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.KillDistance))))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.KillStmNum))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RCarUseNum))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RCarDestoryNum))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AttackNum))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SkyBox))
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Kill))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalSurviveTime))
	dAtA[i] = 0xc5
	i++
	dAtA[i] = 0x3
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.TotalDistance))))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalRank))
	dAtA[i] = 0xd5
	i++
	dAtA[i] = 0x3
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SoloRating))))
	dAtA[i] = 0xdd
	i++
	dAtA[i] = 0x3
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.DuoRating))))
	dAtA[i] = 0xe5
	i++
	dAtA[i] = 0x3
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SquadRating))))
	dAtA[i] = 0xe8
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SoloRank))
	dAtA[i] = 0xf0
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.DuoRank))
	dAtA[i] = 0xf8
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SquadRank))
	dAtA[i] = 0x85
	i++
	dAtA[i] = 0x4
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.TopRating))))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalCoin))
	dAtA[i] = 0x95
	i++
	dAtA[i] = 0x4
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.TotalCarDistance))))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamID))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.GunID))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SightID))
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SilenceID))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MagazineID))
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.StockID))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.HandleID))
	dAtA[i] = 0xd2
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.OpenIDByKill)))
	i += copy(dAtA[i:], m.OpenIDByKill)
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.GunIDByKill))
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SightIDByKill))
	dAtA[i] = 0xe8
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SilenceIDByKill))
	dAtA[i] = 0xf0
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MagazineIDByKill))
	dAtA[i] = 0xf8
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.StockIDByKill))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x5
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.HandleIDByKill))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x5
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.DeadIsHead))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x5
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.WatchType))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x5
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.WatchTime))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x5
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoadFailPlayerNum))
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x5
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x5
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchMode))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x5
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ParachuteType))
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x5
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TankUseTime))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x5
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TankKillNum))
	return i, nil
}

func (m *CareerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CareerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalBattleNum))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalFirstNum))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalTopTenNum))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalKillNum))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalHeadShot))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalShotNum))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalEffectHarm))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalSurviveTime))
	dAtA[i] = 0x55
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.TotalDistance))))
	dAtA[i] = 0x5d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SoloRating))))
	dAtA[i] = 0x60
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SoloRank))
	dAtA[i] = 0x6d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.DuoRating))))
	dAtA[i] = 0x70
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.DuoRank))
	dAtA[i] = 0x7d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SquadRating))))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SquadRank))
	dAtA[i] = 0x8d
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.TotalRating))))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalRank))
	dAtA[i] = 0x9d
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.TopRating))))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NameColor))
	return i, nil
}

func (m *CareerBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CareerBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalBattleNum))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.FirstNum))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TopTenNum))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalKillNum))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalHeadShot))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Totalshotnum))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalEffectHarm))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SurviveTime))
	dAtA[i] = 0x4d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.TotalDistance))))
	dAtA[i] = 0x55
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SoloWinRating))))
	dAtA[i] = 0x5d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SoloKillRating))))
	dAtA[i] = 0x65
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.DoubleWinRating))))
	dAtA[i] = 0x6d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.DoubleKillRating))))
	dAtA[i] = 0x75
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.FourWinRating))))
	dAtA[i] = 0x7d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.FourKillRating))))
	dAtA[i] = 0x85
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SoloRating))))
	dAtA[i] = 0x8d
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.DoubleRating))))
	dAtA[i] = 0x95
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.FourRating))))
	dAtA[i] = 0x9d
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Totalscore))))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Totalrank))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SoloRank))
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.DoubleRank))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SquadRank))
	dAtA[i] = 0xc5
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.TopScore))))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SingleMaxKill))
	dAtA[i] = 0xd0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SingleMaxHeadShot))
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RecvItemUseNum))
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.CarUseNum))
	dAtA[i] = 0xe8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.CarDestroyNum))
	dAtA[i] = 0xf0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	return i, nil
}

func (m *MatchRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Solomodel) > 0 {
		for _, msg := range m.Solomodel {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Duomodel) > 0 {
		for _, msg := range m.Duomodel {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Squadmodel) > 0 {
		for _, msg := range m.Squadmodel {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DayRecordData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DayRecordData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NowTime))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Model))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Rating))))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalKillNum))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.DayBattleNum))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.FirstNum))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TopTenNum))
	dAtA[i] = 0x42
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	return i, nil
}

func (m *SettleDayData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettleDayData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.FirstNum))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TopTenNum))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.WinRating))))
	dAtA[i] = 0x25
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.KillRating))))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalEffectHarm))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalShotNum))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SurviveTime))
	dAtA[i] = 0x45
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.TotalDistance))))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AttackNum))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RecoverNum))
	dAtA[i] = 0x58
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Revivenum))
	dAtA[i] = 0x60
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.HeadShotNum))
	dAtA[i] = 0x68
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.DayBattleNum))
	dAtA[i] = 0x70
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NowTime))
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalRank))
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ServerType)))
	i += copy(dAtA[i:], m.ServerType)
	if len(m.Tag) > 0 {
		for _, msg := range m.Tag {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	return i, nil
}

func (m *DayTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DayTag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Tag)))
	i += copy(dAtA[i:], m.Tag)
	return i, nil
}

func (m *VehiclePhysics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VehiclePhysics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Position != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Position.Size()))
		n14, err := m.Position.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Rotation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Rotation.Size()))
		n15, err := m.Rotation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Velocity != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Velocity.Size()))
		n16, err := m.Velocity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.AngularVelocity != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.AngularVelocity.Size()))
		n17, err := m.AngularVelocity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Gear))
	return i, nil
}

func (m *Vehicle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vehicle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Prop != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Prop.Size()))
		n18, err := m.Prop.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Physics != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Physics.Size()))
		n19, err := m.Physics.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Ownerid))
	return i, nil
}

func (m *DamageDefend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DamageDefend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Dam))
	return i, nil
}

func (m *ThrowDamageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThrowDamageInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Center != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Center.Size()))
		n20, err := m.Center.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Baseid))
	if len(m.Defends) > 0 {
		for _, msg := range m.Defends {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DoorList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoorList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DoorList) > 0 {
		for _, msg := range m.DoorList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DoorData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoorData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	if m.Pos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Pos.Size()))
		n21, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.State))
	return i, nil
}

func (m *LogItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Baseid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Num))
	return i, nil
}

func (m *SpaceLogInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpaceLogInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuideFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuideFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrId)))
	i += copy(dAtA[i:], m.GameSvrId)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppid)))
	i += copy(dAtA[i:], m.VGameAppid)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Vopenid)))
	i += copy(dAtA[i:], m.Vopenid)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IGuideID))
	return i, nil
}

func (m *ChatFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.OpenMic))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ChatType))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MsgType))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BattleID))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamID))
	return i, nil
}

func (m *BattleItemFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleItemFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BehaveType))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AddReason))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MapID))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Buildings))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ItemID))
	dAtA[i] = 0x58
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ItemLevel))
	dAtA[i] = 0x60
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ItemPlace))
	dAtA[i] = 0x68
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ItemNum))
	return i, nil
}

func (m *BattleFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Mode))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamType))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamID))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BehaveType))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BattleID))
	dAtA[i] = 0xad
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.MapIDX))))
	dAtA[i] = 0xb5
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.MapIDY))))
	dAtA[i] = 0xbd
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.MapIDZ))))
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MapType))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Times))
	dAtA[i] = 0xd0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AfIemID))
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BeItemID))
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AfItemLevel))
	dAtA[i] = 0xe8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BeItemLevel))
	dAtA[i] = 0xf0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BagItemNum))
	dAtA[i] = 0xf8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RoundTime))
	dAtA[i] = 0x85
	i++
	dAtA[i] = 0x2
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Distance))))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SkyBox))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchMode))
	return i, nil
}

func (m *BattleResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Mode))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamType))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamID))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BattleID))
	dAtA[i] = 0xa5
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.MapIDX))))
	dAtA[i] = 0xad
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.MapIDY))))
	dAtA[i] = 0xb5
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.MapIDZ))))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MapType))
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Times))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RoundTime))
	dAtA[i] = 0xd0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ResultType))
	dAtA[i] = 0xdd
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.RoundScore))))
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Rank))
	dAtA[i] = 0xe8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Hurt))
	dAtA[i] = 0xf0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Cirt))
	dAtA[i] = 0xf8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MoneyProduce))
	dAtA[i] = 0x85
	i++
	dAtA[i] = 0x2
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Distance))))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SkyBox))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchMode))
	return i, nil
}

func (m *MatchFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchType))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchScene))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchTime))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Result))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RealNum))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BattleID))
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SkyBox))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamID))
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamType))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchMode))
	return i, nil
}

func (m *LiveFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x52
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x70
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x7d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Score))))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ScoreRank))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Touts))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Wins))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Topwins))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.KD))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BeatAvg))
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.WinRate))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TopWinRate))
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.CriticalRate))
	dAtA[i] = 0xcd
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.BestScore))))
	dAtA[i] = 0xd0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BestRank))
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.HurtAvg))
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TimeAvg))
	dAtA[i] = 0xed
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.DistanceAvg))))
	dAtA[i] = 0xf5
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SingBestScore))))
	dAtA[i] = 0xf8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SingBestRank))
	dAtA[i] = 0x85
	i++
	dAtA[i] = 0x2
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.DuoBestScore))))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.DuoBestRank))
	dAtA[i] = 0x95
	i++
	dAtA[i] = 0x2
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SquadBestScore))))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SquadRank))
	return i, nil
}

func (m *GunFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GunFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Mode))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamType))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamID))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BattleID))
	dAtA[i] = 0xa5
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.MapIDX))))
	dAtA[i] = 0xad
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.MapIDY))))
	dAtA[i] = 0xb5
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.MapIDZ))))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.GunID))
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SightID))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SilenceID))
	dAtA[i] = 0xd0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MagazineID))
	dAtA[i] = 0xdd
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Distance))))
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Dps))
	dAtA[i] = 0xe8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Kill))
	dAtA[i] = 0xf0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.HeadKill))
	dAtA[i] = 0xf8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.StockID))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.HandleID))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchMode))
	return i, nil
}

func (m *CampFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.StageID))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TaskID))
	return i, nil
}

func (m *ShopFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ShopType))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ItemType))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ItemID))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Count))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ImoneyType))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Consume))
	return i, nil
}

func (m *OperFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.OperScene))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.OperType))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.FireMode))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PickMode))
	dAtA[i] = 0xa5
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Quick))))
	dAtA[i] = 0xad
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Touch))))
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.FireFollow))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NearbyFre))
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.HitBack))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Quality))
	dAtA[i] = 0xd0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.WatchAble))
	return i, nil
}

func (m *MoneyFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoneyFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IMoney))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Reason))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AddOrReduce))
	dAtA[i] = 0x58
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IMoneyType))
	dAtA[i] = 0x60
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IMoneyCount))
	dAtA[i] = 0x68
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchMode))
	return i, nil
}

func (m *SnsFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnsFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ActorOpenID)))
	i += copy(dAtA[i:], m.ActorOpenID)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Count))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SnsType))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.AcceptOpenID)))
	i += copy(dAtA[i:], m.AcceptOpenID)
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	return i, nil
}

func (m *SecGameStartFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecGameStartFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrId)))
	i += copy(dAtA[i:], m.GameSvrId)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameAppID)))
	i += copy(dAtA[i:], m.GameAppID)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.OpenID)))
	i += copy(dAtA[i:], m.OpenID)
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AreaID))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ZoneID))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BattleID))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientStartTime)))
	i += copy(dAtA[i:], m.ClientStartTime)
	dAtA[i] = 0x52
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.UserName)))
	i += copy(dAtA[i:], m.UserName)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.PicUrl)))
	i += copy(dAtA[i:], m.PicUrl)
	dAtA[i] = 0x60
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SvrUserMoney1))
	dAtA[i] = 0x68
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SvrUserMoney2))
	dAtA[i] = 0x70
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SvrUserMoney3))
	dAtA[i] = 0x7d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SvrRoundRank))))
	dAtA[i] = 0x85
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SvrRoundRank1))))
	dAtA[i] = 0x8d
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SvrRoundRank2))))
	dAtA[i] = 0x95
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.SvrRoundRank3))))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SvrRoleID))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SvrRoleType))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SvrMapid))
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SvrWeatherid))
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SvrItemList)))
	i += copy(dAtA[i:], m.SvrItemList)
	dAtA[i] = 0xc2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.WaitStartTime)))
	i += copy(dAtA[i:], m.WaitStartTime)
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.WaitEndTime)))
	i += copy(dAtA[i:], m.WaitEndTime)
	dAtA[i] = 0xd0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RoleType))
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Mapid))
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Weatherid))
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ItemList)))
	i += copy(dAtA[i:], m.ItemList)
	dAtA[i] = 0xf0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.GameType))
	dAtA[i] = 0xf8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamType))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AutoMatch))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerCount))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamID))
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TeamPlayer1)))
	i += copy(dAtA[i:], m.TeamPlayer1)
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TeamPlayer2)))
	i += copy(dAtA[i:], m.TeamPlayer2)
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TeamPlayer3)))
	i += copy(dAtA[i:], m.TeamPlayer3)
	dAtA[i] = 0xb5
	i++
	dAtA[i] = 0x2
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.TeamPlayer1Rank))))
	dAtA[i] = 0xbd
	i++
	dAtA[i] = 0x2
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.TeamPlayer2Rank))))
	dAtA[i] = 0xc5
	i++
	dAtA[i] = 0x2
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.TeamPlayer3Rank))))
	return i, nil
}

func (m *SecGameEndFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecGameEndFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrId)))
	i += copy(dAtA[i:], m.GameSvrId)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameAppID)))
	i += copy(dAtA[i:], m.GameAppID)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.OpenID)))
	i += copy(dAtA[i:], m.OpenID)
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AreaID))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ZoneID))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BattleID))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientStartTime)))
	i += copy(dAtA[i:], m.ClientStartTime)
	dAtA[i] = 0x52
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.UserName)))
	i += copy(dAtA[i:], m.UserName)
	dAtA[i] = 0x58
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RoleID))
	dAtA[i] = 0x60
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RoleType))
	dAtA[i] = 0x68
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.OverTime))
	dAtA[i] = 0x70
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.EndType))
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.KillCount))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AssistsCount))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.DropCount))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SaveCount))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RebornCount))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AliveType))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.GoldGet))
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.DiamondGet))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ExpGet))
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.WinRank))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TotalPlayers))
	dAtA[i] = 0xd5
	i++
	dAtA[i] = 0x1
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.RankEnd))))
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamID))
	dAtA[i] = 0xe2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TeamPlayer1)))
	i += copy(dAtA[i:], m.TeamPlayer1)
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TeamPlayer2)))
	i += copy(dAtA[i:], m.TeamPlayer2)
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TeamPlayer3)))
	i += copy(dAtA[i:], m.TeamPlayer3)
	dAtA[i] = 0xf8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamPlayer1AliveType))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamPlayer2AliveType))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamPlayer3AliveType))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamPlayer1Kill))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamPlayer2Kill))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamPlayer3Kill))
	return i, nil
}

func (m *ShareRMBMoney) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareRMBMoney) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.OpenID)))
	i += copy(dAtA[i:], m.OpenID)
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Channel))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.AccessToken)))
	i += copy(dAtA[i:], m.AccessToken)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ActID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Ret))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.BoxID)))
	i += copy(dAtA[i:], m.BoxID)
	dAtA[i] = 0x42
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Url)))
	i += copy(dAtA[i:], m.Url)
	return i, nil
}

func (m *OwnGoodsItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnGoodsItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.State))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Used))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Sum))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Preference))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.EndTime))
	return i, nil
}

func (m *OwnGoodsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnGoodsInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemVoiceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemVoiceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MemberId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	return i, nil
}

func (m *TeamVoiceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamVoiceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MemberInfos) > 0 {
		for _, msg := range m.MemberInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SettleMemInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettleMemInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Name_)))
	i += copy(dAtA[i:], m.Name_)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Url)))
	i += copy(dAtA[i:], m.Url)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Killnum))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Headshotnum))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Damagehp))
	dAtA[i] = 0x3d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Distance))))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Gametime))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Veteran))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NameColor))
	return i, nil
}

func (m *SettleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RefreshObjectListNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshObjectListNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Obj) > 0 {
		for _, msg := range m.Obj {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StrangerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrangerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, num := range m.List {
			dAtA[i] = 0x8
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *ReConnetionFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReConnetionFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	return i, nil
}

func (m *DropBoxInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropBoxInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Thisid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Fakebox))
	if m.Pos != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Pos.Size()))
		n22, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	dAtA[i] = 0x20
	i++
	if m.Havepick {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *DropBoxList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropBoxList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ItemFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IGoodsType))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IGoodsId))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Count))
	dAtA[i] = 0x58
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AfterCount))
	dAtA[i] = 0x60
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Reason))
	dAtA[i] = 0x68
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SubReason))
	dAtA[i] = 0x70
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IMoney))
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IMoneyType))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AddOrReduce))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ReduceReason))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LeftUseTime))
	return i, nil
}

func (m *ModeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Modeid))
	dAtA[i] = 0x10
	i++
	if m.Solo {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x18
	i++
	if m.Duo {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x20
	i++
	if m.Squad {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SeasonStart)))
	i += copy(dAtA[i:], m.SeasonStart)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SeasonEnd)))
	i += copy(dAtA[i:], m.SeasonEnd)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Price))
	return i, nil
}

func (m *MatchModeNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchModeNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ActivityState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.State))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RedDot))
	return i, nil
}

func (m *ActivitysInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivitysInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActivityState) > 0 {
		for _, msg := range m.ActivityState {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ExchangeState) > 0 {
		for _, msg := range m.ExchangeState {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MedalDataItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MedalDataItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Num))
	return i, nil
}

func (m *MedalDataList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MedalDataList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *KillDrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillDrop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Thisid))
	if m.Pos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Pos.Size()))
		n23, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Disappeartime))
	return i, nil
}

func (m *KillDropList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillDropList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GoodRecordFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodRecordFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BehaveType))
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.RoleStock)))
	i += copy(dAtA[i:], m.RoleStock)
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.BrollyStock)))
	i += copy(dAtA[i:], m.BrollyStock)
	return i, nil
}

func (m *GoodsTimeLeft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsTimeLeft) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TimeLeft))
	return i, nil
}

func (m *GoodsTimeLeftNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsTimeLeftNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NewYearGood) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewYearGood) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Key))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Num))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TargetType))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TargetNum))
	return i, nil
}

func (m *NewYearInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewYearInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GoodID) > 0 {
		for _, msg := range m.GoodID {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RecState))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Index))
	return i, nil
}

func (m *AchievementFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchievementFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AchievementID))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AchievementLevel))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.AchievementExp))
	return i, nil
}

func (m *InsigniaFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsigniaFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LogType))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.InsigniaID))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.InsigniaNum))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.InsigniaUse))
	return i, nil
}

func (m *Achievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	if len(m.Stamp) > 0 {
		for _, num := range m.Stamp {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Flag))
	return i, nil
}

func (m *AchievementProcess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchievementProcess) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x15
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Num))))
	return i, nil
}

func (m *AchievmentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchievmentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Exp))
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Reward) > 0 {
		for _, num := range m.Reward {
			dAtA[i] = 0x20
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	if len(m.Used) > 0 {
		for _, num := range m.Used {
			dAtA[i] = 0x28
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	if len(m.Process) > 0 {
		for _, msg := range m.Process {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Insignia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Insignia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Count))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Flag))
	return i, nil
}

func (m *InsigniaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsigniaInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Use))
	return i, nil
}

func (m *AwardItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwardItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Num))
	return i, nil
}

func (m *SeasonAwards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonAwards) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Season))
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WearInGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WearInGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.First))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Second))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Third))
	return i, nil
}

func (m *WearInGameFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WearInGameFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ActionType))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.EquipID))
	return i, nil
}

func (m *EliteWeaponPos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EliteWeaponPos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	if m.Pos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Pos.Size()))
		n24, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *EliteWeaponPosList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EliteWeaponPosList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DropBoxPos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropBoxPos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	if m.Pos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Pos.Size()))
		n25, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *DropBoxPosList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropBoxPosList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TreasureBoxInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreasureBoxInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.CoinType))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.CoinNum))
	return i, nil
}

func (m *TreasureBoxList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreasureBoxList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TreasureBoxFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreasureBoxFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BoxID))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.OpenNum))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IMoneyType))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IMoney))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ItemID))
	return i, nil
}

func (m *MilitaryRankFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MilitaryRankFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Exp))
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.MilitaryRank)))
	i += copy(dAtA[i:], m.MilitaryRank)
	return i, nil
}

func (m *TaskItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TaskId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.FinishedNum))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Awards))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.State))
	return i, nil
}

func (m *TaskUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TaskName)))
	i += copy(dAtA[i:], m.TaskName)
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Groupid))
	if len(m.TaskItems) > 0 {
		for _, msg := range m.TaskItems {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ActiveAwardsBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveAwardsBox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BoxId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Awards))
	return i, nil
}

func (m *DayTaskDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DayTaskDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.DayActiveness))
	if len(m.DayBoxs) > 0 {
		for _, msg := range m.DayBoxs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.WeekActiveness))
	if len(m.WeekBoxs) > 0 {
		for _, msg := range m.WeekBoxs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DayTaskList) > 0 {
		for _, msg := range m.DayTaskList {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DayTaskFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DayTaskFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TaskItemID))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TaskItemFinished))
	return i, nil
}

func (m *ActivenessFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivenessFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.DayActiveness))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.WeekActiveness))
	return i, nil
}

func (m *ComradeTaskFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComradeTaskFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TaskItemID))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TaskItemFinished))
	return i, nil
}

func (m *PlayerPos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerPos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Typ))
	if m.Pos != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Pos.Size()))
		n26, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *PlayerPosList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerPosList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerPos) > 0 {
		for _, msg := range m.PlayerPos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FollowInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Target))
	if len(m.Followers) > 0 {
		for _, num := range m.Followers {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *FollowDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ShellExplodeNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShellExplodeNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Typ))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Shooter))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Baseid))
	if m.Center != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Center.Size()))
		n27, err := m.Center.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *AwardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwardInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.State))
	return i, nil
}

func (m *OldBringNewDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OldBringNewDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Typ))
	if len(m.Teachers) > 0 {
		for _, num := range m.Teachers {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	if len(m.Pupils) > 0 {
		for _, num := range m.Pupils {
			dAtA[i] = 0x18
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TimeLeft))
	if len(m.Awards) > 0 {
		for _, msg := range m.Awards {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ComradeTaskDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComradeTaskDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ComradeTaskList) > 0 {
		for _, msg := range m.ComradeTaskList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VeteranInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VeteranInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Url)))
	i += copy(dAtA[i:], m.Url)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.UserName)))
	i += copy(dAtA[i:], m.UserName)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NameColor))
	return i, nil
}

func (m *VeteranRecallList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VeteranRecallList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VeteranList) > 0 {
		for _, msg := range m.VeteranList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.State))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Index))
	return i, nil
}

func (m *VeteranRecallReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VeteranRecallReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RecallSusNum))
	if len(m.RewardIdList) > 0 {
		for _, num := range m.RewardIdList {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *WeaponInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeaponInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.WeaponId))
	if len(m.Additions) > 0 {
		for _, num := range m.Additions {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *WeaponInGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeaponInGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Weapons) > 0 {
		for _, msg := range m.Weapons {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VehicleFullNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VehicleFullNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	if len(m.Uid) > 0 {
		for _, num := range m.Uid {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *PreferenceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreferenceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	if len(m.Start) > 0 {
		for _, b := range m.Start {
			dAtA[i] = 0x10
			i++
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.PreType) > 0 {
		for _, num := range m.PreType {
			dAtA[i] = 0x18
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *PreferenceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreferenceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PreferenceFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreferenceFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ItemType))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PreType))
	return i, nil
}

func (m *GameRecordDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRecordDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SoloRating))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.DuoRating))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SquadRating))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Battles))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Wins))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TopTens))
	dAtA[i] = 0x4d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Kda))))
	return i, nil
}

func (m *ContestInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Bouns))
	return i, nil
}

func (m *ChampionContestInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChampionContestInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Team) > 0 {
		for _, num := range m.Team {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *OddsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OddsInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamId))
	dAtA[i] = 0x15
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Odds))))
	return i, nil
}

func (m *ChampionOddsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChampionOddsInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ContestRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Stamp))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Odds))))
	return i, nil
}

func (m *ChampionContestRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChampionContestRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, msg := range m.Record {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WorldCupMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldCupMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchId))
	if len(m.Contest) > 0 {
		for _, num := range m.Contest {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	if len(m.Odds) > 0 {
		for _, num := range m.Odds {
			dAtA[i] = 0x1d
			i++
			f28 := math.Float32bits(float32(num))
			dAtA[i] = uint8(f28)
			i++
			dAtA[i] = uint8(f28 >> 8)
			i++
			dAtA[i] = uint8(f28 >> 16)
			i++
			dAtA[i] = uint8(f28 >> 24)
			i++
		}
	}
	if len(m.Team) > 0 {
		for _, s := range m.Team {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Score) > 0 {
		for _, num := range m.Score {
			dAtA[i] = 0x28
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IsDone))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IsReward))
	if len(m.ScoreFinal) > 0 {
		for _, num := range m.ScoreFinal {
			dAtA[i] = 0x40
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *WorldCupMatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldCupMatchInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WorldCupMatchRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldCupMatchRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Kind))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Stamp))
	dAtA[i] = 0x25
	i++
	i = encodeFixed32Game(dAtA, i, uint32(math.Float32bits(float32(m.Odds))))
	if len(m.Team) > 0 {
		for _, s := range m.Team {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *WorldCupMatchRecordInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldCupMatchRecordInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FestivalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FestivalInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Num))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.State))
	return i, nil
}

func (m *FestivalList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FestivalList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ActState))
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExchangeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	if len(m.Num) > 0 {
		for _, num := range m.Num {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.State))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ExchangeNum))
	return i, nil
}

func (m *ExchangeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ActState))
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExchangeTotalList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeTotalList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FestivalFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FestivalFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TaskID))
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Rewards)))
	i += copy(dAtA[i:], m.Rewards)
	return i, nil
}

func (m *ExchangeFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ActID))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ExchangeID))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ExchangeNum))
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Rewards)))
	i += copy(dAtA[i:], m.Rewards)
	return i, nil
}

func (m *BallStarReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BallStarReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.State))
	return i, nil
}

func (m *BallStarInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BallStarInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ActState))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Position))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Sum))
	if len(m.RewardState) > 0 {
		for _, msg := range m.RewardState {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BallStarFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BallStarFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Position))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Sum))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RewardsID))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RewardsNum))
	return i, nil
}

func (m *CheaterReportFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheaterReportFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ReportOpenID)))
	i += copy(dAtA[i:], m.ReportOpenID)
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ReportName)))
	i += copy(dAtA[i:], m.ReportName)
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ReportTypeID))
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ReportTypeSum)))
	i += copy(dAtA[i:], m.ReportTypeSum)
	return i, nil
}

func (m *WorldCupChampionFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldCupChampionFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TeamID))
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Odds)))
	i += copy(dAtA[i:], m.Odds)
	return i, nil
}

func (m *WorldCupMatchFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldCupMatchFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchId))
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Odds)))
	i += copy(dAtA[i:], m.Odds)
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Kind))
	return i, nil
}

func (m *TaskList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TaskItems) > 0 {
		for _, msg := range m.TaskItems {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AwardList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwardList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TaskDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Name_)))
	i += copy(dAtA[i:], m.Name_)
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.WhatDay))
	if len(m.Lists) > 0 {
		for _, msg := range m.Lists {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SpecialTaskDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialTaskDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Detail != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Detail.Size()))
		n29, err := m.Detail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	dAtA[i] = 0x10
	i++
	if m.Enable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Medals))
	if m.Awards != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Awards.Size()))
		n30, err := m.Awards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Replacements))
	return i, nil
}

func (m *TaskFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TaskName)))
	i += copy(dAtA[i:], m.TaskName)
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TaskType))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TaskItemID))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.TaskItemFinished))
	return i, nil
}

func (m *ChaterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChaterInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Name_)))
	i += copy(dAtA[i:], m.Name_)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Url)))
	i += copy(dAtA[i:], m.Url)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Gender))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.BattleTeam)))
	i += copy(dAtA[i:], m.BattleTeam)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NameColor))
	return i, nil
}

func (m *TeamCustom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamCustom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Info.Size()))
		n31, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Typ))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Channel))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchMode))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Mapid))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchTyp))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.CurNum))
	if len(m.Tags) > 0 {
		for _, num := range m.Tags {
			dAtA[i] = 0x48
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x52
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Slogan)))
	i += copy(dAtA[i:], m.Slogan)
	return i, nil
}

func (m *ChatDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Info.Size()))
		n32, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Channel))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Content)))
	i += copy(dAtA[i:], m.Content)
	dAtA[i] = 0x20
	i++
	if m.Trumpet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ChatInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Stamp))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Content)))
	i += copy(dAtA[i:], m.Content)
	return i, nil
}

func (m *UnreadChatDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnreadChatDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AnnouncementDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnouncementDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Name_)))
	i += copy(dAtA[i:], m.Name_)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Typ))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Days))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Num))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.NameColor))
	return i, nil
}

func (m *SkillPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillPosition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Position))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SkillID))
	return i, nil
}

func (m *ModeSkillInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModeSkillInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ModeID))
	if len(m.InitiveSkill) > 0 {
		for _, msg := range m.InitiveSkill {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PassiveSkill) > 0 {
		for _, msg := range m.PassiveSkill {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoleSkillInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleSkillInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.RoleID))
	if len(m.ModeList) > 0 {
		for _, msg := range m.ModeList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AllSkillList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllSkillList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SkillEffect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillEffect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Value))
	return i, nil
}

func (m *SkillEffectList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillEffectList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BattleBookingFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleBookingFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Booker))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BookTarget))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Resp))
	return i, nil
}

func (m *CommonTaskList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonTaskList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	if m.Enable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.TaskItems) > 0 {
		for _, msg := range m.TaskItems {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChallengeTaskDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeTaskDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Season))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LeftTime))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Grade))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Medals))
	dAtA[i] = 0x28
	i++
	if m.EliteEnable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NormalAwards != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.NormalAwards.Size()))
		n33, err := m.NormalAwards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.EliteAwards != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.EliteAwards.Size()))
		n34, err := m.EliteAwards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *BattleBookingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleBookingInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Typ))
	if len(m.List) > 0 {
		for _, num := range m.List {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	if len(m.Tmplist) > 0 {
		for _, num := range m.Tmplist {
			dAtA[i] = 0x18
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *SpecialExpFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialExpFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SpecialExp))
	return i, nil
}

func (m *WatchFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.WatchType))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.WatchID))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BeWatchID))
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.BeWatchName)))
	i += copy(dAtA[i:], m.BeWatchName)
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BattleID))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.WatchNum))
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.WatchTime))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Loading))
	return i, nil
}

func (m *Uint32Array) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Uint32Array) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, num := range m.List {
			dAtA[i] = 0x8
			i++
			i = encodeVarintGame(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *MonthCardFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonthCardFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.BeginTime))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.EndTime))
	return i, nil
}

func (m *RedDotOnce) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedDotOnce) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.ID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Dot))
	return i, nil
}

func (m *RedDotList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedDotList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SeasonExpFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonExpFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SeasonExp))
	return i, nil
}

func (m *SkillUseFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillUseFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.MatchMode))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.InitiveSkillID))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PassiveSkillID))
	return i, nil
}

func (m *BuyGoodsFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyGoodsFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.GameSvrID)))
	i += copy(dAtA[i:], m.GameSvrID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.DtEventTime)))
	i += copy(dAtA[i:], m.DtEventTime)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VGameAppID)))
	i += copy(dAtA[i:], m.VGameAppID)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlatID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IZoneAreaID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VOpenID)))
	i += copy(dAtA[i:], m.VOpenID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.VRoleName)))
	i += copy(dAtA[i:], m.VRoleName)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.VRoleProfession))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.Level))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.PlayerFriendsNum))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.ClientVersion)))
	i += copy(dAtA[i:], m.ClientVersion)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SystemHardware)))
	i += copy(dAtA[i:], m.SystemHardware)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.TelecomOper)))
	i += copy(dAtA[i:], m.TelecomOper)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.Network)))
	i += copy(dAtA[i:], m.Network)
	dAtA[i] = 0x78
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.LoginChannel))
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.BillNo)))
	i += copy(dAtA[i:], m.BillNo)
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IMoneyType))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.IMoney))
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.SuccGoods)))
	i += copy(dAtA[i:], m.SuccGoods)
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(len(m.FailGoods)))
	i += copy(dAtA[i:], m.FailGoods)
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SuccBuy))
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGame(dAtA, i, uint64(m.SuccRoll))
	return i, nil
}

func encodeFixed64Game(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Game(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGame(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserMainDataNotify) Name() string {
	return "UserMainDataNotify"
}

func (m *Vector3) Name() string {
	return "Vector3"
}

func (m *T_Object) Name() string {
	return "T_Object"
}

func (m *ChracterMapDataInfo) Name() string {
	return "ChracterMapDataInfo"
}

func (m *RefreshObjectNotify) Name() string {
	return "RefreshObjectNotify"
}

func (m *UseObjectReq) Name() string {
	return "UseObjectReq"
}

func (m *RemoveObjectNotify) Name() string {
	return "RemoveObjectNotify"
}

func (m *RefreshGunNotify) Name() string {
	return "RefreshGunNotify"
}

func (m *DropGunNotify) Name() string {
	return "DropGunNotify"
}

func (m *ExchangeGunReq) Name() string {
	return "ExchangeGunReq"
}

func (m *ExchangeGunRet) Name() string {
	return "ExchangeGunRet"
}

func (m *GunReformReq) Name() string {
	return "GunReformReq"
}

func (m *GunReformUnequipReq) Name() string {
	return "GunReformUnequipReq"
}

func (m *AttackReq) Name() string {
	return "AttackReq"
}

func (m *ShootReq) Name() string {
	return "ShootReq"
}

func (m *MapCharacterResultNotify) Name() string {
	return "MapCharacterResultNotify"
}

func (m *ChatNotify) Name() string {
	return "ChatNotify"
}

func (m *ZoneNotify) Name() string {
	return "ZoneNotify"
}

func (m *ChangeBulletReq) Name() string {
	return "ChangeBulletReq"
}

func (m *ChangeBulletRet) Name() string {
	return "ChangeBulletRet"
}

func (m *TeamMemberInfo) Name() string {
	return "TeamMemberInfo"
}

func (m *SyncTeamInfoRet) Name() string {
	return "SyncTeamInfoRet"
}

func (m *RefreshPackCellNotify) Name() string {
	return "RefreshPackCellNotify"
}

func (m *SummonAINotify) Name() string {
	return "SummonAINotify"
}

func (m *RefreshGunBulletNotify) Name() string {
	return "RefreshGunBulletNotify"
}

func (m *InitRoomTeamPlayerItem) Name() string {
	return "InitRoomTeamPlayerItem"
}

func (m *InitRoomTeamInfoRet) Name() string {
	return "InitRoomTeamInfoRet"
}

func (m *SyncRoomTeamPlayerItem) Name() string {
	return "SyncRoomTeamPlayerItem"
}

func (m *SymcRoomTeamInfoRet) Name() string {
	return "SymcRoomTeamInfoRet"
}

func (m *DieNotifyRet) Name() string {
	return "DieNotifyRet"
}

func (m *CopilotData) Name() string {
	return "CopilotData"
}

func (m *VehicleProp) Name() string {
	return "VehicleProp"
}

func (m *ItemProp) Name() string {
	return "ItemProp"
}

func (m *RefreshBoxObjNotify) Name() string {
	return "RefreshBoxObjNotify"
}

func (m *HeadProp) Name() string {
	return "HeadProp"
}

func (m *BodyProp) Name() string {
	return "BodyProp"
}

func (m *BackPackProp) Name() string {
	return "BackPackProp"
}

func (m *PlayerRegister) Name() string {
	return "PlayerRegister"
}

func (m *PlayerLogin) Name() string {
	return "PlayerLogin"
}

func (m *PlayerLogout) Name() string {
	return "PlayerLogout"
}

func (m *MailObject) Name() string {
	return "MailObject"
}

func (m *MailInfo) Name() string {
	return "MailInfo"
}

func (m *MailInfoList) Name() string {
	return "MailInfoList"
}

func (m *ReqGetMailList) Name() string {
	return "ReqGetMailList"
}

func (m *RetMailList) Name() string {
	return "RetMailList"
}

func (m *ReqMailInfo) Name() string {
	return "ReqMailInfo"
}

func (m *RetMailInfo) Name() string {
	return "RetMailInfo"
}

func (m *DelMail) Name() string {
	return "DelMail"
}

func (m *GetMailObj) Name() string {
	return "GetMailObj"
}

func (m *AnnuonceInfo) Name() string {
	return "AnnuonceInfo"
}

func (m *InitAnnuonceInfoRet) Name() string {
	return "InitAnnuonceInfoRet"
}

func (m *FriendInfo) Name() string {
	return "FriendInfo"
}

func (m *PlatFriendStateReq) Name() string {
	return "PlatFriendStateReq"
}

func (m *PlatFriendState) Name() string {
	return "PlatFriendState"
}

func (m *PlatFriendStateRet) Name() string {
	return "PlatFriendStateRet"
}

func (m *FriendRankInfo) Name() string {
	return "FriendRankInfo"
}

func (m *SyncFriendRankList) Name() string {
	return "SyncFriendRankList"
}

func (m *SyncFriendList) Name() string {
	return "SyncFriendList"
}

func (m *FriendApplyInfo) Name() string {
	return "FriendApplyInfo"
}

func (m *SyncFriendApplyList) Name() string {
	return "SyncFriendApplyList"
}

func (m *DoSendItemReq) Name() string {
	return "DoSendItemReq"
}

func (m *GameSvrState) Name() string {
	return "GameSvrState"
}

func (m *RoundFlow) Name() string {
	return "RoundFlow"
}

func (m *CareerData) Name() string {
	return "CareerData"
}

func (m *CareerBase) Name() string {
	return "CareerBase"
}

func (m *MatchRecord) Name() string {
	return "MatchRecord"
}

func (m *DayRecordData) Name() string {
	return "DayRecordData"
}

func (m *SettleDayData) Name() string {
	return "SettleDayData"
}

func (m *DayTag) Name() string {
	return "DayTag"
}

func (m *VehiclePhysics) Name() string {
	return "VehiclePhysics"
}

func (m *Vehicle) Name() string {
	return "Vehicle"
}

func (m *DamageDefend) Name() string {
	return "DamageDefend"
}

func (m *ThrowDamageInfo) Name() string {
	return "ThrowDamageInfo"
}

func (m *DoorList) Name() string {
	return "DoorList"
}

func (m *DoorData) Name() string {
	return "DoorData"
}

func (m *LogItem) Name() string {
	return "LogItem"
}

func (m *SpaceLogInfo) Name() string {
	return "SpaceLogInfo"
}

func (m *GuideFlow) Name() string {
	return "GuideFlow"
}

func (m *ChatFlow) Name() string {
	return "ChatFlow"
}

func (m *BattleItemFlow) Name() string {
	return "BattleItemFlow"
}

func (m *BattleFlow) Name() string {
	return "BattleFlow"
}

func (m *BattleResult) Name() string {
	return "BattleResult"
}

func (m *MatchFlow) Name() string {
	return "MatchFlow"
}

func (m *LiveFlow) Name() string {
	return "LiveFlow"
}

func (m *GunFlow) Name() string {
	return "GunFlow"
}

func (m *CampFlow) Name() string {
	return "CampFlow"
}

func (m *ShopFlow) Name() string {
	return "ShopFlow"
}

func (m *OperFlow) Name() string {
	return "OperFlow"
}

func (m *MoneyFlow) Name() string {
	return "MoneyFlow"
}

func (m *SnsFlow) Name() string {
	return "SnsFlow"
}

func (m *SecGameStartFlow) Name() string {
	return "SecGameStartFlow"
}

func (m *SecGameEndFlow) Name() string {
	return "SecGameEndFlow"
}

func (m *ShareRMBMoney) Name() string {
	return "ShareRMBMoney"
}

func (m *OwnGoodsItem) Name() string {
	return "OwnGoodsItem"
}

func (m *OwnGoodsInfo) Name() string {
	return "OwnGoodsInfo"
}

func (m *MemVoiceInfo) Name() string {
	return "MemVoiceInfo"
}

func (m *TeamVoiceInfo) Name() string {
	return "TeamVoiceInfo"
}

func (m *SettleMemInfo) Name() string {
	return "SettleMemInfo"
}

func (m *SettleInfo) Name() string {
	return "SettleInfo"
}

func (m *RefreshObjectListNotify) Name() string {
	return "RefreshObjectListNotify"
}

func (m *StrangerList) Name() string {
	return "StrangerList"
}

func (m *ReConnetionFlow) Name() string {
	return "ReConnetionFlow"
}

func (m *DropBoxInfo) Name() string {
	return "DropBoxInfo"
}

func (m *DropBoxList) Name() string {
	return "DropBoxList"
}

func (m *ItemFlow) Name() string {
	return "ItemFlow"
}

func (m *ModeInfo) Name() string {
	return "ModeInfo"
}

func (m *MatchModeNotify) Name() string {
	return "MatchModeNotify"
}

func (m *ActivityState) Name() string {
	return "ActivityState"
}

func (m *ActivitysInfo) Name() string {
	return "ActivitysInfo"
}

func (m *MedalDataItem) Name() string {
	return "MedalDataItem"
}

func (m *MedalDataList) Name() string {
	return "MedalDataList"
}

func (m *KillDrop) Name() string {
	return "KillDrop"
}

func (m *KillDropList) Name() string {
	return "KillDropList"
}

func (m *GoodRecordFlow) Name() string {
	return "GoodRecordFlow"
}

func (m *GoodsTimeLeft) Name() string {
	return "GoodsTimeLeft"
}

func (m *GoodsTimeLeftNotify) Name() string {
	return "GoodsTimeLeftNotify"
}

func (m *NewYearGood) Name() string {
	return "NewYearGood"
}

func (m *NewYearInfo) Name() string {
	return "NewYearInfo"
}

func (m *AchievementFlow) Name() string {
	return "AchievementFlow"
}

func (m *InsigniaFlow) Name() string {
	return "InsigniaFlow"
}

func (m *Achievement) Name() string {
	return "Achievement"
}

func (m *AchievementProcess) Name() string {
	return "AchievementProcess"
}

func (m *AchievmentInfo) Name() string {
	return "AchievmentInfo"
}

func (m *Insignia) Name() string {
	return "Insignia"
}

func (m *InsigniaInfo) Name() string {
	return "InsigniaInfo"
}

func (m *AwardItem) Name() string {
	return "AwardItem"
}

func (m *SeasonAwards) Name() string {
	return "SeasonAwards"
}

func (m *WearInGame) Name() string {
	return "WearInGame"
}

func (m *WearInGameFlow) Name() string {
	return "WearInGameFlow"
}

func (m *EliteWeaponPos) Name() string {
	return "EliteWeaponPos"
}

func (m *EliteWeaponPosList) Name() string {
	return "EliteWeaponPosList"
}

func (m *DropBoxPos) Name() string {
	return "DropBoxPos"
}

func (m *DropBoxPosList) Name() string {
	return "DropBoxPosList"
}

func (m *TreasureBoxInfo) Name() string {
	return "TreasureBoxInfo"
}

func (m *TreasureBoxList) Name() string {
	return "TreasureBoxList"
}

func (m *TreasureBoxFlow) Name() string {
	return "TreasureBoxFlow"
}

func (m *MilitaryRankFlow) Name() string {
	return "MilitaryRankFlow"
}

func (m *TaskItem) Name() string {
	return "TaskItem"
}

func (m *TaskUpdate) Name() string {
	return "TaskUpdate"
}

func (m *ActiveAwardsBox) Name() string {
	return "ActiveAwardsBox"
}

func (m *DayTaskDetail) Name() string {
	return "DayTaskDetail"
}

func (m *DayTaskFlow) Name() string {
	return "DayTaskFlow"
}

func (m *ActivenessFlow) Name() string {
	return "ActivenessFlow"
}

func (m *ComradeTaskFlow) Name() string {
	return "ComradeTaskFlow"
}

func (m *PlayerPos) Name() string {
	return "PlayerPos"
}

func (m *PlayerPosList) Name() string {
	return "PlayerPosList"
}

func (m *FollowInfo) Name() string {
	return "FollowInfo"
}

func (m *FollowDetail) Name() string {
	return "FollowDetail"
}

func (m *ShellExplodeNotify) Name() string {
	return "ShellExplodeNotify"
}

func (m *AwardInfo) Name() string {
	return "AwardInfo"
}

func (m *OldBringNewDetail) Name() string {
	return "OldBringNewDetail"
}

func (m *ComradeTaskDetail) Name() string {
	return "ComradeTaskDetail"
}

func (m *VeteranInfo) Name() string {
	return "VeteranInfo"
}

func (m *VeteranRecallList) Name() string {
	return "VeteranRecallList"
}

func (m *VeteranRecallReward) Name() string {
	return "VeteranRecallReward"
}

func (m *WeaponInfo) Name() string {
	return "WeaponInfo"
}

func (m *WeaponInGame) Name() string {
	return "WeaponInGame"
}

func (m *VehicleFullNotify) Name() string {
	return "VehicleFullNotify"
}

func (m *PreferenceInfo) Name() string {
	return "PreferenceInfo"
}

func (m *PreferenceList) Name() string {
	return "PreferenceList"
}

func (m *PreferenceFlow) Name() string {
	return "PreferenceFlow"
}

func (m *GameRecordDetail) Name() string {
	return "GameRecordDetail"
}

func (m *ContestInfo) Name() string {
	return "ContestInfo"
}

func (m *ChampionContestInfo) Name() string {
	return "ChampionContestInfo"
}

func (m *OddsInfo) Name() string {
	return "OddsInfo"
}

func (m *ChampionOddsInfo) Name() string {
	return "ChampionOddsInfo"
}

func (m *ContestRecord) Name() string {
	return "ContestRecord"
}

func (m *ChampionContestRecord) Name() string {
	return "ChampionContestRecord"
}

func (m *WorldCupMatch) Name() string {
	return "WorldCupMatch"
}

func (m *WorldCupMatchInfo) Name() string {
	return "WorldCupMatchInfo"
}

func (m *WorldCupMatchRecord) Name() string {
	return "WorldCupMatchRecord"
}

func (m *WorldCupMatchRecordInfo) Name() string {
	return "WorldCupMatchRecordInfo"
}

func (m *FestivalInfo) Name() string {
	return "FestivalInfo"
}

func (m *FestivalList) Name() string {
	return "FestivalList"
}

func (m *ExchangeInfo) Name() string {
	return "ExchangeInfo"
}

func (m *ExchangeList) Name() string {
	return "ExchangeList"
}

func (m *ExchangeTotalList) Name() string {
	return "ExchangeTotalList"
}

func (m *FestivalFlow) Name() string {
	return "FestivalFlow"
}

func (m *ExchangeFlow) Name() string {
	return "ExchangeFlow"
}

func (m *BallStarReward) Name() string {
	return "BallStarReward"
}

func (m *BallStarInfo) Name() string {
	return "BallStarInfo"
}

func (m *BallStarFlow) Name() string {
	return "BallStarFlow"
}

func (m *CheaterReportFlow) Name() string {
	return "CheaterReportFlow"
}

func (m *WorldCupChampionFlow) Name() string {
	return "WorldCupChampionFlow"
}

func (m *WorldCupMatchFlow) Name() string {
	return "WorldCupMatchFlow"
}

func (m *TaskList) Name() string {
	return "TaskList"
}

func (m *AwardList) Name() string {
	return "AwardList"
}

func (m *TaskDetail) Name() string {
	return "TaskDetail"
}

func (m *SpecialTaskDetail) Name() string {
	return "SpecialTaskDetail"
}

func (m *TaskFlow) Name() string {
	return "TaskFlow"
}

func (m *ChaterInfo) Name() string {
	return "ChaterInfo"
}

func (m *TeamCustom) Name() string {
	return "TeamCustom"
}

func (m *ChatDetail) Name() string {
	return "ChatDetail"
}

func (m *ChatInfo) Name() string {
	return "ChatInfo"
}

func (m *UnreadChatDetail) Name() string {
	return "UnreadChatDetail"
}

func (m *AnnouncementDetail) Name() string {
	return "AnnouncementDetail"
}

func (m *SkillPosition) Name() string {
	return "SkillPosition"
}

func (m *ModeSkillInfo) Name() string {
	return "ModeSkillInfo"
}

func (m *RoleSkillInfo) Name() string {
	return "RoleSkillInfo"
}

func (m *AllSkillList) Name() string {
	return "AllSkillList"
}

func (m *SkillEffect) Name() string {
	return "SkillEffect"
}

func (m *SkillEffectList) Name() string {
	return "SkillEffectList"
}

func (m *BattleBookingFlow) Name() string {
	return "BattleBookingFlow"
}

func (m *CommonTaskList) Name() string {
	return "CommonTaskList"
}

func (m *ChallengeTaskDetail) Name() string {
	return "ChallengeTaskDetail"
}

func (m *BattleBookingInfo) Name() string {
	return "BattleBookingInfo"
}

func (m *SpecialExpFlow) Name() string {
	return "SpecialExpFlow"
}

func (m *WatchFlow) Name() string {
	return "WatchFlow"
}

func (m *Uint32Array) Name() string {
	return "Uint32Array"
}

func (m *MonthCardFlow) Name() string {
	return "MonthCardFlow"
}

func (m *RedDotOnce) Name() string {
	return "RedDotOnce"
}

func (m *RedDotList) Name() string {
	return "RedDotList"
}

func (m *SeasonExpFlow) Name() string {
	return "SeasonExpFlow"
}

func (m *SkillUseFlow) Name() string {
	return "SkillUseFlow"
}

func (m *BuyGoodsFlow) Name() string {
	return "BuyGoodsFlow"
}

func (m *UserMainDataNotify) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Uid))
	l = len(m.Name_)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Coins))
	n += 1 + sovGame(uint64(m.Diams))
	return n
}

func (m *Vector3) Size() (n int) {
	var l int
	_ = l
	n += 5
	n += 5
	n += 5
	return n
}

func (m *T_Object) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Baseid))
	n += 1 + sovGame(uint64(m.Thisid))
	n += 1 + sovGame(uint64(m.Count))
	if len(m.Gunreform) > 0 {
		for _, e := range m.Gunreform {
			n += 1 + sovGame(uint64(e))
		}
	}
	n += 1 + sovGame(uint64(m.Bullet))
	n += 1 + sovGame(uint64(m.Reducedam))
	return n
}

func (m *ChracterMapDataInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Uid))
	l = len(m.Name_)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Level))
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 5
	n += 1 + sovGame(uint64(m.Maxhp))
	n += 1 + sovGame(uint64(m.Hp))
	n += 5
	if m.Weapon != nil {
		l = m.Weapon.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Secweapon != nil {
		l = m.Secweapon.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if len(m.Armors) > 0 {
		for _, e := range m.Armors {
			n += 1 + sovGame(uint64(e))
		}
	}
	return n
}

func (m *RefreshObjectNotify) Size() (n int) {
	var l int
	_ = l
	if m.Obj != nil {
		l = m.Obj.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *UseObjectReq) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Thisid))
	return n
}

func (m *RemoveObjectNotify) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Thisid))
	return n
}

func (m *RefreshGunNotify) Size() (n int) {
	var l int
	_ = l
	if m.Objs != nil {
		l = m.Objs.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 1 + sovGame(uint64(m.Useweapon))
	n += 1 + sovGame(uint64(m.Uid))
	return n
}

func (m *DropGunNotify) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Uid))
	if m.Use != nil {
		l = m.Use.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *ExchangeGunReq) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Useweapon))
	return n
}

func (m *ExchangeGunRet) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Useweapon))
	n += 1 + sovGame(uint64(m.Uid))
	return n
}

func (m *GunReformReq) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Reformthisid))
	n += 1 + sovGame(uint64(m.Gunthisid))
	return n
}

func (m *GunReformUnequipReq) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Gunthisid))
	n += 1 + sovGame(uint64(m.Baseid))
	return n
}

func (m *AttackReq) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Defendid))
	n += 2
	if m.Origion != nil {
		l = m.Origion.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Dir != nil {
		l = m.Dir.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 1 + sovGame(uint64(m.Firetime))
	n += 5
	n += 1 + sovGame(uint64(m.Attackid))
	n += 1 + sovGame(uint64(m.AttackPos))
	return n
}

func (m *ShootReq) Size() (n int) {
	var l int
	_ = l
	n += 2
	n += 1 + sovGame(uint64(m.Attackid))
	return n
}

func (m *MapCharacterResultNotify) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Rank))
	n += 1 + sovGame(uint64(m.Kill))
	n += 1 + sovGame(uint64(m.Timeinseconds))
	n += 1 + sovGame(uint64(m.Amount))
	n += 1 + sovGame(uint64(m.Round))
	n += 1 + sovGame(uint64(m.Headshotnum))
	n += 1 + sovGame(uint64(m.Shotnum))
	n += 1 + sovGame(uint64(m.Effectharm))
	n += 1 + sovGame(uint64(m.Recovernum))
	n += 1 + sovGame(uint64(m.Revivenum))
	n += 5
	n += 1 + sovGame(uint64(m.Destroycarnum))
	n += 1 + sovGame(uint64(m.Killstmnum))
	n += 1 + sovGame(uint64(m.Attacknum))
	n += 1 + sovGame(uint64(m.Roadkillnum))
	n += 2 + sovGame(uint64(m.Clothnum))
	n += 2 + sovGame(uint64(m.Speednum))
	n += 6
	n += 6
	n += 6
	n += 2 + sovGame(uint64(m.Totalrank))
	n += 6
	n += 2 + sovGame(uint64(m.Coin))
	l = len(m.BraveCoin)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.Matchmode))
	return n
}

func (m *ChatNotify) Size() (n int) {
	var l int
	_ = l
	l = len(m.Content)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Type))
	return n
}

func (m *ZoneNotify) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Type))
	if m.Center != nil {
		l = m.Center.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 5
	n += 1 + sovGame(uint64(m.Interval))
	return n
}

func (m *ChangeBulletReq) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}

func (m *ChangeBulletRet) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Uid))
	n += 1 + sovGame(uint64(m.Bullet))
	return n
}

func (m *TeamMemberInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Uid))
	l = len(m.Name_)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.MemState))
	n += 1 + sovGame(uint64(m.Modelid))
	n += 1 + sovGame(uint64(m.Intotime))
	l = len(m.Location)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Dbid))
	l = len(m.Insignia)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Veteran))
	n += 1 + sovGame(uint64(m.NameColor))
	n += 1 + sovGame(uint64(m.OutsideWeapon))
	return n
}

func (m *SyncTeamInfoRet) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.TeamState))
	if len(m.Memberinfo) > 0 {
		for _, e := range m.Memberinfo {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	n += 1 + sovGame(uint64(m.Leaderid))
	n += 1 + sovGame(uint64(m.Teamtype))
	n += 1 + sovGame(uint64(m.Automatch))
	n += 1 + sovGame(uint64(m.Mapid))
	return n
}

func (m *RefreshPackCellNotify) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Num))
	return n
}

func (m *SummonAINotify) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Ainum))
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			n += 1 + sovGame(uint64(e))
		}
	}
	n += 1 + sovGame(uint64(m.Skybox))
	n += 1 + sovGame(uint64(m.SceneType))
	return n
}

func (m *RefreshGunBulletNotify) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Thisid))
	n += 1 + sovGame(uint64(m.Bullet))
	return n
}

func (m *InitRoomTeamPlayerItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	l = len(m.Name_)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Hp))
	n += 1 + sovGame(uint64(m.Maxhp))
	n += 1 + sovGame(uint64(m.State))
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 1 + sovGame(uint64(m.Color))
	n += 1 + sovGame(uint64(m.NameColor))
	return n
}

func (m *InitRoomTeamInfoRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *SyncRoomTeamPlayerItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.Hp))
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 1 + sovGame(uint64(m.State))
	if m.Rota != nil {
		l = m.Rota.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *SymcRoomTeamInfoRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *DieNotifyRet) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Type))
	n += 1 + sovGame(uint64(m.Attackerid))
	n += 1 + sovGame(uint64(m.Defenderid))
	l = len(m.Attackername)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Defendername)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.IsHeadhost))
	n += 1 + sovGame(uint64(m.Gunid))
	n += 1 + sovGame(uint64(m.Defenderstate))
	n += 1 + sovGame(uint64(m.CurAliveSum))
	l = len(m.Attackerinsignia)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Defenderinsignia)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Attackercolor))
	n += 1 + sovGame(uint64(m.Defendercolor))
	return n
}

func (m *CopilotData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Index))
	n += 1 + sovGame(uint64(m.Id))
	return n
}

func (m *VehicleProp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.VehicleID))
	n += 1 + sovGame(uint64(m.PilotID))
	if len(m.Copilots) > 0 {
		for _, e := range m.Copilots {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	n += 2
	n += 1 + sovGame(uint64(m.Reducedam))
	n += 1 + sovGame(uint64(m.Thisid))
	n += 1 + sovGame(uint64(m.Reducemax))
	n += 1 + sovGame(uint64(m.Usetime))
	n += 2
	n += 5
	n += 5
	return n
}

func (m *ItemProp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Baseid))
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.Num))
	return n
}

func (m *RefreshBoxObjNotify) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *HeadProp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Baseid))
	n += 1 + sovGame(uint64(m.Reducedam))
	n += 1 + sovGame(uint64(m.Maxreduce))
	n += 1 + sovGame(uint64(m.Itemid))
	return n
}

func (m *BodyProp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Baseid))
	n += 1 + sovGame(uint64(m.Reducedam))
	n += 1 + sovGame(uint64(m.Maxreduce))
	return n
}

func (m *BackPackProp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Baseid))
	n += 1 + sovGame(uint64(m.Itemid))
	return n
}

func (m *PlayerRegister) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.RegChannel)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	return n
}

func (m *PlayerLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	l = len(m.VRoleID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.RegChannel)
	n += 2 + l + sovGame(uint64(l))
	return n
}

func (m *PlayerLogout) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.OnlineTime))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	return n
}

func (m *MailObject) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.Num))
	return n
}

func (m *MailInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Mailid))
	n += 1 + sovGame(uint64(m.Mailtype))
	n += 1 + sovGame(uint64(m.Gettime))
	n += 2
	l = len(m.Title)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Text)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Url)
	n += 1 + l + sovGame(uint64(l))
	if len(m.Objs) > 0 {
		for _, e := range m.Objs {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	n += 2
	l = len(m.Button)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Os)
	n += 1 + l + sovGame(uint64(l))
	return n
}

func (m *MailInfoList) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *ReqGetMailList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RetMailList) Size() (n int) {
	var l int
	_ = l
	if len(m.Mails) > 0 {
		for _, e := range m.Mails {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *ReqMailInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Mailid))
	return n
}

func (m *RetMailInfo) Size() (n int) {
	var l int
	_ = l
	if m.Mail != nil {
		l = m.Mail.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *DelMail) Size() (n int) {
	var l int
	_ = l
	if len(m.Mailid) > 0 {
		for _, e := range m.Mailid {
			n += 1 + sovGame(uint64(e))
		}
	}
	return n
}

func (m *GetMailObj) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Mailid))
	return n
}

func (m *AnnuonceInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.StartTime))
	n += 1 + sovGame(uint64(m.EndTime))
	n += 1 + sovGame(uint64(m.InternalTime))
	l = len(m.Content)
	n += 1 + l + sovGame(uint64(l))
	return n
}

func (m *InitAnnuonceInfoRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *FriendInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	l = len(m.Name_)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.State))
	n += 1 + sovGame(uint64(m.Time))
	l = len(m.Url)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Enterplat)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Qqvip))
	l = len(m.Nickname)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Gender))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.Watchable))
	n += 2
	l = len(m.BattleTeam)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Stamp))
	n += 1 + sovGame(uint64(m.NameColor))
	return n
}

func (m *PlatFriendStateReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Openid) > 0 {
		for _, s := range m.Openid {
			l = len(s)
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *PlatFriendState) Size() (n int) {
	var l int
	_ = l
	l = len(m.Openid)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Uid))
	n += 1 + sovGame(uint64(m.State))
	n += 1 + sovGame(uint64(m.Time))
	l = len(m.Name_)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.NameColor))
	n += 2
	return n
}

func (m *PlatFriendStateRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *FriendRankInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Uid))
	l = len(m.Name_)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Url)
	n += 1 + l + sovGame(uint64(l))
	n += 5
	n += 5
	n += 5
	n += 1 + sovGame(uint64(m.QqVip))
	l = len(m.GameEenter)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.NameColor))
	return n
}

func (m *SyncFriendRankList) Size() (n int) {
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *SyncFriendList) Size() (n int) {
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.BlackList) > 0 {
		for _, e := range m.BlackList {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *FriendApplyInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	l = len(m.Name_)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.ApplyTime))
	l = len(m.Url)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.NameColor))
	return n
}

func (m *SyncFriendApplyList) Size() (n int) {
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *DoSendItemReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Content)
	n += 1 + l + sovGame(uint64(l))
	if len(m.Objs) > 0 {
		for _, e := range m.Objs {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	l = len(m.Url)
	n += 1 + l + sovGame(uint64(l))
	return n
}

func (m *GameSvrState) Size() (n int) {
	var l int
	_ = l
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameIP)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	return n
}

func (m *RoundFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.BattleID))
	n += 1 + sovGame(uint64(m.BattleType))
	n += 1 + sovGame(uint64(m.RoundScore))
	n += 1 + sovGame(uint64(m.RoundTime))
	n += 1 + sovGame(uint64(m.Result))
	n += 1 + sovGame(uint64(m.Rank))
	n += 1 + sovGame(uint64(m.Gold))
	n += 1 + sovGame(uint64(m.TotalBattleNum))
	n += 1 + sovGame(uint64(m.FirstNum))
	n += 2 + sovGame(uint64(m.TopTenNum))
	l = len(m.FirstRate)
	n += 2 + l + sovGame(uint64(l))
	l = len(m.TopTenRate)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.SingleMaxKill))
	n += 2 + sovGame(uint64(m.TotalKillNum))
	l = len(m.AverageKillNum)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.SingleMaxHeadShot))
	n += 2 + sovGame(uint64(m.TotalHeadShot))
	n += 2 + sovGame(uint64(m.TotalEffectHarm))
	l = len(m.AverageEffectHarm)
	n += 2 + l + sovGame(uint64(l))
	l = len(m.HeadShotRate)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.RecvItemUseNum))
	n += 2 + sovGame(uint64(m.CarUseNum))
	n += 2 + sovGame(uint64(m.CarDestroyNum))
	n += 6
	n += 6
	n += 6
	n += 6
	n += 2 + sovGame(uint64(m.PlayerNum))
	n += 2 + sovGame(uint64(m.AINum))
	n += 6
	n += 6
	n += 2 + sovGame(uint64(m.DEADTYPE))
	n += 2 + sovGame(uint64(m.RecoverHp))
	n += 2 + sovGame(uint64(m.BandageNum))
	n += 2 + sovGame(uint64(m.MedicalBoxNum))
	n += 2 + sovGame(uint64(m.PainkillerNum))
	n += 2 + sovGame(uint64(m.EnergyNum))
	n += 2 + sovGame(uint64(m.HeadShotNum))
	n += 2 + sovGame(uint64(m.EffectHarm))
	n += 2 + sovGame(uint64(m.ShotNum))
	n += 2 + sovGame(uint64(m.ReviveNum))
	n += 6
	n += 2 + sovGame(uint64(m.KillStmNum))
	n += 2 + sovGame(uint64(m.RCarUseNum))
	n += 2 + sovGame(uint64(m.RCarDestoryNum))
	n += 2 + sovGame(uint64(m.AttackNum))
	n += 2 + sovGame(uint64(m.SkyBox))
	n += 2 + sovGame(uint64(m.Kill))
	n += 2 + sovGame(uint64(m.TotalSurviveTime))
	n += 6
	n += 2 + sovGame(uint64(m.TotalRank))
	n += 6
	n += 6
	n += 6
	n += 2 + sovGame(uint64(m.SoloRank))
	n += 2 + sovGame(uint64(m.DuoRank))
	n += 2 + sovGame(uint64(m.SquadRank))
	n += 6
	n += 2 + sovGame(uint64(m.TotalCoin))
	n += 6
	n += 2 + sovGame(uint64(m.TeamID))
	n += 2 + sovGame(uint64(m.GunID))
	n += 2 + sovGame(uint64(m.SightID))
	n += 2 + sovGame(uint64(m.SilenceID))
	n += 2 + sovGame(uint64(m.MagazineID))
	n += 2 + sovGame(uint64(m.StockID))
	n += 2 + sovGame(uint64(m.HandleID))
	l = len(m.OpenIDByKill)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.GunIDByKill))
	n += 2 + sovGame(uint64(m.SightIDByKill))
	n += 2 + sovGame(uint64(m.SilenceIDByKill))
	n += 2 + sovGame(uint64(m.MagazineIDByKill))
	n += 2 + sovGame(uint64(m.StockIDByKill))
	n += 2 + sovGame(uint64(m.HandleIDByKill))
	n += 2 + sovGame(uint64(m.DeadIsHead))
	n += 2 + sovGame(uint64(m.WatchType))
	n += 2 + sovGame(uint64(m.WatchTime))
	n += 2 + sovGame(uint64(m.LoadFailPlayerNum))
	l = len(m.VRoleName)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.MatchMode))
	n += 2 + sovGame(uint64(m.ParachuteType))
	n += 2 + sovGame(uint64(m.TankUseTime))
	n += 2 + sovGame(uint64(m.TankKillNum))
	return n
}

func (m *CareerData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Uid))
	n += 1 + sovGame(uint64(m.TotalBattleNum))
	n += 1 + sovGame(uint64(m.TotalFirstNum))
	n += 1 + sovGame(uint64(m.TotalTopTenNum))
	n += 1 + sovGame(uint64(m.TotalKillNum))
	n += 1 + sovGame(uint64(m.TotalHeadShot))
	n += 1 + sovGame(uint64(m.TotalShotNum))
	n += 1 + sovGame(uint64(m.TotalEffectHarm))
	n += 1 + sovGame(uint64(m.TotalSurviveTime))
	n += 5
	n += 5
	n += 1 + sovGame(uint64(m.SoloRank))
	n += 5
	n += 1 + sovGame(uint64(m.DuoRank))
	n += 5
	n += 2 + sovGame(uint64(m.SquadRank))
	n += 6
	n += 2 + sovGame(uint64(m.TotalRank))
	n += 6
	n += 2 + sovGame(uint64(m.NameColor))
	return n
}

func (m *CareerBase) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.TotalBattleNum))
	n += 1 + sovGame(uint64(m.FirstNum))
	n += 1 + sovGame(uint64(m.TopTenNum))
	n += 1 + sovGame(uint64(m.TotalKillNum))
	n += 1 + sovGame(uint64(m.TotalHeadShot))
	n += 1 + sovGame(uint64(m.Totalshotnum))
	n += 1 + sovGame(uint64(m.TotalEffectHarm))
	n += 1 + sovGame(uint64(m.SurviveTime))
	n += 5
	n += 5
	n += 5
	n += 5
	n += 5
	n += 5
	n += 5
	n += 6
	n += 6
	n += 6
	n += 6
	n += 2 + sovGame(uint64(m.Totalrank))
	n += 2 + sovGame(uint64(m.SoloRank))
	n += 2 + sovGame(uint64(m.DoubleRank))
	n += 2 + sovGame(uint64(m.SquadRank))
	n += 6
	n += 2 + sovGame(uint64(m.SingleMaxKill))
	n += 2 + sovGame(uint64(m.SingleMaxHeadShot))
	n += 2 + sovGame(uint64(m.RecvItemUseNum))
	n += 2 + sovGame(uint64(m.CarUseNum))
	n += 2 + sovGame(uint64(m.CarDestroyNum))
	n += 2 + sovGame(uint64(m.Id))
	return n
}

func (m *MatchRecord) Size() (n int) {
	var l int
	_ = l
	if len(m.Solomodel) > 0 {
		for _, e := range m.Solomodel {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Duomodel) > 0 {
		for _, e := range m.Duomodel {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Squadmodel) > 0 {
		for _, e := range m.Squadmodel {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *DayRecordData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.NowTime))
	n += 1 + sovGame(uint64(m.Model))
	n += 5
	n += 1 + sovGame(uint64(m.TotalKillNum))
	n += 1 + sovGame(uint64(m.DayBattleNum))
	n += 1 + sovGame(uint64(m.FirstNum))
	n += 1 + sovGame(uint64(m.TopTenNum))
	l = len(m.Id)
	n += 1 + l + sovGame(uint64(l))
	return n
}

func (m *SettleDayData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.FirstNum))
	n += 1 + sovGame(uint64(m.TopTenNum))
	n += 5
	n += 5
	n += 1 + sovGame(uint64(m.TotalEffectHarm))
	n += 1 + sovGame(uint64(m.TotalShotNum))
	n += 1 + sovGame(uint64(m.SurviveTime))
	n += 5
	n += 1 + sovGame(uint64(m.AttackNum))
	n += 1 + sovGame(uint64(m.RecoverNum))
	n += 1 + sovGame(uint64(m.Revivenum))
	n += 1 + sovGame(uint64(m.HeadShotNum))
	n += 1 + sovGame(uint64(m.DayBattleNum))
	n += 1 + sovGame(uint64(m.NowTime))
	n += 1 + sovGame(uint64(m.TotalRank))
	l = len(m.ServerType)
	n += 2 + l + sovGame(uint64(l))
	if len(m.Tag) > 0 {
		for _, e := range m.Tag {
			l = e.Size()
			n += 2 + l + sovGame(uint64(l))
		}
	}
	l = len(m.Id)
	n += 2 + l + sovGame(uint64(l))
	return n
}

func (m *DayTag) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tag)
	n += 1 + l + sovGame(uint64(l))
	return n
}

func (m *VehiclePhysics) Size() (n int) {
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Rotation != nil {
		l = m.Rotation.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Velocity != nil {
		l = m.Velocity.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.AngularVelocity != nil {
		l = m.AngularVelocity.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 1 + sovGame(uint64(m.Gear))
	return n
}

func (m *Vehicle) Size() (n int) {
	var l int
	_ = l
	if m.Prop != nil {
		l = m.Prop.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Physics != nil {
		l = m.Physics.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 1 + sovGame(uint64(m.Ownerid))
	return n
}

func (m *DamageDefend) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.Dam))
	return n
}

func (m *ThrowDamageInfo) Size() (n int) {
	var l int
	_ = l
	if m.Center != nil {
		l = m.Center.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 1 + sovGame(uint64(m.Baseid))
	if len(m.Defends) > 0 {
		for _, e := range m.Defends {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *DoorList) Size() (n int) {
	var l int
	_ = l
	if len(m.DoorList) > 0 {
		for _, e := range m.DoorList {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *DoorData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 1 + sovGame(uint64(m.State))
	return n
}

func (m *LogItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Baseid))
	n += 1 + sovGame(uint64(m.Num))
	return n
}

func (m *SpaceLogInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *GuideFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrId)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppid)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.Vopenid)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.IGuideID))
	return n
}

func (m *ChatFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.OpenMic))
	n += 2 + sovGame(uint64(m.ChatType))
	n += 2 + sovGame(uint64(m.MsgType))
	n += 2 + sovGame(uint64(m.BattleID))
	n += 2 + sovGame(uint64(m.TeamID))
	return n
}

func (m *BattleItemFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	n += 1 + sovGame(uint64(m.BehaveType))
	n += 1 + sovGame(uint64(m.AddReason))
	n += 1 + sovGame(uint64(m.MapID))
	n += 1 + sovGame(uint64(m.Buildings))
	n += 1 + sovGame(uint64(m.ItemID))
	n += 1 + sovGame(uint64(m.ItemLevel))
	n += 1 + sovGame(uint64(m.ItemPlace))
	n += 1 + sovGame(uint64(m.ItemNum))
	return n
}

func (m *BattleFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.Mode))
	n += 2 + sovGame(uint64(m.TeamType))
	n += 2 + sovGame(uint64(m.TeamID))
	n += 2 + sovGame(uint64(m.BehaveType))
	n += 2 + sovGame(uint64(m.BattleID))
	n += 6
	n += 6
	n += 6
	n += 2 + sovGame(uint64(m.MapType))
	n += 2 + sovGame(uint64(m.Times))
	n += 2 + sovGame(uint64(m.AfIemID))
	n += 2 + sovGame(uint64(m.BeItemID))
	n += 2 + sovGame(uint64(m.AfItemLevel))
	n += 2 + sovGame(uint64(m.BeItemLevel))
	n += 2 + sovGame(uint64(m.BagItemNum))
	n += 2 + sovGame(uint64(m.RoundTime))
	n += 6
	n += 2 + sovGame(uint64(m.SkyBox))
	n += 2 + sovGame(uint64(m.MatchMode))
	return n
}

func (m *BattleResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.Mode))
	n += 2 + sovGame(uint64(m.TeamType))
	n += 2 + sovGame(uint64(m.TeamID))
	n += 2 + sovGame(uint64(m.BattleID))
	n += 6
	n += 6
	n += 6
	n += 2 + sovGame(uint64(m.MapType))
	n += 2 + sovGame(uint64(m.Times))
	n += 2 + sovGame(uint64(m.RoundTime))
	n += 2 + sovGame(uint64(m.ResultType))
	n += 6
	n += 2 + sovGame(uint64(m.Rank))
	n += 2 + sovGame(uint64(m.Hurt))
	n += 2 + sovGame(uint64(m.Cirt))
	n += 2 + sovGame(uint64(m.MoneyProduce))
	n += 6
	n += 2 + sovGame(uint64(m.SkyBox))
	n += 2 + sovGame(uint64(m.MatchMode))
	return n
}

func (m *MatchFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.MatchType))
	n += 2 + sovGame(uint64(m.MatchScene))
	n += 2 + sovGame(uint64(m.MatchTime))
	n += 2 + sovGame(uint64(m.Result))
	n += 2 + sovGame(uint64(m.RealNum))
	n += 2 + sovGame(uint64(m.BattleID))
	n += 2 + sovGame(uint64(m.SkyBox))
	n += 2 + sovGame(uint64(m.TeamID))
	n += 2 + sovGame(uint64(m.TeamType))
	n += 2 + sovGame(uint64(m.MatchMode))
	return n
}

func (m *LiveFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 5
	n += 2 + sovGame(uint64(m.ScoreRank))
	n += 2 + sovGame(uint64(m.Touts))
	n += 2 + sovGame(uint64(m.Wins))
	n += 2 + sovGame(uint64(m.Topwins))
	n += 2 + sovGame(uint64(m.KD))
	n += 2 + sovGame(uint64(m.BeatAvg))
	n += 2 + sovGame(uint64(m.WinRate))
	n += 2 + sovGame(uint64(m.TopWinRate))
	n += 2 + sovGame(uint64(m.CriticalRate))
	n += 6
	n += 2 + sovGame(uint64(m.BestRank))
	n += 2 + sovGame(uint64(m.HurtAvg))
	n += 2 + sovGame(uint64(m.TimeAvg))
	n += 6
	n += 6
	n += 2 + sovGame(uint64(m.SingBestRank))
	n += 6
	n += 2 + sovGame(uint64(m.DuoBestRank))
	n += 6
	n += 2 + sovGame(uint64(m.SquadRank))
	return n
}

func (m *GunFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.Mode))
	n += 2 + sovGame(uint64(m.TeamType))
	n += 2 + sovGame(uint64(m.TeamID))
	n += 2 + sovGame(uint64(m.BattleID))
	n += 6
	n += 6
	n += 6
	n += 2 + sovGame(uint64(m.GunID))
	n += 2 + sovGame(uint64(m.SightID))
	n += 2 + sovGame(uint64(m.SilenceID))
	n += 2 + sovGame(uint64(m.MagazineID))
	n += 6
	n += 2 + sovGame(uint64(m.Dps))
	n += 2 + sovGame(uint64(m.Kill))
	n += 2 + sovGame(uint64(m.HeadKill))
	n += 2 + sovGame(uint64(m.StockID))
	n += 2 + sovGame(uint64(m.HandleID))
	n += 2 + sovGame(uint64(m.MatchMode))
	return n
}

func (m *CampFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.StageID))
	n += 2 + sovGame(uint64(m.TaskID))
	return n
}

func (m *ShopFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.ShopType))
	n += 2 + sovGame(uint64(m.ItemType))
	n += 2 + sovGame(uint64(m.ItemID))
	n += 2 + sovGame(uint64(m.Count))
	n += 2 + sovGame(uint64(m.ImoneyType))
	n += 2 + sovGame(uint64(m.Consume))
	return n
}

func (m *OperFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.OperScene))
	n += 2 + sovGame(uint64(m.OperType))
	n += 2 + sovGame(uint64(m.FireMode))
	n += 2 + sovGame(uint64(m.PickMode))
	n += 6
	n += 6
	n += 2 + sovGame(uint64(m.FireFollow))
	n += 2 + sovGame(uint64(m.NearbyFre))
	n += 2 + sovGame(uint64(m.HitBack))
	n += 2 + sovGame(uint64(m.Quality))
	n += 2 + sovGame(uint64(m.WatchAble))
	return n
}

func (m *MoneyFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.IMoney))
	n += 1 + sovGame(uint64(m.Reason))
	n += 1 + sovGame(uint64(m.AddOrReduce))
	n += 1 + sovGame(uint64(m.IMoneyType))
	n += 1 + sovGame(uint64(m.IMoneyCount))
	n += 1 + sovGame(uint64(m.MatchMode))
	return n
}

func (m *SnsFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.ActorOpenID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Count))
	n += 1 + sovGame(uint64(m.SnsType))
	l = len(m.AcceptOpenID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	return n
}

func (m *SecGameStartFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrId)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.GameAppID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.OpenID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.AreaID))
	n += 1 + sovGame(uint64(m.ZoneID))
	n += 1 + sovGame(uint64(m.BattleID))
	l = len(m.ClientStartTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.UserName)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.PicUrl)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.SvrUserMoney1))
	n += 1 + sovGame(uint64(m.SvrUserMoney2))
	n += 1 + sovGame(uint64(m.SvrUserMoney3))
	n += 5
	n += 6
	n += 6
	n += 6
	n += 2 + sovGame(uint64(m.SvrRoleID))
	n += 2 + sovGame(uint64(m.SvrRoleType))
	n += 2 + sovGame(uint64(m.SvrMapid))
	n += 2 + sovGame(uint64(m.SvrWeatherid))
	l = len(m.SvrItemList)
	n += 2 + l + sovGame(uint64(l))
	l = len(m.WaitStartTime)
	n += 2 + l + sovGame(uint64(l))
	l = len(m.WaitEndTime)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.RoleType))
	n += 2 + sovGame(uint64(m.Mapid))
	n += 2 + sovGame(uint64(m.Weatherid))
	l = len(m.ItemList)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.GameType))
	n += 2 + sovGame(uint64(m.TeamType))
	n += 2 + sovGame(uint64(m.AutoMatch))
	n += 2 + sovGame(uint64(m.PlayerCount))
	n += 2 + sovGame(uint64(m.TeamID))
	l = len(m.TeamPlayer1)
	n += 2 + l + sovGame(uint64(l))
	l = len(m.TeamPlayer2)
	n += 2 + l + sovGame(uint64(l))
	l = len(m.TeamPlayer3)
	n += 2 + l + sovGame(uint64(l))
	n += 6
	n += 6
	n += 6
	return n
}

func (m *SecGameEndFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrId)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.GameAppID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.OpenID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.AreaID))
	n += 1 + sovGame(uint64(m.ZoneID))
	n += 1 + sovGame(uint64(m.BattleID))
	l = len(m.ClientStartTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.UserName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.RoleID))
	n += 1 + sovGame(uint64(m.RoleType))
	n += 1 + sovGame(uint64(m.OverTime))
	n += 1 + sovGame(uint64(m.EndType))
	n += 1 + sovGame(uint64(m.KillCount))
	n += 2 + sovGame(uint64(m.AssistsCount))
	n += 2 + sovGame(uint64(m.DropCount))
	n += 2 + sovGame(uint64(m.SaveCount))
	n += 2 + sovGame(uint64(m.RebornCount))
	n += 2 + sovGame(uint64(m.AliveType))
	n += 2 + sovGame(uint64(m.GoldGet))
	n += 2 + sovGame(uint64(m.DiamondGet))
	n += 2 + sovGame(uint64(m.ExpGet))
	n += 2 + sovGame(uint64(m.WinRank))
	n += 2 + sovGame(uint64(m.TotalPlayers))
	n += 6
	n += 2 + sovGame(uint64(m.TeamID))
	l = len(m.TeamPlayer1)
	n += 2 + l + sovGame(uint64(l))
	l = len(m.TeamPlayer2)
	n += 2 + l + sovGame(uint64(l))
	l = len(m.TeamPlayer3)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.TeamPlayer1AliveType))
	n += 2 + sovGame(uint64(m.TeamPlayer2AliveType))
	n += 2 + sovGame(uint64(m.TeamPlayer3AliveType))
	n += 2 + sovGame(uint64(m.TeamPlayer1Kill))
	n += 2 + sovGame(uint64(m.TeamPlayer2Kill))
	n += 2 + sovGame(uint64(m.TeamPlayer3Kill))
	return n
}

func (m *ShareRMBMoney) Size() (n int) {
	var l int
	_ = l
	l = len(m.OpenID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Channel))
	l = len(m.AccessToken)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.ActID))
	n += 1 + sovGame(uint64(m.Ret))
	l = len(m.Msg)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.BoxID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Url)
	n += 1 + l + sovGame(uint64(l))
	return n
}

func (m *OwnGoodsItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.State))
	n += 1 + sovGame(uint64(m.Used))
	n += 1 + sovGame(uint64(m.Sum))
	n += 1 + sovGame(uint64(m.Preference))
	n += 1 + sovGame(uint64(m.EndTime))
	return n
}

func (m *OwnGoodsInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *MemVoiceInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.MemberId))
	n += 1 + sovGame(uint64(m.Uid))
	return n
}

func (m *TeamVoiceInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.MemberInfos) > 0 {
		for _, e := range m.MemberInfos {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *SettleMemInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Uid))
	l = len(m.Name_)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Url)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Killnum))
	n += 1 + sovGame(uint64(m.Headshotnum))
	n += 1 + sovGame(uint64(m.Damagehp))
	n += 5
	n += 1 + sovGame(uint64(m.Gametime))
	n += 1 + sovGame(uint64(m.Veteran))
	n += 1 + sovGame(uint64(m.NameColor))
	return n
}

func (m *SettleInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *RefreshObjectListNotify) Size() (n int) {
	var l int
	_ = l
	if len(m.Obj) > 0 {
		for _, e := range m.Obj {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *StrangerList) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			n += 1 + sovGame(uint64(e))
		}
	}
	return n
}

func (m *ReConnetionFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	return n
}

func (m *DropBoxInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Thisid))
	n += 1 + sovGame(uint64(m.Fakebox))
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 2
	return n
}

func (m *DropBoxList) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *ItemFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.IGoodsType))
	n += 1 + sovGame(uint64(m.IGoodsId))
	n += 1 + sovGame(uint64(m.Count))
	n += 1 + sovGame(uint64(m.AfterCount))
	n += 1 + sovGame(uint64(m.Reason))
	n += 1 + sovGame(uint64(m.SubReason))
	n += 1 + sovGame(uint64(m.IMoney))
	n += 1 + sovGame(uint64(m.IMoneyType))
	n += 2 + sovGame(uint64(m.AddOrReduce))
	n += 2 + sovGame(uint64(m.ReduceReason))
	n += 2 + sovGame(uint64(m.LeftUseTime))
	return n
}

func (m *ModeInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Modeid))
	n += 2
	n += 2
	n += 2
	l = len(m.SeasonStart)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SeasonEnd)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Price))
	return n
}

func (m *MatchModeNotify) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *ActivityState) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.State))
	n += 1 + sovGame(uint64(m.RedDot))
	return n
}

func (m *ActivitysInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.ActivityState) > 0 {
		for _, e := range m.ActivityState {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.ExchangeState) > 0 {
		for _, e := range m.ExchangeState {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *MedalDataItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.Num))
	return n
}

func (m *MedalDataList) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *KillDrop) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Thisid))
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 1 + sovGame(uint64(m.Disappeartime))
	return n
}

func (m *KillDropList) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *GoodRecordFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.BehaveType))
	l = len(m.RoleStock)
	n += 2 + l + sovGame(uint64(l))
	l = len(m.BrollyStock)
	n += 2 + l + sovGame(uint64(l))
	return n
}

func (m *GoodsTimeLeft) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.TimeLeft))
	return n
}

func (m *GoodsTimeLeftNotify) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *NewYearGood) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Key))
	n += 1 + sovGame(uint64(m.Num))
	n += 1 + sovGame(uint64(m.TargetType))
	n += 1 + sovGame(uint64(m.TargetNum))
	return n
}

func (m *NewYearInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.GoodID) > 0 {
		for _, e := range m.GoodID {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	n += 1 + sovGame(uint64(m.RecState))
	n += 1 + sovGame(uint64(m.Index))
	return n
}

func (m *AchievementFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.AchievementID))
	n += 2 + sovGame(uint64(m.AchievementLevel))
	n += 2 + sovGame(uint64(m.AchievementExp))
	return n
}

func (m *InsigniaFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.LogType))
	n += 2 + sovGame(uint64(m.InsigniaID))
	n += 2 + sovGame(uint64(m.InsigniaNum))
	n += 2 + sovGame(uint64(m.InsigniaUse))
	return n
}

func (m *Achievement) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	if len(m.Stamp) > 0 {
		for _, e := range m.Stamp {
			n += 1 + sovGame(uint64(e))
		}
	}
	n += 1 + sovGame(uint64(m.Flag))
	return n
}

func (m *AchievementProcess) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 5
	return n
}

func (m *AchievmentInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.Exp))
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			n += 1 + sovGame(uint64(e))
		}
	}
	if len(m.Used) > 0 {
		for _, e := range m.Used {
			n += 1 + sovGame(uint64(e))
		}
	}
	if len(m.Process) > 0 {
		for _, e := range m.Process {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *Insignia) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.Count))
	n += 1 + sovGame(uint64(m.Flag))
	return n
}

func (m *InsigniaInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	n += 1 + sovGame(uint64(m.Use))
	return n
}

func (m *AwardItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.Num))
	return n
}

func (m *SeasonAwards) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Season))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *WearInGame) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.First))
	n += 1 + sovGame(uint64(m.Second))
	n += 1 + sovGame(uint64(m.Third))
	return n
}

func (m *WearInGameFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.ActionType))
	n += 2 + sovGame(uint64(m.EquipID))
	return n
}

func (m *EliteWeaponPos) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *EliteWeaponPosList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *DropBoxPos) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *DropBoxPosList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *TreasureBoxInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.CoinType))
	n += 1 + sovGame(uint64(m.CoinNum))
	return n
}

func (m *TreasureBoxList) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *TreasureBoxFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.BoxID))
	n += 2 + sovGame(uint64(m.OpenNum))
	n += 2 + sovGame(uint64(m.IMoneyType))
	n += 2 + sovGame(uint64(m.IMoney))
	n += 2 + sovGame(uint64(m.ItemID))
	return n
}

func (m *MilitaryRankFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.Exp))
	l = len(m.MilitaryRank)
	n += 2 + l + sovGame(uint64(l))
	return n
}

func (m *TaskItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.TaskId))
	n += 1 + sovGame(uint64(m.FinishedNum))
	n += 1 + sovGame(uint64(m.Awards))
	n += 1 + sovGame(uint64(m.State))
	return n
}

func (m *TaskUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.TaskName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Groupid))
	if len(m.TaskItems) > 0 {
		for _, e := range m.TaskItems {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *ActiveAwardsBox) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.BoxId))
	n += 1 + sovGame(uint64(m.Awards))
	return n
}

func (m *DayTaskDetail) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.DayActiveness))
	if len(m.DayBoxs) > 0 {
		for _, e := range m.DayBoxs {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	n += 1 + sovGame(uint64(m.WeekActiveness))
	if len(m.WeekBoxs) > 0 {
		for _, e := range m.WeekBoxs {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.DayTaskList) > 0 {
		for _, e := range m.DayTaskList {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *DayTaskFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.TaskItemID))
	n += 2 + sovGame(uint64(m.TaskItemFinished))
	return n
}

func (m *ActivenessFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.DayActiveness))
	n += 2 + sovGame(uint64(m.WeekActiveness))
	return n
}

func (m *ComradeTaskFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.TaskItemID))
	n += 2 + sovGame(uint64(m.TaskItemFinished))
	return n
}

func (m *PlayerPos) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.Typ))
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *PlayerPosList) Size() (n int) {
	var l int
	_ = l
	if len(m.PlayerPos) > 0 {
		for _, e := range m.PlayerPos {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *FollowInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Target))
	if len(m.Followers) > 0 {
		for _, e := range m.Followers {
			n += 1 + sovGame(uint64(e))
		}
	}
	return n
}

func (m *FollowDetail) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *ShellExplodeNotify) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Typ))
	n += 1 + sovGame(uint64(m.Shooter))
	n += 1 + sovGame(uint64(m.Baseid))
	if m.Center != nil {
		l = m.Center.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *AwardInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.State))
	return n
}

func (m *OldBringNewDetail) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Typ))
	if len(m.Teachers) > 0 {
		for _, e := range m.Teachers {
			n += 1 + sovGame(uint64(e))
		}
	}
	if len(m.Pupils) > 0 {
		for _, e := range m.Pupils {
			n += 1 + sovGame(uint64(e))
		}
	}
	n += 1 + sovGame(uint64(m.TimeLeft))
	if len(m.Awards) > 0 {
		for _, e := range m.Awards {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *ComradeTaskDetail) Size() (n int) {
	var l int
	_ = l
	if len(m.ComradeTaskList) > 0 {
		for _, e := range m.ComradeTaskList {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *VeteranInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Uid))
	l = len(m.Url)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.UserName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.NameColor))
	return n
}

func (m *VeteranRecallList) Size() (n int) {
	var l int
	_ = l
	if len(m.VeteranList) > 0 {
		for _, e := range m.VeteranList {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	n += 1 + sovGame(uint64(m.State))
	n += 1 + sovGame(uint64(m.Index))
	return n
}

func (m *VeteranRecallReward) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.RecallSusNum))
	if len(m.RewardIdList) > 0 {
		for _, e := range m.RewardIdList {
			n += 1 + sovGame(uint64(e))
		}
	}
	return n
}

func (m *WeaponInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.WeaponId))
	if len(m.Additions) > 0 {
		for _, e := range m.Additions {
			n += 1 + sovGame(uint64(e))
		}
	}
	return n
}

func (m *WeaponInGame) Size() (n int) {
	var l int
	_ = l
	if len(m.Weapons) > 0 {
		for _, e := range m.Weapons {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *VehicleFullNotify) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	if len(m.Uid) > 0 {
		for _, e := range m.Uid {
			n += 1 + sovGame(uint64(e))
		}
	}
	return n
}

func (m *PreferenceInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	if len(m.Start) > 0 {
		n += 2 * len(m.Start)
	}
	if len(m.PreType) > 0 {
		for _, e := range m.PreType {
			n += 1 + sovGame(uint64(e))
		}
	}
	return n
}

func (m *PreferenceList) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *PreferenceFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.ItemType))
	n += 2 + sovGame(uint64(m.PreType))
	return n
}

func (m *GameRecordDetail) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.SoloRating))
	n += 1 + sovGame(uint64(m.DuoRating))
	n += 1 + sovGame(uint64(m.SquadRating))
	n += 1 + sovGame(uint64(m.Battles))
	n += 1 + sovGame(uint64(m.Wins))
	n += 1 + sovGame(uint64(m.TopTens))
	n += 5
	return n
}

func (m *ContestInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.TeamId))
	n += 1 + sovGame(uint64(m.Bouns))
	return n
}

func (m *ChampionContestInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Team) > 0 {
		for _, e := range m.Team {
			n += 1 + sovGame(uint64(e))
		}
	}
	return n
}

func (m *OddsInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.TeamId))
	n += 5
	return n
}

func (m *ChampionOddsInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *ContestRecord) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.TeamId))
	n += 1 + sovGame(uint64(m.Stamp))
	n += 5
	return n
}

func (m *ChampionContestRecord) Size() (n int) {
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, e := range m.Record {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *WorldCupMatch) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.MatchId))
	if len(m.Contest) > 0 {
		for _, e := range m.Contest {
			n += 1 + sovGame(uint64(e))
		}
	}
	if len(m.Odds) > 0 {
		n += 5 * len(m.Odds)
	}
	if len(m.Team) > 0 {
		for _, s := range m.Team {
			l = len(s)
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Score) > 0 {
		for _, e := range m.Score {
			n += 1 + sovGame(uint64(e))
		}
	}
	n += 1 + sovGame(uint64(m.IsDone))
	n += 1 + sovGame(uint64(m.IsReward))
	if len(m.ScoreFinal) > 0 {
		for _, e := range m.ScoreFinal {
			n += 1 + sovGame(uint64(e))
		}
	}
	return n
}

func (m *WorldCupMatchInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *WorldCupMatchRecord) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.MatchId))
	n += 1 + sovGame(uint64(m.Kind))
	n += 1 + sovGame(uint64(m.Stamp))
	n += 5
	if len(m.Team) > 0 {
		for _, s := range m.Team {
			l = len(s)
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *WorldCupMatchRecordInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *FestivalInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.Num))
	n += 1 + sovGame(uint64(m.State))
	return n
}

func (m *FestivalList) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.ActState))
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *ExchangeInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	if len(m.Num) > 0 {
		for _, e := range m.Num {
			n += 1 + sovGame(uint64(e))
		}
	}
	n += 1 + sovGame(uint64(m.State))
	n += 1 + sovGame(uint64(m.ExchangeNum))
	return n
}

func (m *ExchangeList) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.ActState))
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *ExchangeTotalList) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *FestivalFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.TaskID))
	l = len(m.Rewards)
	n += 2 + l + sovGame(uint64(l))
	return n
}

func (m *ExchangeFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.ActID))
	n += 2 + sovGame(uint64(m.ExchangeID))
	n += 2 + sovGame(uint64(m.ExchangeNum))
	l = len(m.Rewards)
	n += 2 + l + sovGame(uint64(l))
	return n
}

func (m *BallStarReward) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.State))
	return n
}

func (m *BallStarInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.ActState))
	n += 1 + sovGame(uint64(m.Position))
	n += 1 + sovGame(uint64(m.Sum))
	if len(m.RewardState) > 0 {
		for _, e := range m.RewardState {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *BallStarFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.Position))
	n += 2 + sovGame(uint64(m.Sum))
	n += 2 + sovGame(uint64(m.RewardsID))
	n += 2 + sovGame(uint64(m.RewardsNum))
	return n
}

func (m *CheaterReportFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	l = len(m.ReportOpenID)
	n += 2 + l + sovGame(uint64(l))
	l = len(m.ReportName)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.ReportTypeID))
	l = len(m.ReportTypeSum)
	n += 2 + l + sovGame(uint64(l))
	return n
}

func (m *WorldCupChampionFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.TeamID))
	l = len(m.Odds)
	n += 2 + l + sovGame(uint64(l))
	return n
}

func (m *WorldCupMatchFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.MatchId))
	l = len(m.Odds)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.Kind))
	return n
}

func (m *TaskList) Size() (n int) {
	var l int
	_ = l
	if len(m.TaskItems) > 0 {
		for _, e := range m.TaskItems {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *AwardList) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *TaskDetail) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name_)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.WhatDay))
	if len(m.Lists) > 0 {
		for _, e := range m.Lists {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *SpecialTaskDetail) Size() (n int) {
	var l int
	_ = l
	if m.Detail != nil {
		l = m.Detail.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 2
	n += 1 + sovGame(uint64(m.Medals))
	if m.Awards != nil {
		l = m.Awards.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 1 + sovGame(uint64(m.Replacements))
	return n
}

func (m *TaskFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	l = len(m.TaskName)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.TaskType))
	n += 2 + sovGame(uint64(m.TaskItemID))
	n += 2 + sovGame(uint64(m.TaskItemFinished))
	return n
}

func (m *ChaterInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Uid))
	l = len(m.Name_)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Url)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Gender))
	n += 1 + sovGame(uint64(m.Level))
	l = len(m.BattleTeam)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.NameColor))
	return n
}

func (m *TeamCustom) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 1 + sovGame(uint64(m.Typ))
	n += 1 + sovGame(uint64(m.Channel))
	n += 1 + sovGame(uint64(m.MatchMode))
	n += 1 + sovGame(uint64(m.Mapid))
	n += 1 + sovGame(uint64(m.MatchTyp))
	n += 1 + sovGame(uint64(m.CurNum))
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			n += 1 + sovGame(uint64(e))
		}
	}
	l = len(m.Slogan)
	n += 1 + l + sovGame(uint64(l))
	return n
}

func (m *ChatDetail) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	n += 1 + sovGame(uint64(m.Channel))
	l = len(m.Content)
	n += 1 + l + sovGame(uint64(l))
	n += 2
	return n
}

func (m *ChatInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Uid))
	n += 1 + sovGame(uint64(m.Stamp))
	l = len(m.Content)
	n += 1 + l + sovGame(uint64(l))
	return n
}

func (m *UnreadChatDetail) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *AnnouncementDetail) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Uid))
	l = len(m.Name_)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.Typ))
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.Days))
	n += 1 + sovGame(uint64(m.Num))
	n += 1 + sovGame(uint64(m.NameColor))
	return n
}

func (m *SkillPosition) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Position))
	n += 1 + sovGame(uint64(m.SkillID))
	return n
}

func (m *ModeSkillInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.ModeID))
	if len(m.InitiveSkill) > 0 {
		for _, e := range m.InitiveSkill {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.PassiveSkill) > 0 {
		for _, e := range m.PassiveSkill {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *RoleSkillInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.RoleID))
	if len(m.ModeList) > 0 {
		for _, e := range m.ModeList {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *AllSkillList) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *SkillEffect) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 1 + sovGame(uint64(m.Value))
	return n
}

func (m *SkillEffectList) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *BattleBookingFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.Booker))
	n += 2 + sovGame(uint64(m.BookTarget))
	n += 2 + sovGame(uint64(m.Resp))
	return n
}

func (m *CommonTaskList) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Id))
	n += 2
	if len(m.TaskItems) > 0 {
		for _, e := range m.TaskItems {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *ChallengeTaskDetail) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Season))
	n += 1 + sovGame(uint64(m.LeftTime))
	n += 1 + sovGame(uint64(m.Grade))
	n += 1 + sovGame(uint64(m.Medals))
	n += 2
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.NormalAwards != nil {
		l = m.NormalAwards.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.EliteAwards != nil {
		l = m.EliteAwards.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *BattleBookingInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.Typ))
	if len(m.List) > 0 {
		for _, e := range m.List {
			n += 1 + sovGame(uint64(e))
		}
	}
	if len(m.Tmplist) > 0 {
		for _, e := range m.Tmplist {
			n += 1 + sovGame(uint64(e))
		}
	}
	return n
}

func (m *SpecialExpFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.SpecialExp))
	return n
}

func (m *WatchFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.WatchType))
	n += 2 + sovGame(uint64(m.WatchID))
	n += 2 + sovGame(uint64(m.BeWatchID))
	l = len(m.BeWatchName)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.BattleID))
	n += 2 + sovGame(uint64(m.WatchNum))
	n += 2 + sovGame(uint64(m.WatchTime))
	n += 2 + sovGame(uint64(m.Loading))
	return n
}

func (m *Uint32Array) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			n += 1 + sovGame(uint64(e))
		}
	}
	return n
}

func (m *MonthCardFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.BeginTime))
	n += 2 + sovGame(uint64(m.EndTime))
	return n
}

func (m *RedDotOnce) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGame(uint64(m.ID))
	n += 1 + sovGame(uint64(m.Dot))
	return n
}

func (m *RedDotList) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *SeasonExpFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.SeasonExp))
	return n
}

func (m *SkillUseFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	n += 2 + sovGame(uint64(m.MatchMode))
	n += 2 + sovGame(uint64(m.InitiveSkillID))
	n += 2 + sovGame(uint64(m.PassiveSkillID))
	return n
}

func (m *BuyGoodsFlow) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameSvrID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.DtEventTime)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VGameAppID)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.PlatID))
	n += 1 + sovGame(uint64(m.IZoneAreaID))
	l = len(m.VOpenID)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.VRoleName)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.VRoleProfession))
	n += 1 + sovGame(uint64(m.Level))
	n += 1 + sovGame(uint64(m.PlayerFriendsNum))
	l = len(m.ClientVersion)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.SystemHardware)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.TelecomOper)
	n += 1 + l + sovGame(uint64(l))
	l = len(m.Network)
	n += 1 + l + sovGame(uint64(l))
	n += 1 + sovGame(uint64(m.LoginChannel))
	l = len(m.BillNo)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.IMoneyType))
	n += 2 + sovGame(uint64(m.IMoney))
	l = len(m.SuccGoods)
	n += 2 + l + sovGame(uint64(l))
	l = len(m.FailGoods)
	n += 2 + l + sovGame(uint64(l))
	n += 2 + sovGame(uint64(m.SuccBuy))
	n += 2 + sovGame(uint64(m.SuccRoll))
	return n
}

func sovGame(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGame(x uint64) (n int) {
	return sovGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserMainDataNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMainDataNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMainDataNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			m.Coins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coins |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diams", wireType)
			}
			m.Diams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diams |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Y = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Z = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *T_Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: T_Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: T_Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseid", wireType)
			}
			m.Baseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Baseid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thisid", wireType)
			}
			m.Thisid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Thisid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Gunreform = append(m.Gunreform, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Gunreform = append(m.Gunreform, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Gunreform", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bullet", wireType)
			}
			m.Bullet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bullet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reducedam", wireType)
			}
			m.Reducedam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reducedam |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChracterMapDataInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChracterMapDataInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChracterMapDataInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector3{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mvspeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Mvspeed = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxhp", wireType)
			}
			m.Maxhp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxhp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orientation", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Orientation = float32(math.Float32frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weapon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Weapon == nil {
				m.Weapon = &T_Object{}
			}
			if err := m.Weapon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secweapon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Secweapon == nil {
				m.Secweapon = &T_Object{}
			}
			if err := m.Secweapon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Armors = append(m.Armors, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Armors = append(m.Armors, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Armors", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshObjectNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshObjectNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshObjectNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Obj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Obj == nil {
				m.Obj = &T_Object{}
			}
			if err := m.Obj.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UseObjectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseObjectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseObjectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thisid", wireType)
			}
			m.Thisid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Thisid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveObjectNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveObjectNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveObjectNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thisid", wireType)
			}
			m.Thisid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Thisid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshGunNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshGunNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshGunNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Objs == nil {
				m.Objs = &T_Object{}
			}
			if err := m.Objs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Useweapon", wireType)
			}
			m.Useweapon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Useweapon |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropGunNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropGunNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropGunNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Use", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Use == nil {
				m.Use = &T_Object{}
			}
			if err := m.Use.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeGunReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeGunReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeGunReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Useweapon", wireType)
			}
			m.Useweapon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Useweapon |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeGunRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeGunRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeGunRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Useweapon", wireType)
			}
			m.Useweapon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Useweapon |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GunReformReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GunReformReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GunReformReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reformthisid", wireType)
			}
			m.Reformthisid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reformthisid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gunthisid", wireType)
			}
			m.Gunthisid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gunthisid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GunReformUnequipReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GunReformUnequipReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GunReformUnequipReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gunthisid", wireType)
			}
			m.Gunthisid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gunthisid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseid", wireType)
			}
			m.Baseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Baseid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttackReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttackReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttackReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defendid", wireType)
			}
			m.Defendid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defendid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ishead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ishead = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origion == nil {
				m.Origion = &Vector3{}
			}
			if err := m.Origion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dir == nil {
				m.Dir = &Vector3{}
			}
			if err := m.Dir.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Firetime", wireType)
			}
			m.Firetime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Firetime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Distance = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attackid", wireType)
			}
			m.Attackid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attackid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackPos", wireType)
			}
			m.AttackPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackPos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShootReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShootReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShootReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Issuc = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attackid", wireType)
			}
			m.Attackid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attackid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapCharacterResultNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapCharacterResultNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapCharacterResultNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kill", wireType)
			}
			m.Kill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeinseconds", wireType)
			}
			m.Timeinseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeinseconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headshotnum", wireType)
			}
			m.Headshotnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Headshotnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shotnum", wireType)
			}
			m.Shotnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shotnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effectharm", wireType)
			}
			m.Effectharm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Effectharm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recovernum", wireType)
			}
			m.Recovernum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Recovernum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revivenum", wireType)
			}
			m.Revivenum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revivenum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killdistance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Killdistance = float32(math.Float32frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destroycarnum", wireType)
			}
			m.Destroycarnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Destroycarnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killstmnum", wireType)
			}
			m.Killstmnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Killstmnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attacknum", wireType)
			}
			m.Attacknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attacknum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roadkillnum", wireType)
			}
			m.Roadkillnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roadkillnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clothnum", wireType)
			}
			m.Clothnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clothnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speednum", wireType)
			}
			m.Speednum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speednum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rundistance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Rundistance = float32(math.Float32frombits(v))
		case 19:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killscore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Killscore = float32(math.Float32frombits(v))
		case 20:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rankscore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Rankscore = float32(math.Float32frombits(v))
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totalrank", wireType)
			}
			m.Totalrank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Totalrank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totalscore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Totalscore = float32(math.Float32frombits(v))
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BraveCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BraveCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchmode", wireType)
			}
			m.Matchmode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matchmode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZoneNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZoneNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZoneNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Center", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Center == nil {
				m.Center = &Vector3{}
			}
			if err := m.Center.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Radius = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBulletReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeBulletReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeBulletReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Full", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Full = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeBulletRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeBulletRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeBulletRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bullet", wireType)
			}
			m.Bullet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bullet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamMemberInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamMemberInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamMemberInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemState", wireType)
			}
			m.MemState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemState |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modelid", wireType)
			}
			m.Modelid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modelid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intotime", wireType)
			}
			m.Intotime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Intotime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbid", wireType)
			}
			m.Dbid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dbid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Insignia", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Insignia = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Veteran", wireType)
			}
			m.Veteran = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Veteran |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameColor", wireType)
			}
			m.NameColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameColor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideWeapon", wireType)
			}
			m.OutsideWeapon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutsideWeapon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncTeamInfoRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncTeamInfoRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncTeamInfoRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamState", wireType)
			}
			m.TeamState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamState |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memberinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memberinfo = append(m.Memberinfo, &TeamMemberInfo{})
			if err := m.Memberinfo[len(m.Memberinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaderid", wireType)
			}
			m.Leaderid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leaderid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teamtype", wireType)
			}
			m.Teamtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Teamtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Automatch", wireType)
			}
			m.Automatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Automatch |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mapid", wireType)
			}
			m.Mapid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mapid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshPackCellNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshPackCellNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshPackCellNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SummonAINotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SummonAINotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SummonAINotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ainum", wireType)
			}
			m.Ainum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ainum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skybox", wireType)
			}
			m.Skybox = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Skybox |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneType", wireType)
			}
			m.SceneType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SceneType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshGunBulletNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshGunBulletNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshGunBulletNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thisid", wireType)
			}
			m.Thisid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Thisid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bullet", wireType)
			}
			m.Bullet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bullet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitRoomTeamPlayerItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitRoomTeamPlayerItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitRoomTeamPlayerItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxhp", wireType)
			}
			m.Maxhp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxhp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector3{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameColor", wireType)
			}
			m.NameColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameColor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitRoomTeamInfoRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitRoomTeamInfoRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitRoomTeamInfoRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &InitRoomTeamPlayerItem{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRoomTeamPlayerItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRoomTeamPlayerItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRoomTeamPlayerItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector3{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rota", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rota == nil {
				m.Rota = &Vector3{}
			}
			if err := m.Rota.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SymcRoomTeamInfoRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SymcRoomTeamInfoRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SymcRoomTeamInfoRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &SyncRoomTeamPlayerItem{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DieNotifyRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DieNotifyRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DieNotifyRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attackerid", wireType)
			}
			m.Attackerid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attackerid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defenderid", wireType)
			}
			m.Defenderid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defenderid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attackername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attackername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defendername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Defendername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHeadhost", wireType)
			}
			m.IsHeadhost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsHeadhost |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gunid", wireType)
			}
			m.Gunid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gunid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defenderstate", wireType)
			}
			m.Defenderstate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defenderstate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurAliveSum", wireType)
			}
			m.CurAliveSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurAliveSum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attackerinsignia", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attackerinsignia = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defenderinsignia", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Defenderinsignia = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attackercolor", wireType)
			}
			m.Attackercolor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attackercolor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defendercolor", wireType)
			}
			m.Defendercolor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defendercolor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopilotData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopilotData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopilotData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VehicleProp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VehicleProp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VehicleProp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VehicleID", wireType)
			}
			m.VehicleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VehicleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PilotID", wireType)
			}
			m.PilotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PilotID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Copilots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Copilots = append(m.Copilots, &CopilotData{})
			if err := m.Copilots[len(m.Copilots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enter = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reducedam", wireType)
			}
			m.Reducedam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reducedam |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thisid", wireType)
			}
			m.Thisid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Thisid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reducemax", wireType)
			}
			m.Reducemax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reducemax |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usetime", wireType)
			}
			m.Usetime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usetime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Haveexplode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Haveexplode = bool(v != 0)
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuelLeft", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.FuelLeft = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuelMax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.FuelMax = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemProp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemProp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemProp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseid", wireType)
			}
			m.Baseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Baseid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshBoxObjNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshBoxObjNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshBoxObjNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ItemProp{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeadProp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeadProp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeadProp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseid", wireType)
			}
			m.Baseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Baseid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reducedam", wireType)
			}
			m.Reducedam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reducedam |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxreduce", wireType)
			}
			m.Maxreduce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxreduce |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BodyProp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BodyProp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BodyProp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseid", wireType)
			}
			m.Baseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Baseid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reducedam", wireType)
			}
			m.Reducedam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reducedam |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxreduce", wireType)
			}
			m.Maxreduce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxreduce |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackPackProp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackPackProp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackPackProp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseid", wireType)
			}
			m.Baseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Baseid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerLogout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerLogout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerLogout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineTime", wireType)
			}
			m.OnlineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mailid", wireType)
			}
			m.Mailid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mailid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mailtype", wireType)
			}
			m.Mailtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mailtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gettime", wireType)
			}
			m.Gettime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gettime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Haveread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Haveread = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objs = append(m.Objs, &MailObject{})
			if err := m.Objs[len(m.Objs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Haveget", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Haveget = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Button", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Button = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &MailInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetMailList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetMailList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetMailList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMailList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMailList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMailList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mails = append(m.Mails, &MailInfo{})
			if err := m.Mails[len(m.Mails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMailInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMailInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMailInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mailid", wireType)
			}
			m.Mailid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mailid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetMailInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetMailInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetMailInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mail == nil {
				m.Mail = &MailInfo{}
			}
			if err := m.Mail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mailid = append(m.Mailid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mailid = append(m.Mailid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mailid", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMailObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMailObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMailObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mailid", wireType)
			}
			m.Mailid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mailid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnuonceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnuonceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnuonceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalTime", wireType)
			}
			m.InternalTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InternalTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitAnnuonceInfoRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitAnnuonceInfoRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitAnnuonceInfoRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &AnnuonceInfo{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enterplat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enterplat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qqvip", wireType)
			}
			m.Qqvip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qqvip |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watchable", wireType)
			}
			m.Watchable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Watchable |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bound = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleTeam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BattleTeam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stamp", wireType)
			}
			m.Stamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameColor", wireType)
			}
			m.NameColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameColor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlatFriendStateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlatFriendStateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlatFriendStateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Openid = append(m.Openid, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlatFriendState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlatFriendState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlatFriendState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Openid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameColor", wireType)
			}
			m.NameColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameColor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlatFriendStateRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlatFriendStateRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlatFriendStateRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &PlatFriendState{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendRankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendRankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendRankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoloRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SoloRating = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuoRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.DuoRating = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquadRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SquadRating = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QqVip", wireType)
			}
			m.QqVip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QqVip |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameEenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameEenter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameColor", wireType)
			}
			m.NameColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameColor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncFriendRankList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncFriendRankList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncFriendRankList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &FriendRankInfo{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncFriendList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncFriendList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncFriendList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &FriendInfo{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlackList = append(m.BlackList, &FriendInfo{})
			if err := m.BlackList[len(m.BlackList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendApplyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendApplyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendApplyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyTime", wireType)
			}
			m.ApplyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameColor", wireType)
			}
			m.NameColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameColor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncFriendApplyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncFriendApplyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncFriendApplyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &FriendApplyInfo{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoSendItemReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoSendItemReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoSendItemReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objs = append(m.Objs, &MailObject{})
			if err := m.Objs[len(m.Objs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameSvrState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameSvrState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameSvrState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoundFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleID", wireType)
			}
			m.BattleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleType", wireType)
			}
			m.BattleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundScore", wireType)
			}
			m.RoundScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundScore |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTime", wireType)
			}
			m.RoundTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBattleNum", wireType)
			}
			m.TotalBattleNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBattleNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstNum", wireType)
			}
			m.FirstNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopTenNum", wireType)
			}
			m.TopTenNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopTenNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopTenRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopTenRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleMaxKill", wireType)
			}
			m.SingleMaxKill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SingleMaxKill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalKillNum", wireType)
			}
			m.TotalKillNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalKillNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageKillNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AverageKillNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleMaxHeadShot", wireType)
			}
			m.SingleMaxHeadShot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SingleMaxHeadShot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalHeadShot", wireType)
			}
			m.TotalHeadShot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalHeadShot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEffectHarm", wireType)
			}
			m.TotalEffectHarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalEffectHarm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageEffectHarm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AverageEffectHarm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadShotRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadShotRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvItemUseNum", wireType)
			}
			m.RecvItemUseNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecvItemUseNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarUseNum", wireType)
			}
			m.CarUseNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CarUseNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarDestroyNum", wireType)
			}
			m.CarDestroyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CarDestroyNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.KillRating = float32(math.Float32frombits(v))
		case 31:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.WinRating = float32(math.Float32frombits(v))
		case 32:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.RoundRating = float32(math.Float32frombits(v))
		case 33:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TotalRating = float32(math.Float32frombits(v))
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerNum", wireType)
			}
			m.PlayerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AINum", wireType)
			}
			m.AINum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AINum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRunDistance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.PlayerRunDistance = float32(math.Float32frombits(v))
		case 37:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarRunDistance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.CarRunDistance = float32(math.Float32frombits(v))
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DEADTYPE", wireType)
			}
			m.DEADTYPE = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DEADTYPE |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverHp", wireType)
			}
			m.RecoverHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoverHp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandageNum", wireType)
			}
			m.BandageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BandageNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedicalBoxNum", wireType)
			}
			m.MedicalBoxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedicalBoxNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PainkillerNum", wireType)
			}
			m.PainkillerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PainkillerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyNum", wireType)
			}
			m.EnergyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadShotNum", wireType)
			}
			m.HeadShotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadShotNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectHarm", wireType)
			}
			m.EffectHarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectHarm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotNum", wireType)
			}
			m.ShotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShotNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviveNum", wireType)
			}
			m.ReviveNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviveNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 48:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillDistance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.KillDistance = float32(math.Float32frombits(v))
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillStmNum", wireType)
			}
			m.KillStmNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillStmNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RCarUseNum", wireType)
			}
			m.RCarUseNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RCarUseNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RCarDestoryNum", wireType)
			}
			m.RCarDestoryNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RCarDestoryNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackNum", wireType)
			}
			m.AttackNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkyBox", wireType)
			}
			m.SkyBox = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkyBox |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kill", wireType)
			}
			m.Kill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSurviveTime", wireType)
			}
			m.TotalSurviveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSurviveTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 56:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDistance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TotalDistance = float32(math.Float32frombits(v))
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRank", wireType)
			}
			m.TotalRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 58:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoloRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SoloRating = float32(math.Float32frombits(v))
		case 59:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuoRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.DuoRating = float32(math.Float32frombits(v))
		case 60:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquadRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SquadRating = float32(math.Float32frombits(v))
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoloRank", wireType)
			}
			m.SoloRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoloRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuoRank", wireType)
			}
			m.DuoRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DuoRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquadRank", wireType)
			}
			m.SquadRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SquadRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 64:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TopRating = float32(math.Float32frombits(v))
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCoin", wireType)
			}
			m.TotalCoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCoin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 66:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCarDistance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TotalCarDistance = float32(math.Float32frombits(v))
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GunID", wireType)
			}
			m.GunID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GunID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SightID", wireType)
			}
			m.SightID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SightID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 70:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SilenceID", wireType)
			}
			m.SilenceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SilenceID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagazineID", wireType)
			}
			m.MagazineID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagazineID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockID", wireType)
			}
			m.StockID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleID", wireType)
			}
			m.HandleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandleID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenIDByKill", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenIDByKill = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 75:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GunIDByKill", wireType)
			}
			m.GunIDByKill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GunIDByKill |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 76:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SightIDByKill", wireType)
			}
			m.SightIDByKill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SightIDByKill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 77:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SilenceIDByKill", wireType)
			}
			m.SilenceIDByKill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SilenceIDByKill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 78:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagazineIDByKill", wireType)
			}
			m.MagazineIDByKill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagazineIDByKill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 79:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockIDByKill", wireType)
			}
			m.StockIDByKill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockIDByKill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 80:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleIDByKill", wireType)
			}
			m.HandleIDByKill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandleIDByKill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 81:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadIsHead", wireType)
			}
			m.DeadIsHead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeadIsHead |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchType", wireType)
			}
			m.WatchType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 83:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchTime", wireType)
			}
			m.WatchTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 84:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadFailPlayerNum", wireType)
			}
			m.LoadFailPlayerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadFailPlayerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 86:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchMode", wireType)
			}
			m.MatchMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchMode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 87:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParachuteType", wireType)
			}
			m.ParachuteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParachuteType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 88:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TankUseTime", wireType)
			}
			m.TankUseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TankUseTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 89:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TankKillNum", wireType)
			}
			m.TankKillNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TankKillNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CareerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CareerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CareerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBattleNum", wireType)
			}
			m.TotalBattleNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBattleNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFirstNum", wireType)
			}
			m.TotalFirstNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFirstNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTopTenNum", wireType)
			}
			m.TotalTopTenNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTopTenNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalKillNum", wireType)
			}
			m.TotalKillNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalKillNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalHeadShot", wireType)
			}
			m.TotalHeadShot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalHeadShot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShotNum", wireType)
			}
			m.TotalShotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShotNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEffectHarm", wireType)
			}
			m.TotalEffectHarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalEffectHarm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSurviveTime", wireType)
			}
			m.TotalSurviveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSurviveTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDistance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TotalDistance = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoloRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SoloRating = float32(math.Float32frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoloRank", wireType)
			}
			m.SoloRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoloRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuoRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.DuoRating = float32(math.Float32frombits(v))
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuoRank", wireType)
			}
			m.DuoRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DuoRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquadRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SquadRating = float32(math.Float32frombits(v))
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquadRank", wireType)
			}
			m.SquadRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SquadRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TotalRating = float32(math.Float32frombits(v))
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRank", wireType)
			}
			m.TotalRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TopRating = float32(math.Float32frombits(v))
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameColor", wireType)
			}
			m.NameColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameColor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CareerBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CareerBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CareerBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBattleNum", wireType)
			}
			m.TotalBattleNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBattleNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstNum", wireType)
			}
			m.FirstNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopTenNum", wireType)
			}
			m.TopTenNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopTenNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalKillNum", wireType)
			}
			m.TotalKillNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalKillNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalHeadShot", wireType)
			}
			m.TotalHeadShot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalHeadShot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totalshotnum", wireType)
			}
			m.Totalshotnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Totalshotnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEffectHarm", wireType)
			}
			m.TotalEffectHarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalEffectHarm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurviveTime", wireType)
			}
			m.SurviveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurviveTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDistance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TotalDistance = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoloWinRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SoloWinRating = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoloKillRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SoloKillRating = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleWinRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.DoubleWinRating = float32(math.Float32frombits(v))
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleKillRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.DoubleKillRating = float32(math.Float32frombits(v))
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FourWinRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.FourWinRating = float32(math.Float32frombits(v))
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FourKillRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.FourKillRating = float32(math.Float32frombits(v))
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoloRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SoloRating = float32(math.Float32frombits(v))
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.DoubleRating = float32(math.Float32frombits(v))
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FourRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.FourRating = float32(math.Float32frombits(v))
		case 19:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totalscore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Totalscore = float32(math.Float32frombits(v))
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totalrank", wireType)
			}
			m.Totalrank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Totalrank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoloRank", wireType)
			}
			m.SoloRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoloRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleRank", wireType)
			}
			m.DoubleRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoubleRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquadRank", wireType)
			}
			m.SquadRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SquadRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TopScore = float32(math.Float32frombits(v))
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleMaxKill", wireType)
			}
			m.SingleMaxKill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SingleMaxKill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleMaxHeadShot", wireType)
			}
			m.SingleMaxHeadShot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SingleMaxHeadShot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvItemUseNum", wireType)
			}
			m.RecvItemUseNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecvItemUseNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarUseNum", wireType)
			}
			m.CarUseNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CarUseNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarDestroyNum", wireType)
			}
			m.CarDestroyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CarDestroyNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Solomodel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Solomodel = append(m.Solomodel, &DayRecordData{})
			if err := m.Solomodel[len(m.Solomodel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duomodel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duomodel = append(m.Duomodel, &DayRecordData{})
			if err := m.Duomodel[len(m.Duomodel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Squadmodel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Squadmodel = append(m.Squadmodel, &DayRecordData{})
			if err := m.Squadmodel[len(m.Squadmodel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DayRecordData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DayRecordData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DayRecordData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowTime", wireType)
			}
			m.NowTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			m.Model = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Model |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Rating = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalKillNum", wireType)
			}
			m.TotalKillNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalKillNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayBattleNum", wireType)
			}
			m.DayBattleNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayBattleNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstNum", wireType)
			}
			m.FirstNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopTenNum", wireType)
			}
			m.TopTenNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopTenNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettleDayData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettleDayData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettleDayData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstNum", wireType)
			}
			m.FirstNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopTenNum", wireType)
			}
			m.TopTenNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopTenNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.WinRating = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.KillRating = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEffectHarm", wireType)
			}
			m.TotalEffectHarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalEffectHarm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShotNum", wireType)
			}
			m.TotalShotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShotNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurviveTime", wireType)
			}
			m.SurviveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurviveTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDistance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TotalDistance = float32(math.Float32frombits(v))
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackNum", wireType)
			}
			m.AttackNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverNum", wireType)
			}
			m.RecoverNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoverNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revivenum", wireType)
			}
			m.Revivenum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revivenum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadShotNum", wireType)
			}
			m.HeadShotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadShotNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayBattleNum", wireType)
			}
			m.DayBattleNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayBattleNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowTime", wireType)
			}
			m.NowTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRank", wireType)
			}
			m.TotalRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = append(m.Tag, &DayTag{})
			if err := m.Tag[len(m.Tag)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DayTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DayTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DayTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VehiclePhysics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VehiclePhysics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VehiclePhysics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Vector3{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rotation == nil {
				m.Rotation = &Vector3{}
			}
			if err := m.Rotation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Velocity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Velocity == nil {
				m.Velocity = &Vector3{}
			}
			if err := m.Velocity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AngularVelocity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AngularVelocity == nil {
				m.AngularVelocity = &Vector3{}
			}
			if err := m.AngularVelocity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gear", wireType)
			}
			m.Gear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gear |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vehicle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vehicle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vehicle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prop == nil {
				m.Prop = &VehicleProp{}
			}
			if err := m.Prop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Physics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Physics == nil {
				m.Physics = &VehiclePhysics{}
			}
			if err := m.Physics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ownerid", wireType)
			}
			m.Ownerid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ownerid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DamageDefend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DamageDefend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DamageDefend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dam", wireType)
			}
			m.Dam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dam |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThrowDamageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThrowDamageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThrowDamageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Center", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Center == nil {
				m.Center = &Vector3{}
			}
			if err := m.Center.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseid", wireType)
			}
			m.Baseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Baseid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Defends = append(m.Defends, &DamageDefend{})
			if err := m.Defends[len(m.Defends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoorList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoorList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoorList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoorList = append(m.DoorList, &DoorData{})
			if err := m.DoorList[len(m.DoorList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoorData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoorData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoorData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector3{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseid", wireType)
			}
			m.Baseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Baseid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpaceLogInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpaceLogInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpaceLogInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &LogItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuideFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuideFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuideFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vopenid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vopenid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IGuideID", wireType)
			}
			m.IGuideID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IGuideID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenMic", wireType)
			}
			m.OpenMic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenMic |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleID", wireType)
			}
			m.BattleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleItemFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleItemFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleItemFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BehaveType", wireType)
			}
			m.BehaveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BehaveType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddReason", wireType)
			}
			m.AddReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddReason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapID", wireType)
			}
			m.MapID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buildings", wireType)
			}
			m.Buildings = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Buildings |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemLevel", wireType)
			}
			m.ItemLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemPlace", wireType)
			}
			m.ItemPlace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemPlace |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemNum", wireType)
			}
			m.ItemNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamType", wireType)
			}
			m.TeamType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BehaveType", wireType)
			}
			m.BehaveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BehaveType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleID", wireType)
			}
			m.BattleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapIDX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.MapIDX = float32(math.Float32frombits(v))
		case 22:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapIDY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.MapIDY = float32(math.Float32frombits(v))
		case 23:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapIDZ", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.MapIDZ = float32(math.Float32frombits(v))
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapType", wireType)
			}
			m.MapType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfIemID", wireType)
			}
			m.AfIemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AfIemID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeItemID", wireType)
			}
			m.BeItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeItemID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfItemLevel", wireType)
			}
			m.AfItemLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AfItemLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeItemLevel", wireType)
			}
			m.BeItemLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeItemLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagItemNum", wireType)
			}
			m.BagItemNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BagItemNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTime", wireType)
			}
			m.RoundTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Distance = float32(math.Float32frombits(v))
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkyBox", wireType)
			}
			m.SkyBox = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkyBox |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchMode", wireType)
			}
			m.MatchMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchMode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamType", wireType)
			}
			m.TeamType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleID", wireType)
			}
			m.BattleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapIDX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.MapIDX = float32(math.Float32frombits(v))
		case 21:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapIDY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.MapIDY = float32(math.Float32frombits(v))
		case 22:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapIDZ", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.MapIDZ = float32(math.Float32frombits(v))
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapType", wireType)
			}
			m.MapType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTime", wireType)
			}
			m.RoundTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultType", wireType)
			}
			m.ResultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.RoundScore = float32(math.Float32frombits(v))
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hurt", wireType)
			}
			m.Hurt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hurt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cirt", wireType)
			}
			m.Cirt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cirt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoneyProduce", wireType)
			}
			m.MoneyProduce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoneyProduce |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Distance = float32(math.Float32frombits(v))
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkyBox", wireType)
			}
			m.SkyBox = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkyBox |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchMode", wireType)
			}
			m.MatchMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchMode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchType", wireType)
			}
			m.MatchType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchScene", wireType)
			}
			m.MatchScene = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchScene |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchTime", wireType)
			}
			m.MatchTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealNum", wireType)
			}
			m.RealNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleID", wireType)
			}
			m.BattleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkyBox", wireType)
			}
			m.SkyBox = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkyBox |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamType", wireType)
			}
			m.TeamType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchMode", wireType)
			}
			m.MatchMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchMode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Score = float32(math.Float32frombits(v))
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreRank", wireType)
			}
			m.ScoreRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScoreRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Touts", wireType)
			}
			m.Touts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Touts |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wins", wireType)
			}
			m.Wins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wins |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topwins", wireType)
			}
			m.Topwins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topwins |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KD", wireType)
			}
			m.KD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KD |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeatAvg", wireType)
			}
			m.BeatAvg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeatAvg |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinRate", wireType)
			}
			m.WinRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopWinRate", wireType)
			}
			m.TopWinRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopWinRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CriticalRate", wireType)
			}
			m.CriticalRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CriticalRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.BestScore = float32(math.Float32frombits(v))
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestRank", wireType)
			}
			m.BestRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BestRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HurtAvg", wireType)
			}
			m.HurtAvg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HurtAvg |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeAvg", wireType)
			}
			m.TimeAvg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeAvg |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistanceAvg", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.DistanceAvg = float32(math.Float32frombits(v))
		case 30:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingBestScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SingBestScore = float32(math.Float32frombits(v))
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingBestRank", wireType)
			}
			m.SingBestRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SingBestRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuoBestScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.DuoBestScore = float32(math.Float32frombits(v))
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuoBestRank", wireType)
			}
			m.DuoBestRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DuoBestRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquadBestScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SquadBestScore = float32(math.Float32frombits(v))
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquadRank", wireType)
			}
			m.SquadRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SquadRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GunFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GunFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GunFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamType", wireType)
			}
			m.TeamType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleID", wireType)
			}
			m.BattleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapIDX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.MapIDX = float32(math.Float32frombits(v))
		case 21:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapIDY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.MapIDY = float32(math.Float32frombits(v))
		case 22:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapIDZ", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.MapIDZ = float32(math.Float32frombits(v))
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GunID", wireType)
			}
			m.GunID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GunID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SightID", wireType)
			}
			m.SightID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SightID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SilenceID", wireType)
			}
			m.SilenceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SilenceID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagazineID", wireType)
			}
			m.MagazineID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagazineID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Distance = float32(math.Float32frombits(v))
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dps", wireType)
			}
			m.Dps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dps |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kill", wireType)
			}
			m.Kill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadKill", wireType)
			}
			m.HeadKill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadKill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockID", wireType)
			}
			m.StockID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleID", wireType)
			}
			m.HandleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandleID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchMode", wireType)
			}
			m.MatchMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchMode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageID", wireType)
			}
			m.StageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			m.TaskID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopType", wireType)
			}
			m.ShopType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			m.ItemType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImoneyType", wireType)
			}
			m.ImoneyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImoneyType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consume", wireType)
			}
			m.Consume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consume |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperScene", wireType)
			}
			m.OperScene = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperScene |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperType", wireType)
			}
			m.OperType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FireMode", wireType)
			}
			m.FireMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FireMode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickMode", wireType)
			}
			m.PickMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PickMode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quick", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Quick = float32(math.Float32frombits(v))
		case 21:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Touch", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Touch = float32(math.Float32frombits(v))
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FireFollow", wireType)
			}
			m.FireFollow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FireFollow |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NearbyFre", wireType)
			}
			m.NearbyFre = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NearbyFre |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HitBack", wireType)
			}
			m.HitBack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HitBack |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchAble", wireType)
			}
			m.WatchAble = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchAble |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoneyFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoneyFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoneyFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMoney", wireType)
			}
			m.IMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMoney |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOrReduce", wireType)
			}
			m.AddOrReduce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOrReduce |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMoneyType", wireType)
			}
			m.IMoneyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMoneyType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMoneyCount", wireType)
			}
			m.IMoneyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMoneyCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchMode", wireType)
			}
			m.MatchMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchMode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnsFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnsFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnsFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnsType", wireType)
			}
			m.SnsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnsType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecGameStartFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecGameStartFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecGameStartFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaID", wireType)
			}
			m.AreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneID", wireType)
			}
			m.ZoneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZoneID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleID", wireType)
			}
			m.BattleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PicUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrUserMoney1", wireType)
			}
			m.SvrUserMoney1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrUserMoney1 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrUserMoney2", wireType)
			}
			m.SvrUserMoney2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrUserMoney2 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrUserMoney3", wireType)
			}
			m.SvrUserMoney3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrUserMoney3 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrRoundRank", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SvrRoundRank = float32(math.Float32frombits(v))
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrRoundRank1", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SvrRoundRank1 = float32(math.Float32frombits(v))
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrRoundRank2", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SvrRoundRank2 = float32(math.Float32frombits(v))
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrRoundRank3", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SvrRoundRank3 = float32(math.Float32frombits(v))
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrRoleID", wireType)
			}
			m.SvrRoleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrRoleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrRoleType", wireType)
			}
			m.SvrRoleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrRoleType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrMapid", wireType)
			}
			m.SvrMapid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrMapid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrWeatherid", wireType)
			}
			m.SvrWeatherid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrWeatherid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrItemList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvrItemList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleType", wireType)
			}
			m.RoleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mapid", wireType)
			}
			m.Mapid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mapid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weatherid", wireType)
			}
			m.Weatherid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weatherid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamType", wireType)
			}
			m.TeamType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoMatch", wireType)
			}
			m.AutoMatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoMatch |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerCount", wireType)
			}
			m.PlayerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamPlayer1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamPlayer2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamPlayer3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer1Rank", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TeamPlayer1Rank = float32(math.Float32frombits(v))
		case 39:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer2Rank", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TeamPlayer2Rank = float32(math.Float32frombits(v))
		case 40:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer3Rank", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TeamPlayer3Rank = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecGameEndFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecGameEndFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecGameEndFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaID", wireType)
			}
			m.AreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneID", wireType)
			}
			m.ZoneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZoneID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleID", wireType)
			}
			m.BattleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleID", wireType)
			}
			m.RoleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleType", wireType)
			}
			m.RoleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverTime", wireType)
			}
			m.OverTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndType", wireType)
			}
			m.EndType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillCount", wireType)
			}
			m.KillCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssistsCount", wireType)
			}
			m.AssistsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssistsCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropCount", wireType)
			}
			m.DropCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveCount", wireType)
			}
			m.SaveCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaveCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebornCount", wireType)
			}
			m.RebornCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RebornCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliveType", wireType)
			}
			m.AliveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AliveType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldGet", wireType)
			}
			m.GoldGet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldGet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiamondGet", wireType)
			}
			m.DiamondGet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiamondGet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpGet", wireType)
			}
			m.ExpGet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpGet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinRank", wireType)
			}
			m.WinRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPlayers", wireType)
			}
			m.TotalPlayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPlayers |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankEnd", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.RankEnd = float32(math.Float32frombits(v))
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamPlayer1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamPlayer2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamPlayer3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer1AliveType", wireType)
			}
			m.TeamPlayer1AliveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamPlayer1AliveType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer2AliveType", wireType)
			}
			m.TeamPlayer2AliveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamPlayer2AliveType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer3AliveType", wireType)
			}
			m.TeamPlayer3AliveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamPlayer3AliveType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer1Kill", wireType)
			}
			m.TeamPlayer1Kill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamPlayer1Kill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer2Kill", wireType)
			}
			m.TeamPlayer2Kill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamPlayer2Kill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPlayer3Kill", wireType)
			}
			m.TeamPlayer3Kill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamPlayer3Kill |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareRMBMoney) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareRMBMoney: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareRMBMoney: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActID", wireType)
			}
			m.ActID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoxID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnGoodsItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnGoodsItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnGoodsItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			m.Used = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Used |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			m.Sum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preference", wireType)
			}
			m.Preference = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Preference |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnGoodsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnGoodsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnGoodsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &OwnGoodsItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemVoiceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemVoiceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemVoiceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			m.MemberId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamVoiceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamVoiceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamVoiceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberInfos = append(m.MemberInfos, &MemVoiceInfo{})
			if err := m.MemberInfos[len(m.MemberInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettleMemInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettleMemInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettleMemInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killnum", wireType)
			}
			m.Killnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Killnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headshotnum", wireType)
			}
			m.Headshotnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Headshotnum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damagehp", wireType)
			}
			m.Damagehp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damagehp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Distance = float32(math.Float32frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gametime", wireType)
			}
			m.Gametime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gametime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Veteran", wireType)
			}
			m.Veteran = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Veteran |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameColor", wireType)
			}
			m.NameColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameColor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SettleMemInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshObjectListNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshObjectListNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshObjectListNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Obj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Obj = append(m.Obj, &T_Object{})
			if err := m.Obj[len(m.Obj)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StrangerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrangerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrangerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReConnetionFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReConnetionFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReConnetionFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropBoxInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropBoxInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropBoxInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thisid", wireType)
			}
			m.Thisid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Thisid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fakebox", wireType)
			}
			m.Fakebox = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fakebox |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector3{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Havepick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Havepick = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropBoxList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropBoxList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropBoxList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &DropBoxInfo{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IGoodsType", wireType)
			}
			m.IGoodsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IGoodsType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IGoodsId", wireType)
			}
			m.IGoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IGoodsId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterCount", wireType)
			}
			m.AfterCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AfterCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubReason", wireType)
			}
			m.SubReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubReason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMoney", wireType)
			}
			m.IMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMoney |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMoneyType", wireType)
			}
			m.IMoneyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMoneyType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOrReduce", wireType)
			}
			m.AddOrReduce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOrReduce |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReduceReason", wireType)
			}
			m.ReduceReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReduceReason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftUseTime", wireType)
			}
			m.LeftUseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftUseTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modeid", wireType)
			}
			m.Modeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modeid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Solo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Solo = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Duo = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Squad", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Squad = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonStart", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonStart = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonEnd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonEnd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchModeNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchModeNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchModeNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &ModeInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDot", wireType)
			}
			m.RedDot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedDot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivitysInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivitysInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivitysInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityState = append(m.ActivityState, &ActivityState{})
			if err := m.ActivityState[len(m.ActivityState)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeState = append(m.ExchangeState, &ActivityState{})
			if err := m.ExchangeState[len(m.ExchangeState)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MedalDataItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MedalDataItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MedalDataItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MedalDataList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MedalDataList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MedalDataList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &MedalDataItem{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillDrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillDrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillDrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thisid", wireType)
			}
			m.Thisid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Thisid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector3{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disappeartime", wireType)
			}
			m.Disappeartime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Disappeartime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillDropList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillDropList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillDropList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &KillDrop{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodRecordFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodRecordFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodRecordFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BehaveType", wireType)
			}
			m.BehaveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BehaveType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleStock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleStock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrollyStock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrollyStock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsTimeLeft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsTimeLeft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsTimeLeft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLeft", wireType)
			}
			m.TimeLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeLeft |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsTimeLeftNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsTimeLeftNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsTimeLeftNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &GoodsTimeLeft{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewYearGood) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewYearGood: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewYearGood: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetType", wireType)
			}
			m.TargetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNum", wireType)
			}
			m.TargetNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewYearInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewYearInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewYearInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodID = append(m.GoodID, &NewYearGood{})
			if err := m.GoodID[len(m.GoodID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecState", wireType)
			}
			m.RecState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecState |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchievementFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchievementFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchievementFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementID", wireType)
			}
			m.AchievementID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementLevel", wireType)
			}
			m.AchievementLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementExp", wireType)
			}
			m.AchievementExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementExp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsigniaFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsigniaFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsigniaFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogType", wireType)
			}
			m.LogType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsigniaID", wireType)
			}
			m.InsigniaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsigniaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsigniaNum", wireType)
			}
			m.InsigniaNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsigniaNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsigniaUse", wireType)
			}
			m.InsigniaUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsigniaUse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Achievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Achievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stamp = append(m.Stamp, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stamp = append(m.Stamp, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stamp", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchievementProcess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchievementProcess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchievementProcess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Num = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchievmentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchievmentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchievmentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Achievement{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Reward = append(m.Reward, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Reward = append(m.Reward, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Used = append(m.Used, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Used = append(m.Used, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Process = append(m.Process, &AchievementProcess{})
			if err := m.Process[len(m.Process)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Insignia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Insignia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Insignia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsigniaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsigniaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsigniaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &Insignia{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Use", wireType)
			}
			m.Use = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Use |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwardItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwardItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwardItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonAwards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonAwards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonAwards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			m.Season = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Season |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &AwardItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WearInGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WearInGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WearInGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			m.First = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.First |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Second", wireType)
			}
			m.Second = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Second |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Third", wireType)
			}
			m.Third = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Third |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WearInGameFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WearInGameFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WearInGameFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipID", wireType)
			}
			m.EquipID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EliteWeaponPos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EliteWeaponPos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EliteWeaponPos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector3{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EliteWeaponPosList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EliteWeaponPosList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EliteWeaponPosList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &EliteWeaponPos{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropBoxPos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropBoxPos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropBoxPos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector3{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropBoxPosList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropBoxPosList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropBoxPosList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &DropBoxPos{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreasureBoxInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreasureBoxInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreasureBoxInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinNum", wireType)
			}
			m.CoinNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreasureBoxList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreasureBoxList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreasureBoxList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &TreasureBoxInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreasureBoxFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreasureBoxFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreasureBoxFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxID", wireType)
			}
			m.BoxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenNum", wireType)
			}
			m.OpenNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMoneyType", wireType)
			}
			m.IMoneyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMoneyType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMoney", wireType)
			}
			m.IMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMoney |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MilitaryRankFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MilitaryRankFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MilitaryRankFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MilitaryRank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MilitaryRank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedNum", wireType)
			}
			m.FinishedNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishedNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awards", wireType)
			}
			m.Awards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Awards |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groupid", wireType)
			}
			m.Groupid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Groupid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskItems = append(m.TaskItems, &TaskItem{})
			if err := m.TaskItems[len(m.TaskItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveAwardsBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveAwardsBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveAwardsBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			m.BoxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awards", wireType)
			}
			m.Awards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Awards |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DayTaskDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DayTaskDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DayTaskDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayActiveness", wireType)
			}
			m.DayActiveness = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayActiveness |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayBoxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DayBoxs = append(m.DayBoxs, &ActiveAwardsBox{})
			if err := m.DayBoxs[len(m.DayBoxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekActiveness", wireType)
			}
			m.WeekActiveness = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeekActiveness |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekBoxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeekBoxs = append(m.WeekBoxs, &ActiveAwardsBox{})
			if err := m.WeekBoxs[len(m.WeekBoxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DayTaskList = append(m.DayTaskList, &TaskItem{})
			if err := m.DayTaskList[len(m.DayTaskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DayTaskFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DayTaskFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DayTaskFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskItemID", wireType)
			}
			m.TaskItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskItemID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskItemFinished", wireType)
			}
			m.TaskItemFinished = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskItemFinished |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivenessFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivenessFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivenessFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayActiveness", wireType)
			}
			m.DayActiveness = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayActiveness |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekActiveness", wireType)
			}
			m.WeekActiveness = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeekActiveness |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComradeTaskFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComradeTaskFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComradeTaskFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskItemID", wireType)
			}
			m.TaskItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskItemID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskItemFinished", wireType)
			}
			m.TaskItemFinished = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskItemFinished |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerPos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerPos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerPos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector3{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerPosList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerPosList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerPosList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerPos = append(m.PlayerPos, &PlayerPos{})
			if err := m.PlayerPos[len(m.PlayerPos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Followers = append(m.Followers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Followers = append(m.Followers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Followers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &FollowInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShellExplodeNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShellExplodeNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShellExplodeNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shooter", wireType)
			}
			m.Shooter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shooter |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseid", wireType)
			}
			m.Baseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Baseid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Center", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Center == nil {
				m.Center = &Vector3{}
			}
			if err := m.Center.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OldBringNewDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OldBringNewDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OldBringNewDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Teachers = append(m.Teachers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Teachers = append(m.Teachers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Teachers", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pupils = append(m.Pupils, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pupils = append(m.Pupils, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pupils", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLeft", wireType)
			}
			m.TimeLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeLeft |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Awards = append(m.Awards, &AwardInfo{})
			if err := m.Awards[len(m.Awards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComradeTaskDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComradeTaskDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComradeTaskDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComradeTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComradeTaskList = append(m.ComradeTaskList, &TaskItem{})
			if err := m.ComradeTaskList[len(m.ComradeTaskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VeteranInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VeteranInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VeteranInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameColor", wireType)
			}
			m.NameColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameColor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VeteranRecallList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VeteranRecallList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VeteranRecallList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeteranList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VeteranList = append(m.VeteranList, &VeteranInfo{})
			if err := m.VeteranList[len(m.VeteranList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VeteranRecallReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VeteranRecallReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VeteranRecallReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecallSusNum", wireType)
			}
			m.RecallSusNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecallSusNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RewardIdList = append(m.RewardIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RewardIdList = append(m.RewardIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeaponInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeaponInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeaponInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeaponId", wireType)
			}
			m.WeaponId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeaponId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Additions = append(m.Additions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Additions = append(m.Additions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Additions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeaponInGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeaponInGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeaponInGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weapons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weapons = append(m.Weapons, &WeaponInfo{})
			if err := m.Weapons[len(m.Weapons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VehicleFullNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VehicleFullNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VehicleFullNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uid = append(m.Uid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uid = append(m.Uid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreferenceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreferenceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreferenceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Start = append(m.Start, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Start = append(m.Start, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PreType = append(m.PreType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PreType = append(m.PreType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PreType", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreferenceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreferenceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreferenceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &PreferenceInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreferenceFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreferenceFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreferenceFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			m.ItemType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreType", wireType)
			}
			m.PreType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRecordDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRecordDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRecordDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoloRating", wireType)
			}
			m.SoloRating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoloRating |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuoRating", wireType)
			}
			m.DuoRating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DuoRating |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquadRating", wireType)
			}
			m.SquadRating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SquadRating |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Battles", wireType)
			}
			m.Battles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Battles |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wins", wireType)
			}
			m.Wins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wins |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopTens", wireType)
			}
			m.TopTens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopTens |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kda", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Kda = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bouns", wireType)
			}
			m.Bouns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bouns |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChampionContestInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChampionContestInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChampionContestInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &ContestInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Team = append(m.Team, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Team = append(m.Team, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OddsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OddsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OddsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Odds = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChampionOddsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChampionOddsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChampionOddsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &OddsInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stamp", wireType)
			}
			m.Stamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Odds = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChampionContestRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChampionContestRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChampionContestRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Record = append(m.Record, &ContestRecord{})
			if err := m.Record[len(m.Record)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldCupMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldCupMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldCupMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Contest = append(m.Contest, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Contest = append(m.Contest, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Contest", wireType)
			}
		case 3:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				v = uint32(dAtA[iNdEx-4])
				v |= uint32(dAtA[iNdEx-3]) << 8
				v |= uint32(dAtA[iNdEx-2]) << 16
				v |= uint32(dAtA[iNdEx-1]) << 24
				v2 := float32(math.Float32frombits(v))
				m.Odds = append(m.Odds, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 4
					v = uint32(dAtA[iNdEx-4])
					v |= uint32(dAtA[iNdEx-3]) << 8
					v |= uint32(dAtA[iNdEx-2]) << 16
					v |= uint32(dAtA[iNdEx-1]) << 24
					v2 := float32(math.Float32frombits(v))
					m.Odds = append(m.Odds, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Team = append(m.Team, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Score = append(m.Score, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Score = append(m.Score, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDone", wireType)
			}
			m.IsDone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDone |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReward", wireType)
			}
			m.IsReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsReward |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ScoreFinal = append(m.ScoreFinal, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ScoreFinal = append(m.ScoreFinal, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreFinal", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldCupMatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldCupMatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldCupMatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &WorldCupMatch{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldCupMatchRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldCupMatchRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldCupMatchRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stamp", wireType)
			}
			m.Stamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Odds = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Team = append(m.Team, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldCupMatchRecordInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldCupMatchRecordInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldCupMatchRecordInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &WorldCupMatchRecord{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FestivalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FestivalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FestivalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FestivalList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FestivalList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FestivalList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActState", wireType)
			}
			m.ActState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActState |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &FestivalInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Num = append(m.Num, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Num = append(m.Num, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeNum", wireType)
			}
			m.ExchangeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActState", wireType)
			}
			m.ActState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActState |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &ExchangeInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeTotalList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeTotalList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeTotalList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ExchangeList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FestivalFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FestivalFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FestivalFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			m.TaskID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActID", wireType)
			}
			m.ActID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeID", wireType)
			}
			m.ExchangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeNum", wireType)
			}
			m.ExchangeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BallStarReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BallStarReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BallStarReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BallStarInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BallStarInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BallStarInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActState", wireType)
			}
			m.ActState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActState |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			m.Sum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardState = append(m.RewardState, &BallStarReward{})
			if err := m.RewardState[len(m.RewardState)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BallStarFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BallStarFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BallStarFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			m.Sum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsID", wireType)
			}
			m.RewardsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsNum", wireType)
			}
			m.RewardsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheaterReportFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheaterReportFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheaterReportFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportTypeID", wireType)
			}
			m.ReportTypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportTypeID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportTypeSum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportTypeSum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldCupChampionFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldCupChampionFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldCupChampionFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Odds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldCupMatchFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldCupMatchFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldCupMatchFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Odds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskItems = append(m.TaskItems, &TaskItem{})
			if err := m.TaskItems[len(m.TaskItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwardList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwardList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwardList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &AwardInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhatDay", wireType)
			}
			m.WhatDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WhatDay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lists = append(m.Lists, &TaskList{})
			if err := m.Lists[len(m.Lists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialTaskDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialTaskDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialTaskDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detail == nil {
				m.Detail = &TaskDetail{}
			}
			if err := m.Detail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medals", wireType)
			}
			m.Medals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Medals |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Awards == nil {
				m.Awards = &AwardList{}
			}
			if err := m.Awards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replacements", wireType)
			}
			m.Replacements = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Replacements |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskItemID", wireType)
			}
			m.TaskItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskItemID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskItemFinished", wireType)
			}
			m.TaskItemFinished = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskItemFinished |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChaterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChaterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChaterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleTeam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BattleTeam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameColor", wireType)
			}
			m.NameColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameColor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamCustom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamCustom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamCustom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &ChaterInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchMode", wireType)
			}
			m.MatchMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchMode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mapid", wireType)
			}
			m.Mapid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mapid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchTyp", wireType)
			}
			m.MatchTyp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchTyp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurNum", wireType)
			}
			m.CurNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tags = append(m.Tags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tags = append(m.Tags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slogan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slogan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &ChaterInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trumpet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Trumpet = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stamp", wireType)
			}
			m.Stamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnreadChatDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnreadChatDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnreadChatDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &ChatInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnouncementDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnouncementDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnouncementDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameColor", wireType)
			}
			m.NameColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameColor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillID", wireType)
			}
			m.SkillID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModeSkillInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModeSkillInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModeSkillInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeID", wireType)
			}
			m.ModeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModeID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiveSkill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiveSkill = append(m.InitiveSkill, &SkillPosition{})
			if err := m.InitiveSkill[len(m.InitiveSkill)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassiveSkill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassiveSkill = append(m.PassiveSkill, &SkillPosition{})
			if err := m.PassiveSkill[len(m.PassiveSkill)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleSkillInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleSkillInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleSkillInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleID", wireType)
			}
			m.RoleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeList = append(m.ModeList, &ModeSkillInfo{})
			if err := m.ModeList[len(m.ModeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllSkillList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllSkillList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllSkillList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RoleSkillInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillEffect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillEffect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillEffect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillEffectList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillEffectList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillEffectList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SkillEffect{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleBookingFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleBookingFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleBookingFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Booker", wireType)
			}
			m.Booker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Booker |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookTarget", wireType)
			}
			m.BookTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BookTarget |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			m.Resp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonTaskList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonTaskList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonTaskList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskItems = append(m.TaskItems, &TaskItem{})
			if err := m.TaskItems[len(m.TaskItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeTaskDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeTaskDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeTaskDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			m.Season = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Season |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTime", wireType)
			}
			m.LeftTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			m.Grade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grade |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medals", wireType)
			}
			m.Medals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Medals |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EliteEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EliteEnable = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &CommonTaskList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalAwards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NormalAwards == nil {
				m.NormalAwards = &AwardList{}
			}
			if err := m.NormalAwards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EliteAwards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EliteAwards == nil {
				m.EliteAwards = &AwardList{}
			}
			if err := m.EliteAwards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleBookingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleBookingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleBookingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tmplist = append(m.Tmplist, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tmplist = append(m.Tmplist, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tmplist", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialExpFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialExpFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialExpFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialExp", wireType)
			}
			m.SpecialExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialExp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchType", wireType)
			}
			m.WatchType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchID", wireType)
			}
			m.WatchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeWatchID", wireType)
			}
			m.BeWatchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeWatchID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeWatchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeWatchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleID", wireType)
			}
			m.BattleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchNum", wireType)
			}
			m.WatchNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchTime", wireType)
			}
			m.WatchTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loading", wireType)
			}
			m.Loading = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loading |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Uint32Array) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Uint32Array: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Uint32Array: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonthCardFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthCardFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthCardFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			m.BeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedDotOnce) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedDotOnce: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedDotOnce: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dot", wireType)
			}
			m.Dot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedDotList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedDotList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedDotList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RedDotOnce{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonExpFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonExpFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonExpFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonExp", wireType)
			}
			m.SeasonExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonExp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillUseFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillUseFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillUseFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchMode", wireType)
			}
			m.MatchMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchMode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiveSkillID", wireType)
			}
			m.InitiveSkillID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiveSkillID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassiveSkillID", wireType)
			}
			m.PassiveSkillID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassiveSkillID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyGoodsFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyGoodsFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyGoodsFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DtEventTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DtEventTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VGameAppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VGameAppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IZoneAreaID", wireType)
			}
			m.IZoneAreaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IZoneAreaID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRoleProfession", wireType)
			}
			m.VRoleProfession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRoleProfession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFriendsNum", wireType)
			}
			m.PlayerFriendsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerFriendsNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelecomOper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TelecomOper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			m.LoginChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginChannel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BillNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMoneyType", wireType)
			}
			m.IMoneyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMoneyType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMoney", wireType)
			}
			m.IMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMoney |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccGoods", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccGoods = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailGoods", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailGoods = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccBuy", wireType)
			}
			m.SuccBuy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccBuy |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccRoll", wireType)
			}
			m.SuccRoll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccRoll |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGame
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGame
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGame(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGame = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game.proto", fileDescriptorGame) }

var fileDescriptorGame = []byte{
	// 9151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x5d, 0x8c, 0x24, 0x49,
	0x92, 0x10, 0x7c, 0xf9, 0x9f, 0x69, 0x99, 0x59, 0x3f, 0x59, 0x7f, 0x59, 0xfd, 0x3f, 0xd1, 0x33,
	0x3b, 0x3d, 0xb3, 0x37, 0xb3, 0x33, 0xdd, 0x33, 0x3b, 0x3b, 0x73, 0xb3, 0xfb, 0x6d, 0x55, 0x65,
	0x75, 0x77, 0x7d, 0xdb, 0xd5, 0x5d, 0x53, 0x59, 0xdd, 0x7d, 0xbb, 0x68, 0x39, 0xbc, 0x32, 0xbc,
	0x32, 0x63, 0x2a, 0x32, 0x3c, 0x3b, 0x22, 0x32, 0xbb, 0xea, 0x9e, 0x40, 0xa7, 0xdb, 0x07, 0xd0,
	0x71, 0xdc, 0xbd, 0x22, 0x24, 0x40, 0x0b, 0x48, 0xf0, 0x70, 0x2f, 0x08, 0xa4, 0x93, 0x10, 0x42,
	0x48, 0xdc, 0x4a, 0x7b, 0xfc, 0x48, 0x08, 0x21, 0x04, 0x5a, 0xad, 0xf6, 0x78, 0x42, 0x48, 0xf7,
	0xc0, 0x03, 0x2b, 0xc1, 0x03, 0xf2, 0x9f, 0x88, 0x70, 0xf3, 0x88, 0xa8, 0x9e, 0x39, 0xf6, 0x21,
	0x6f, 0xa9, 0x87, 0x56, 0x57, 0x86, 0xf9, 0xaf, 0xb9, 0x99, 0xb9, 0xb9, 0x99, 0xb9, 0x39, 0xc0,
	0x90, 0x8c, 0xe9, 0xbb, 0x13, 0x9f, 0x85, 0xac, 0x53, 0x17, 0xff, 0xed, 0x07, 0x43, 0x8b, 0x42,
	0xe7, 0x69, 0x40, 0xfd, 0x7d, 0xe2, 0x78, 0x3d, 0x12, 0x92, 0xc7, 0x2c, 0x74, 0x4e, 0xce, 0x3b,
	0xcb, 0x50, 0x9a, 0x3a, 0x76, 0xb7, 0x70, 0xab, 0x70, 0xa7, 0xbc, 0x5d, 0xfe, 0xd1, 0x4f, 0x6e,
	0xfe, 0x4a, 0xa7, 0x03, 0x65, 0x8f, 0x8c, 0x69, 0xb7, 0x78, 0xab, 0x70, 0xa7, 0xa1, 0xbe, 0xad,
	0x40, 0x65, 0xc0, 0x1c, 0x2f, 0xe8, 0x96, 0xb4, 0x82, 0x2b, 0x50, 0xb1, 0x1d, 0x32, 0x0e, 0xba,
	0xe5, 0xe4, 0xa3, 0xf5, 0x29, 0xd4, 0x9e, 0xd1, 0x41, 0xc8, 0xfc, 0x7b, 0x9d, 0x45, 0x28, 0x9c,
	0x89, 0x96, 0x8b, 0xaa, 0xc2, 0x22, 0x14, 0xce, 0x45, 0xb3, 0xda, 0x87, 0xdf, 0x14, 0x4d, 0xaa,
	0x0f, 0xd6, 0xef, 0x14, 0xa0, 0x7e, 0xf4, 0x1b, 0x4f, 0x8e, 0x3f, 0xa7, 0x83, 0xb0, 0xb3, 0x0a,
	0xd5, 0x63, 0x12, 0x50, 0x35, 0xbc, 0xb6, 0xaa, 0xb3, 0x0a, 0xd5, 0x70, 0xe4, 0x04, 0x8e, 0x2d,
	0x5a, 0x2a, 0xeb, 0x03, 0x9c, 0x7a, 0xa1, 0x68, 0x2d, 0x2a, 0xba, 0x0c, 0x8d, 0xe1, 0xd4, 0xf3,
	0xe9, 0x09, 0xf3, 0xc7, 0xdd, 0xf2, 0xad, 0xd2, 0x9d, 0xb6, 0x68, 0x73, 0xea, 0xba, 0x34, 0xec,
	0x56, 0xb4, 0x82, 0x1b, 0xd0, 0xf0, 0xa9, 0x3d, 0x1d, 0x50, 0x9b, 0x8c, 0xbb, 0xd5, 0x04, 0x60,
	0xfd, 0xbd, 0x22, 0xac, 0xec, 0x8c, 0x7c, 0x32, 0x08, 0x39, 0xe6, 0x26, 0x1c, 0x71, 0x7b, 0xde,
	0x09, 0xfb, 0x12, 0x68, 0x73, 0xe9, 0x8c, 0xba, 0x68, 0x54, 0x37, 0xa0, 0x34, 0x61, 0x12, 0x69,
	0xcd, 0xbb, 0xcb, 0xef, 0x46, 0x0b, 0xf4, 0x6e, 0x84, 0xb6, 0x35, 0xa8, 0x8d, 0x67, 0xc1, 0x84,
	0x52, 0x5b, 0x8c, 0xb1, 0x98, 0xb4, 0x35, 0x26, 0x67, 0xa3, 0x89, 0x3e, 0xbe, 0xce, 0x12, 0x14,
	0x47, 0x93, 0x6e, 0x4d, 0xfb, 0xb2, 0x09, 0x4d, 0xe6, 0x3b, 0xd4, 0x0b, 0x49, 0xe8, 0x30, 0xaf,
	0x5b, 0xd7, 0x5a, 0xb0, 0xa0, 0xfa, 0x92, 0x92, 0x09, 0xf3, 0xba, 0x0d, 0xd1, 0x77, 0x27, 0xe9,
	0x3b, 0xc6, 0xf9, 0x1b, 0xd0, 0x08, 0xe8, 0x40, 0x15, 0x83, 0xdc, 0x62, 0x0b, 0x50, 0x25, 0xfe,
	0x98, 0xf9, 0x41, 0xb7, 0xc9, 0xd1, 0x6a, 0x7d, 0x1d, 0x56, 0x0e, 0xe9, 0x89, 0x4f, 0x83, 0x91,
	0x2c, 0xa0, 0xa8, 0xeb, 0x26, 0x94, 0xd8, 0xf1, 0xe7, 0x02, 0x4d, 0x99, 0xed, 0x58, 0xaf, 0x43,
	0xeb, 0x69, 0x40, 0xe5, 0x8f, 0x43, 0xfa, 0x42, 0x5b, 0x5c, 0x0d, 0xb5, 0xd6, 0xdb, 0xd0, 0x39,
	0xa4, 0x63, 0x36, 0xa3, 0xa8, 0xf1, 0xec, 0xb2, 0x7f, 0x09, 0x96, 0xd4, 0x48, 0x1e, 0x4c, 0x3d,
	0x55, 0xf2, 0x16, 0x94, 0xd9, 0xf1, 0xe7, 0x41, 0xfe, 0x38, 0x38, 0x01, 0x4c, 0x03, 0xaa, 0xa6,
	0xad, 0xd3, 0x95, 0x5a, 0x68, 0x8d, 0xec, 0xad, 0x1d, 0x68, 0xf7, 0x7c, 0x36, 0x49, 0x9a, 0xcf,
	0x20, 0x86, 0x9b, 0x50, 0x9a, 0x06, 0x92, 0x16, 0xb2, 0x27, 0xfe, 0x16, 0x2c, 0xec, 0x9e, 0x0d,
	0x46, 0xc4, 0x1b, 0xd2, 0x07, 0x53, 0x8f, 0x4f, 0x1d, 0x0d, 0xa1, 0x80, 0x38, 0x0a, 0x17, 0x0d,
	0x73, 0x8b, 0x46, 0x23, 0x29, 0xa2, 0xd1, 0xb6, 0x44, 0x2d, 0xce, 0x03, 0xbc, 0x9b, 0x2b, 0xd0,
	0x92, 0x0c, 0x91, 0xc6, 0x1d, 0x6f, 0x77, 0x38, 0xf5, 0xd2, 0xdc, 0x65, 0xf5, 0x60, 0x25, 0x6e,
	0xe4, 0xa9, 0x47, 0x5f, 0x4c, 0x9d, 0x89, 0x1a, 0x72, 0x52, 0x5e, 0x6f, 0x28, 0xe1, 0xdc, 0xa2,
	0xc6, 0x4c, 0x3f, 0x29, 0x40, 0x63, 0x2b, 0x0c, 0xc9, 0xe0, 0x94, 0x57, 0x5e, 0x87, 0xba, 0x4d,
	0x4f, 0xa8, 0x67, 0xa7, 0xeb, 0x3a, 0xc1, 0x88, 0x12, 0x59, 0xb7, 0x1e, 0xd3, 0x6e, 0x8d, 0xf9,
	0xce, 0x90, 0x93, 0x74, 0x29, 0x8f, 0x71, 0x6e, 0x40, 0xc9, 0x76, 0xfc, 0x7c, 0xc6, 0x5a, 0x87,
	0xfa, 0x89, 0xe3, 0xd3, 0xd0, 0x19, 0x53, 0xc4, 0xfd, 0x7c, 0x24, 0x4e, 0x10, 0x12, 0x6f, 0x40,
	0x05, 0x73, 0x15, 0x93, 0xef, 0x44, 0x0c, 0xd7, 0xb1, 0x05, 0x8b, 0x69, 0x68, 0x92, 0xdf, 0x0f,
	0x58, 0x20, 0x18, 0x2c, 0x9a, 0xe0, 0x47, 0x50, 0xef, 0x8f, 0x18, 0x13, 0x94, 0xbc, 0x02, 0x15,
	0x27, 0x08, 0xa6, 0x03, 0x31, 0xb7, 0x7a, 0x46, 0x8b, 0x3a, 0x7e, 0x7f, 0x50, 0x81, 0xee, 0x3e,
	0x99, 0xec, 0x8c, 0x88, 0x14, 0x35, 0x87, 0x34, 0x98, 0xba, 0x11, 0x9d, 0x77, 0xa0, 0xec, 0x13,
	0xef, 0x14, 0x09, 0xc1, 0x0e, 0x94, 0x4f, 0x1d, 0xd7, 0xd5, 0xd1, 0xdb, 0xb9, 0x0a, 0x6d, 0x3e,
	0x35, 0xc7, 0x0b, 0xe8, 0x80, 0x79, 0x76, 0x80, 0x84, 0xce, 0x2a, 0x54, 0xc9, 0x58, 0x08, 0xc8,
	0xb2, 0xf6, 0x75, 0x05, 0x2a, 0x3e, 0x9b, 0x7a, 0x36, 0x42, 0xc7, 0x26, 0x34, 0x39, 0xfa, 0x83,
	0x11, 0x0b, 0xbd, 0x29, 0x12, 0x87, 0x5c, 0x34, 0x45, 0x9f, 0x75, 0x99, 0xd3, 0x05, 0xa0, 0x27,
	0x27, 0x74, 0x10, 0x8e, 0x88, 0x3f, 0xd6, 0x31, 0xc2, 0x21, 0x3e, 0x1d, 0xb0, 0x19, 0xf5, 0x79,
	0x9d, 0x86, 0x29, 0x72, 0x67, 0xce, 0x8c, 0x72, 0x00, 0x68, 0x80, 0x2b, 0xd0, 0xe2, 0x53, 0x8b,
	0x57, 0xa4, 0xa9, 0xad, 0xc8, 0x55, 0x68, 0xdb, 0x34, 0x08, 0x7d, 0x76, 0x3e, 0x20, 0xa2, 0xc5,
	0x16, 0xee, 0x8b, 0x57, 0x0c, 0xc2, 0x31, 0x87, 0xb4, 0x71, 0x5f, 0x12, 0xed, 0x1c, 0xb0, 0x80,
	0xa7, 0xea, 0x33, 0x62, 0xf3, 0x6a, 0x1c, 0xb4, 0x88, 0x89, 0x62, 0xe0, 0xb2, 0x70, 0xc4, 0xbf,
	0x2f, 0xe1, 0xef, 0x42, 0x36, 0xf3, 0xef, 0xcb, 0x46, 0x53, 0x53, 0x2f, 0x1e, 0x75, 0x47, 0x1b,
	0xf5, 0x06, 0x34, 0xc4, 0xc0, 0x06, 0xcc, 0xa7, 0xdd, 0x15, 0x0c, 0xe0, 0x2b, 0x2b, 0x01, 0xab,
	0x18, 0x10, 0xb2, 0x90, 0xb8, 0x62, 0xdd, 0xd7, 0xf0, 0x1c, 0x05, 0x40, 0x56, 0x59, 0xd7, 0xaa,
	0x74, 0xa0, 0xcc, 0x77, 0xe8, 0xee, 0x06, 0x9e, 0xf7, 0xb1, 0x4f, 0x66, 0x74, 0x87, 0x03, 0xba,
	0xda, 0xbe, 0xb4, 0x01, 0x8d, 0x31, 0x09, 0x07, 0xa3, 0x31, 0xb3, 0x69, 0x77, 0x13, 0x51, 0x30,
	0xec, 0x8c, 0x48, 0x44, 0x79, 0x6b, 0x50, 0x1b, 0x30, 0x2f, 0xa4, 0x5e, 0x28, 0x88, 0xaf, 0x91,
	0x74, 0x15, 0x9e, 0x4f, 0x28, 0xe2, 0xed, 0x17, 0x00, 0xdf, 0x63, 0x1e, 0x4d, 0x48, 0x56, 0x94,
	0xd0, 0x49, 0xf6, 0x35, 0xa8, 0x0e, 0xa8, 0x17, 0x52, 0x5f, 0x49, 0xc5, 0x0c, 0x06, 0x5d, 0x85,
	0xaa, 0x4f, 0x6c, 0x67, 0x1a, 0xe8, 0x3a, 0x01, 0xc7, 0xb8, 0xc3, 0xeb, 0xcd, 0x88, 0xab, 0x13,
	0xaf, 0xf5, 0x06, 0x2c, 0xee, 0x08, 0xa9, 0xb8, 0x2d, 0x36, 0x74, 0xce, 0x74, 0x1d, 0x28, 0x9f,
	0x4c, 0x5d, 0x57, 0xe7, 0x39, 0xeb, 0x13, 0xb3, 0x58, 0x98, 0x25, 0xb0, 0x13, 0xbd, 0x40, 0x9f,
	0xd5, 0xef, 0x16, 0x61, 0xe1, 0x88, 0x92, 0xf1, 0x3e, 0x1d, 0x1f, 0x53, 0xff, 0xcb, 0xec, 0xfc,
	0xeb, 0x50, 0x1f, 0xd3, 0x71, 0x3f, 0x24, 0x21, 0x45, 0x7c, 0xc8, 0x37, 0x77, 0x66, 0x53, 0xd7,
	0xb1, 0x75, 0xad, 0x49, 0xcd, 0x91, 0xc5, 0xa2, 0xa9, 0x94, 0x7c, 0x77, 0xd9, 0x40, 0x6e, 0xe5,
	0x55, 0xbc, 0x04, 0xf6, 0xb1, 0x21, 0x96, 0x44, 0x1b, 0x81, 0x33, 0xf4, 0x1c, 0x22, 0x78, 0xb0,
	0x91, 0x74, 0x39, 0xa3, 0x21, 0xf5, 0x89, 0x67, 0x32, 0x20, 0x1f, 0xf5, 0x0e, 0x73, 0x99, 0x8f,
	0x18, 0xf0, 0x2a, 0xb4, 0xd9, 0x34, 0x0c, 0x1c, 0x9b, 0x3e, 0x97, 0x3b, 0x4c, 0x53, 0xc3, 0xc8,
	0x8f, 0x0a, 0xb0, 0xd8, 0x3f, 0xf7, 0x06, 0x1c, 0x2b, 0x1c, 0x1f, 0x1c, 0x9d, 0x4b, 0x50, 0x4c,
	0x6f, 0x24, 0x21, 0x25, 0x6a, 0xfa, 0xba, 0x8c, 0xfa, 0x55, 0x80, 0xb1, 0xc0, 0xa5, 0xe3, 0x9d,
	0xb0, 0x6e, 0xe9, 0x56, 0xe9, 0x4e, 0xf3, 0x6e, 0x57, 0xdb, 0x1e, 0x31, 0xae, 0xf9, 0xec, 0x29,
	0xb1, 0xa9, 0x9f, 0xc6, 0x16, 0x6f, 0x5e, 0x90, 0x98, 0xa1, 0xc6, 0x91, 0x69, 0xc8, 0x04, 0x69,
	0x23, 0xb9, 0x25, 0x74, 0xa7, 0x89, 0xc2, 0x57, 0x3b, 0xd6, 0x2a, 0xd6, 0x94, 0xa6, 0x70, 0x40,
	0x06, 0xa7, 0x3b, 0xd4, 0x75, 0x93, 0xfd, 0x9c, 0x73, 0xb7, 0x46, 0xbc, 0xd6, 0x00, 0x16, 0xfa,
	0xd3, 0xf1, 0x98, 0x79, 0x5b, 0x7b, 0xaa, 0xd0, 0x0a, 0x54, 0x88, 0x63, 0x14, 0xeb, 0xb4, 0xa1,
	0x32, 0x0d, 0xa8, 0x1f, 0x74, 0x8b, 0xb7, 0x4a, 0x77, 0xca, 0x9c, 0xa8, 0x82, 0xd3, 0xf3, 0x63,
	0x76, 0x86, 0x48, 0x60, 0x03, 0x1a, 0xfd, 0x01, 0xf5, 0xe8, 0x11, 0x1f, 0xbe, 0x4e, 0xd0, 0x3d,
	0x58, 0x4f, 0x54, 0x17, 0x49, 0xad, 0x17, 0xa9, 0x3a, 0x39, 0x34, 0xfb, 0xa3, 0x02, 0xac, 0xef,
	0x79, 0x4e, 0x78, 0xc8, 0xd8, 0x98, 0xe3, 0xf3, 0xc0, 0x25, 0xe7, 0xd4, 0xdf, 0x0b, 0xe9, 0x38,
	0x63, 0xa1, 0xb2, 0x48, 0x57, 0xea, 0x94, 0x25, 0x8c, 0xbe, 0x7d, 0xa1, 0x7a, 0x1a, 0x7b, 0x47,
	0x20, 0xd6, 0xb7, 0x92, 0xd6, 0x6d, 0xab, 0x79, 0x1c, 0x2e, 0xd4, 0x74, 0x4e, 0x70, 0xb5, 0x3c,
	0x4a, 0xd4, 0xf7, 0xd3, 0x5d, 0x58, 0xd1, 0x67, 0x12, 0xd1, 0xdb, 0xbb, 0x50, 0x76, 0x42, 0xca,
	0x31, 0xcf, 0xc9, 0xe7, 0x56, 0xd2, 0x4b, 0xf6, 0xb4, 0xad, 0xdf, 0x2f, 0xc0, 0x3a, 0xa7, 0xd9,
	0x2f, 0x84, 0x11, 0x39, 0xfb, 0x62, 0x7a, 0x4e, 0xa5, 0x0b, 0xe6, 0x24, 0x11, 0xa1, 0x63, 0xe7,
	0x26, 0x94, 0x7d, 0x16, 0x12, 0x81, 0x9c, 0xac, 0x5a, 0x7c, 0x6e, 0xfd, 0xf3, 0xf1, 0xe0, 0x0b,
	0xcf, 0x2d, 0x7b, 0x02, 0xd6, 0x9f, 0x16, 0xa1, 0xd5, 0x73, 0x94, 0xdc, 0xe5, 0x0d, 0x64, 0x89,
	0xde, 0x2e, 0x80, 0xdc, 0xff, 0x04, 0x27, 0xe9, 0xea, 0x6d, 0x17, 0x40, 0x2a, 0x61, 0x02, 0xa2,
	0x1f, 0xee, 0xae, 0x40, 0x2b, 0xaa, 0x23, 0x28, 0xa4, 0xac, 0x51, 0xc8, 0x15, 0x68, 0x45, 0xb5,
	0x04, 0xac, 0xa2, 0xc1, 0xba, 0x00, 0x4e, 0xf0, 0x90, 0x12, 0x7b, 0xc4, 0x82, 0xd0, 0x64, 0xc2,
	0xe1, 0xd4, 0x33, 0x84, 0x96, 0xd8, 0xd1, 0x65, 0x53, 0x12, 0x89, 0x75, 0xbc, 0xa7, 0x0e, 0xa6,
	0xfe, 0x96, 0xeb, 0xcc, 0x68, 0xdf, 0x50, 0x1f, 0x6e, 0xc0, 0x52, 0x3c, 0xa5, 0x48, 0xe8, 0x81,
	0x36, 0x8c, 0x1b, 0xb0, 0x14, 0x4f, 0x2c, 0x82, 0x37, 0x35, 0xf8, 0x55, 0x68, 0x47, 0xf5, 0x25,
	0x41, 0xb6, 0xb0, 0x04, 0x8c, 0x2a, 0x4b, 0xa0, 0xa6, 0x4c, 0x58, 0x1f, 0x40, 0x73, 0x87, 0x4d,
	0x1c, 0x97, 0x85, 0xfc, 0x34, 0x28, 0xf4, 0x3c, 0xcf, 0xa6, 0x67, 0x08, 0xe1, 0x92, 0xac, 0x74,
	0x0d, 0xef, 0x87, 0x45, 0x68, 0x3e, 0xa3, 0x23, 0x67, 0xe0, 0xd2, 0x03, 0x9f, 0x4d, 0x38, 0xcd,
	0xcf, 0xe4, 0xcf, 0xbd, 0x1e, 0xa2, 0xbf, 0x35, 0xa8, 0x89, 0xc6, 0xf7, 0x7a, 0x68, 0xa1, 0xde,
	0x84, 0xfa, 0x40, 0xf6, 0x1a, 0x28, 0xb1, 0xb9, 0x96, 0xd0, 0x86, 0x31, 0x1e, 0xb9, 0xcb, 0x96,
	0x35, 0xbd, 0x13, 0x9d, 0x6f, 0x2b, 0x99, 0x87, 0xe9, 0x2a, 0x16, 0xdf, 0xb2, 0xf8, 0x98, 0x9c,
	0x21, 0x4e, 0x5d, 0x83, 0xda, 0x34, 0x90, 0x0a, 0x74, 0x5d, 0x2b, 0xcf, 0x35, 0x46, 0x32, 0xa3,
	0xf4, 0x6c, 0xe2, 0x72, 0x85, 0xa2, 0x81, 0x35, 0xde, 0x93, 0x29, 0x75, 0x1f, 0xd1, 0x93, 0x50,
	0xac, 0x4f, 0x31, 0x69, 0x89, 0x7f, 0xdf, 0x27, 0x67, 0xba, 0x82, 0x67, 0xed, 0x42, 0x9d, 0x93,
	0xb5, 0x40, 0x51, 0xf6, 0xf1, 0x3f, 0x85, 0xda, 0x48, 0x5c, 0x6b, 0x02, 0xcb, 0xda, 0x8b, 0x8f,
	0xa3, 0xdb, 0xec, 0xec, 0xc9, 0xf1, 0xe7, 0x4a, 0x8c, 0xa6, 0xb9, 0xfd, 0x16, 0x94, 0x6d, 0x12,
	0x12, 0x21, 0xaf, 0xd1, 0x41, 0x2d, 0x1a, 0x85, 0x35, 0x82, 0x3a, 0xa7, 0xe6, 0x0b, 0x46, 0x84,
	0x90, 0x5b, 0xc4, 0x80, 0x31, 0x39, 0x93, 0x30, 0x53, 0x19, 0xe7, 0x4c, 0xae, 0x76, 0xb5, 0x68,
	0xd0, 0x87, 0x50, 0xdf, 0x66, 0xf6, 0xf9, 0x2f, 0xb2, 0x27, 0xeb, 0x13, 0x68, 0x6d, 0xf3, 0x83,
	0x0a, 0xff, 0x97, 0xdf, 0x6e, 0x32, 0x1e, 0x7d, 0x23, 0xf9, 0x9f, 0x05, 0x58, 0x90, 0x92, 0xe6,
	0x90, 0x0e, 0x9d, 0x20, 0xa4, 0x3e, 0xef, 0xe7, 0x01, 0x19, 0xd3, 0xfe, 0xcc, 0x57, 0x54, 0xdb,
	0x48, 0x28, 0xa0, 0x17, 0xee, 0xce, 0xa8, 0x17, 0x1e, 0x39, 0xc6, 0x76, 0xd2, 0x05, 0x78, 0xc6,
	0x2b, 0x6d, 0x4d, 0x26, 0x7b, 0x3d, 0x31, 0xb8, 0x46, 0xd2, 0xed, 0x81, 0x4b, 0x38, 0xa5, 0x97,
	0x31, 0xd3, 0xef, 0x71, 0x55, 0x72, 0xcb, 0xa7, 0x64, 0xaf, 0x87, 0xa8, 0x75, 0x0d, 0x6a, 0xcf,
	0x9e, 0x4c, 0xa8, 0xb7, 0xd7, 0x43, 0xca, 0xd0, 0x26, 0x34, 0x8f, 0xa8, 0x4b, 0x07, 0x6c, 0xfc,
	0x64, 0x42, 0xe5, 0xd6, 0xa2, 0x75, 0x7e, 0x48, 0x87, 0x5c, 0xff, 0xf3, 0xa8, 0x8b, 0xb4, 0xa2,
	0x2b, 0xd0, 0x7a, 0xc4, 0x86, 0x8e, 0x17, 0xc1, 0x34, 0xe1, 0x62, 0xfd, 0xa3, 0x12, 0x34, 0xe5,
	0xcc, 0x45, 0x91, 0x39, 0x9d, 0xf6, 0x0a, 0x54, 0x1e, 0x09, 0xe3, 0x52, 0x0d, 0xcb, 0x45, 0x39,
	0xf2, 0xfb, 0xbe, 0x43, 0x3d, 0x3b, 0x78, 0x3c, 0xc5, 0x07, 0xb2, 0xab, 0xd0, 0xde, 0x71, 0x1d,
	0xea, 0x85, 0xcf, 0xa8, 0x1f, 0x38, 0xca, 0x14, 0x14, 0xb5, 0x78, 0x0d, 0x16, 0xfa, 0xe7, 0x41,
	0x48, 0xc7, 0x0f, 0x89, 0x6f, 0xbf, 0x24, 0x3e, 0x45, 0x22, 0xd5, 0x40, 0x73, 0x13, 0xab, 0x98,
	0x8f, 0x69, 0xf8, 0x92, 0xf9, 0xa7, 0x42, 0x8e, 0xe6, 0xe1, 0xb8, 0x6d, 0x4c, 0xea, 0x90, 0x09,
	0xf1, 0xb7, 0x80, 0x4f, 0x26, 0xe2, 0xf3, 0x63, 0xbe, 0xaf, 0x2c, 0xe6, 0xae, 0xe4, 0x52, 0x02,
	0xb1, 0x7e, 0x5a, 0x84, 0x56, 0xbc, 0x5a, 0x6c, 0x1a, 0xce, 0xe9, 0x72, 0x75, 0x01, 0x9e, 0x78,
	0xae, 0xe3, 0x51, 0xd1, 0x77, 0x0d, 0x6f, 0x8c, 0x72, 0x21, 0xeb, 0xaf, 0x58, 0xc8, 0xc6, 0x45,
	0x0b, 0x09, 0x17, 0x2e, 0x64, 0x33, 0x7f, 0x21, 0x5b, 0xd9, 0x0b, 0xd9, 0xd6, 0x50, 0xfc, 0x3e,
	0xc0, 0x3e, 0x71, 0x5c, 0x65, 0x2c, 0x4b, 0xc4, 0x68, 0x1b, 0x8b, 0x60, 0x5d, 0x7a, 0xfc, 0xa0,
	0x08, 0x75, 0x5e, 0x47, 0x28, 0xf2, 0xab, 0x50, 0x1d, 0x13, 0xc7, 0x35, 0x84, 0x2f, 0x3f, 0x23,
	0x11, 0xc7, 0x35, 0xcf, 0x92, 0x7c, 0x10, 0x43, 0x1a, 0x8a, 0x5d, 0xa6, 0x84, 0x8b, 0xf3, 0x5d,
	0xc6, 0xa7, 0xc4, 0x46, 0x9b, 0xdb, 0x0a, 0x54, 0x42, 0x27, 0x74, 0xb1, 0x1a, 0xc2, 0xd5, 0x20,
	0x7a, 0x16, 0xa2, 0x15, 0xe0, 0x47, 0x37, 0xdf, 0x45, 0xf2, 0xc1, 0x52, 0x96, 0xc1, 0xba, 0x90,
	0xff, 0xab, 0x89, 0xfc, 0xd7, 0xa6, 0xbb, 0x06, 0x35, 0xde, 0xef, 0x90, 0x86, 0x68, 0x67, 0x13,
	0xda, 0x77, 0x18, 0x1a, 0x98, 0x5f, 0x82, 0x22, 0x0b, 0x74, 0x6c, 0x5b, 0xef, 0x41, 0x2b, 0xc2,
	0xc3, 0x23, 0x27, 0x08, 0xf9, 0x96, 0xe3, 0x3a, 0x41, 0xa8, 0x34, 0xbc, 0x0e, 0xee, 0x92, 0x97,
	0xb2, 0x96, 0x60, 0xe1, 0x90, 0xbe, 0x78, 0x40, 0x43, 0xfe, 0x85, 0xd7, 0xb1, 0xde, 0x83, 0xe6,
	0x61, 0xf2, 0xb3, 0xf3, 0x1a, 0x3f, 0xce, 0x38, 0x6e, 0x70, 0x41, 0x1b, 0xb7, 0x79, 0x8d, 0x17,
	0x17, 0x2f, 0x80, 0xf5, 0xb5, 0xb8, 0x59, 0x51, 0xe8, 0x16, 0x94, 0x79, 0xa1, 0xb4, 0x99, 0x34,
	0x6e, 0x75, 0x13, 0x6a, 0x3d, 0xbe, 0x69, 0x3b, 0x6e, 0x67, 0x41, 0x6b, 0xb1, 0x74, 0xa7, 0x6c,
	0x59, 0x00, 0x6a, 0xc4, 0x4f, 0x8e, 0x3f, 0xcf, 0xe9, 0xef, 0xb7, 0x0a, 0xd0, 0xda, 0xf2, 0xbc,
	0x29, 0xf3, 0x06, 0x54, 0xf4, 0x98, 0x79, 0x72, 0x0c, 0x42, 0xe2, 0x27, 0x0c, 0x5a, 0x4a, 0x88,
	0x82, 0x7a, 0xf6, 0x51, 0x44, 0x14, 0xa5, 0x44, 0xc4, 0x08, 0xe3, 0x80, 0x47, 0x5c, 0x01, 0x2b,
	0xe3, 0x2a, 0x91, 0xf9, 0x42, 0x23, 0x0d, 0xeb, 0xd7, 0xe4, 0xa9, 0x42, 0x1f, 0x08, 0x57, 0x9c,
	0x5f, 0x47, 0x9a, 0xf7, 0x7a, 0x32, 0x7b, 0xbd, 0xa0, 0xf5, 0x1f, 0x8a, 0x00, 0x92, 0x23, 0x73,
	0x26, 0x90, 0xe3, 0x06, 0x08, 0x52, 0x96, 0x00, 0x4e, 0xa1, 0xd1, 0x88, 0xdb, 0x98, 0x42, 0x2b,
	0x58, 0x20, 0x0a, 0x7d, 0x6e, 0xe2, 0x92, 0xd0, 0x14, 0xff, 0x2f, 0x5e, 0xcc, 0x1c, 0x6c, 0xfd,
	0x5f, 0x87, 0xba, 0xe7, 0x0c, 0x4e, 0xc5, 0x08, 0xea, 0x58, 0x88, 0x0d, 0x85, 0x3e, 0x8b, 0x64,
	0x48, 0xec, 0x9e, 0x00, 0xac, 0x4b, 0xbc, 0xe4, 0x07, 0x68, 0x72, 0xec, 0x52, 0xfd, 0xe8, 0xcf,
	0x4b, 0x1f, 0x0b, 0x63, 0x61, 0x4b, 0xe3, 0x82, 0x2e, 0xc0, 0x31, 0x09, 0x43, 0x97, 0xf2, 0x73,
	0x89, 0x2e, 0x33, 0xd4, 0xa4, 0xc7, 0x13, 0x21, 0xde, 0xcb, 0x59, 0x47, 0x3d, 0xcd, 0xdc, 0x66,
	0xbd, 0x0e, 0x1d, 0x2e, 0x65, 0x25, 0x6a, 0x85, 0xdd, 0xe0, 0x90, 0xbe, 0xe0, 0x44, 0xc6, 0x26,
	0xd4, 0x53, 0x44, 0xd6, 0xb0, 0xfe, 0xb0, 0x00, 0x8b, 0x46, 0x31, 0x3e, 0xb5, 0xb8, 0x0c, 0xe6,
	0xf5, 0xb4, 0x8b, 0xe8, 0x8b, 0xad, 0x42, 0xb4, 0x84, 0x95, 0x2c, 0x4f, 0x4e, 0x35, 0xef, 0xe0,
	0x5a, 0xcb, 0x42, 0x55, 0x5d, 0x33, 0x44, 0x7d, 0x33, 0x63, 0x8a, 0x61, 0xe7, 0x4d, 0xa5, 0x81,
	0x4a, 0xb2, 0xdb, 0x4c, 0xc8, 0xce, 0x28, 0x6b, 0xfd, 0xb4, 0x00, 0x0b, 0xf2, 0xf7, 0x21, 0xf1,
	0x4e, 0x23, 0x5b, 0xd4, 0xd3, 0x34, 0xf9, 0x3d, 0x36, 0xc9, 0x8f, 0x17, 0xf3, 0x5d, 0xb4, 0xa9,
	0x75, 0x01, 0xfa, 0xcc, 0x65, 0x87, 0x24, 0x74, 0xbc, 0xa1, 0x98, 0xbc, 0x66, 0x7a, 0xec, 0x4d,
	0x23, 0x80, 0xee, 0x7f, 0xda, 0x84, 0x66, 0xff, 0xc5, 0x94, 0xd8, 0x0a, 0x54, 0xc5, 0xae, 0xa9,
	0xcf, 0x5e, 0x3c, 0x33, 0x48, 0xb1, 0x0b, 0xc0, 0x37, 0xd4, 0x5d, 0x79, 0x1a, 0xa9, 0x63, 0x92,
	0x4e, 0xd0, 0xa6, 0xeb, 0x5d, 0x9f, 0x42, 0x87, 0x1f, 0x73, 0x93, 0x59, 0x0a, 0x69, 0xf7, 0x15,
	0x28, 0xef, 0x25, 0x8c, 0xa9, 0x59, 0x8b, 0x30, 0x36, 0xac, 0xef, 0xf3, 0x4d, 0x2f, 0xaa, 0x2d,
	0x6a, 0x5a, 0x88, 0xa5, 0x57, 0xcd, 0x9a, 0x02, 0x87, 0x6f, 0x42, 0xe3, 0xd8, 0x25, 0x03, 0xd1,
	0x95, 0x3a, 0x06, 0x64, 0x16, 0xb4, 0x7e, 0xaf, 0x00, 0x8b, 0xf2, 0xe7, 0xd6, 0x64, 0xe2, 0x9e,
	0x7f, 0x09, 0xf6, 0xdf, 0x80, 0x06, 0xe1, 0x55, 0x52, 0xc2, 0x4b, 0xb1, 0x7b, 0x39, 0x8b, 0xce,
	0x2a, 0x79, 0x74, 0xa6, 0xbb, 0x27, 0xbf, 0x05, 0x2b, 0xc9, 0x94, 0xc5, 0xb0, 0xc4, 0xbc, 0xdf,
	0x44, 0xf3, 0xde, 0x34, 0xa7, 0x13, 0x8f, 0xdf, 0xf2, 0xa1, 0xdd, 0x63, 0x7d, 0x3e, 0xc3, 0x90,
	0x8e, 0x95, 0xd7, 0x42, 0xee, 0xa5, 0x05, 0xac, 0x14, 0x44, 0x72, 0xb4, 0x98, 0xb1, 0x77, 0x96,
	0x2e, 0xd8, 0x3b, 0xd3, 0x33, 0xb4, 0xfe, 0x02, 0xb4, 0x94, 0x76, 0x26, 0xf9, 0xd7, 0x50, 0xca,
	0x8c, 0x8e, 0x85, 0x52, 0xb6, 0x77, 0x80, 0x3a, 0x36, 0x74, 0x2f, 0xfd, 0xbc, 0xf3, 0x4f, 0x3b,
	0xd0, 0x38, 0xe4, 0x9c, 0x77, 0xdf, 0x65, 0x2f, 0xe7, 0x54, 0x11, 0x5c, 0x87, 0xfa, 0xb6, 0x10,
	0x99, 0x7b, 0x3d, 0x64, 0x0a, 0xe9, 0x02, 0xc8, 0xef, 0xc2, 0x30, 0x68, 0x78, 0x51, 0xc4, 0xa4,
	0xfa, 0xc2, 0xea, 0x6f, 0x18, 0x71, 0x05, 0x44, 0x4c, 0x03, 0xf0, 0x91, 0x4e, 0x3a, 0x91, 0x90,
	0x08, 0xef, 0x40, 0x99, 0xb3, 0x0b, 0x32, 0x76, 0x74, 0xa0, 0xfc, 0x80, 0xb9, 0x36, 0x52, 0xce,
	0xaf, 0xc1, 0xc2, 0x11, 0x0b, 0x89, 0x2b, 0xc7, 0xf3, 0xd8, 0xf0, 0x9a, 0xac, 0x43, 0xfd, 0xbe,
	0xe3, 0x07, 0xe1, 0x63, 0xc3, 0x65, 0xb2, 0x01, 0x8d, 0x23, 0x36, 0x39, 0xa2, 0xde, 0x63, 0xc3,
	0x67, 0xb2, 0x01, 0x0d, 0x51, 0xe1, 0x90, 0x4b, 0xdf, 0x65, 0x8c, 0x6c, 0x59, 0x43, 0x40, 0x3a,
	0xd8, 0x3e, 0xd3, 0x77, 0xbc, 0xa1, 0x4b, 0xf7, 0xc9, 0xd9, 0x77, 0x1c, 0xd7, 0x15, 0x7e, 0x13,
	0xcd, 0x45, 0x24, 0x86, 0xc7, 0x01, 0xbc, 0xaf, 0x55, 0x3c, 0xf4, 0xad, 0x19, 0xf5, 0xc9, 0x90,
	0x46, 0xd0, 0x35, 0xad, 0xd9, 0x9b, 0xb0, 0x1c, 0x37, 0xcb, 0x8f, 0xf5, 0xfd, 0x11, 0x0b, 0x85,
	0x1b, 0x45, 0x53, 0xab, 0x45, 0xd3, 0x31, 0x50, 0xf7, 0xa7, 0x5c, 0x87, 0x45, 0x01, 0xdc, 0x15,
	0xce, 0xae, 0x87, 0xc4, 0x1f, 0x0b, 0xaf, 0x4a, 0x62, 0xf3, 0x5b, 0x56, 0x5d, 0x6b, 0x05, 0x36,
	0xf1, 0x79, 0x28, 0x6a, 0x57, 0x4c, 0xf8, 0x0a, 0x56, 0xd9, 0x0f, 0xe9, 0x60, 0xc6, 0x19, 0xf1,
	0x69, 0x20, 0x50, 0x7e, 0x15, 0x63, 0x70, 0x87, 0xf8, 0x0a, 0x70, 0xcd, 0x38, 0x06, 0x10, 0xbf,
	0x27, 0x9d, 0x62, 0x1c, 0x78, 0x1d, 0xd3, 0x0d, 0x47, 0x82, 0x92, 0xd8, 0x37, 0xb0, 0x94, 0x7f,
	0xee, 0x78, 0x0a, 0x70, 0x13, 0x4b, 0x79, 0x41, 0x50, 0x0a, 0x74, 0x0b, 0x83, 0xc4, 0xec, 0x15,
	0xe8, 0x35, 0xdc, 0x9c, 0x3c, 0xac, 0xf0, 0x11, 0x58, 0x78, 0x23, 0xdc, 0xda, 0xe3, 0x1f, 0x6f,
	0x63, 0x3c, 0x29, 0xbb, 0xc2, 0xd4, 0xeb, 0x45, 0x0e, 0xb3, 0xd7, 0xb5, 0xe6, 0xae, 0xc1, 0xc2,
	0x0e, 0x41, 0xd0, 0x37, 0xb0, 0x3f, 0xa8, 0xb7, 0xbb, 0xd5, 0x3b, 0xfa, 0xee, 0xc1, 0x6e, 0xf7,
	0x2b, 0x06, 0x2f, 0x48, 0x5f, 0xe3, 0xc3, 0x49, 0xf7, 0x4d, 0x8c, 0x86, 0x6d, 0xe2, 0xd9, 0x64,
	0x28, 0xb0, 0x77, 0x07, 0x63, 0x6f, 0x9f, 0xda, 0xce, 0x80, 0xb8, 0xdb, 0xec, 0x8c, 0x03, 0xdf,
	0xc2, 0xc0, 0x03, 0xe2, 0x78, 0xa7, 0x8e, 0xeb, 0xca, 0x89, 0xbd, 0x8d, 0x3b, 0xdb, 0xf5, 0xa8,
	0x3f, 0x14, 0x38, 0xff, 0x2a, 0x96, 0x07, 0xd1, 0x1a, 0x73, 0xd0, 0xaf, 0xe2, 0x71, 0x68, 0x84,
	0xf1, 0x0e, 0x96, 0x14, 0x51, 0x85, 0x77, 0xcd, 0x19, 0xcd, 0x9c, 0x99, 0x18, 0xf7, 0xd7, 0x30,
	0x03, 0xf0, 0x85, 0x8d, 0xd1, 0xf3, 0x9e, 0x86, 0x1e, 0xb5, 0xe8, 0xfd, 0x70, 0xcc, 0x6b, 0xbd,
	0x6f, 0x88, 0x91, 0x84, 0x8a, 0xee, 0x62, 0xa6, 0x39, 0x54, 0x64, 0xc4, 0x7c, 0x31, 0xa5, 0x7b,
	0x78, 0x18, 0xd2, 0x6d, 0xcf, 0x01, 0x1f, 0x60, 0x21, 0xd3, 0x3f, 0x3d, 0xdf, 0x66, 0x67, 0xdd,
	0x0f, 0xb1, 0x40, 0x11, 0x1c, 0xfb, 0x75, 0x7c, 0x9a, 0x15, 0xb4, 0xd3, 0x9f, 0xfa, 0x7c, 0x3e,
	0x42, 0x5c, 0x7d, 0xa4, 0xed, 0x84, 0x11, 0xdb, 0xc5, 0x33, 0xfa, 0x06, 0xa6, 0x2e, 0x45, 0x78,
	0xde, 0x69, 0xf7, 0x63, 0x3c, 0x21, 0x4d, 0x8b, 0xf9, 0x24, 0x4f, 0x8b, 0xf9, 0xb5, 0x7c, 0x2d,
	0xe6, 0x53, 0x4c, 0x57, 0xb2, 0x35, 0xef, 0xb4, 0xfb, 0x4d, 0xbc, 0x38, 0xa2, 0x2d, 0xef, 0xb4,
	0xfb, 0x2d, 0xc3, 0x8d, 0x23, 0x5b, 0xf2, 0x4e, 0xbb, 0xff, 0x5f, 0x4a, 0x0c, 0xaa, 0x0e, 0xbe,
	0x9d, 0x31, 0x0f, 0xe1, 0x8e, 0xdd, 0xca, 0xc0, 0x0e, 0x5f, 0x82, 0x08, 0x01, 0xdb, 0x5a, 0xc5,
	0x55, 0xa8, 0x0a, 0x1f, 0x41, 0xaf, 0xbb, 0x83, 0xf5, 0xd9, 0x07, 0x53, 0xbe, 0xb9, 0xf4, 0xb0,
	0xf9, 0xb8, 0xef, 0x0c, 0x47, 0x7c, 0x97, 0xda, 0x35, 0x06, 0xeb, 0xb8, 0x94, 0x9f, 0x62, 0x7a,
	0xdd, 0xfb, 0x18, 0x85, 0xfb, 0x64, 0x48, 0x7e, 0xd3, 0xf1, 0x38, 0xe4, 0x81, 0x41, 0x93, 0x21,
	0x1b, 0x9c, 0xee, 0xf5, 0xba, 0x0f, 0xb1, 0xf0, 0x7f, 0x48, 0x3c, 0x5b, 0xec, 0x5e, 0x7b, 0x98,
	0x24, 0xe5, 0x5e, 0xb7, 0x7d, 0x2e, 0x56, 0xff, 0xff, 0xc7, 0xdb, 0xad, 0x18, 0xa9, 0x02, 0x7d,
	0x07, 0xdb, 0xff, 0xd5, 0x78, 0x15, 0xf0, 0x11, 0x96, 0xb7, 0xf1, 0xa8, 0x15, 0x78, 0x1f, 0xa3,
	0x2d, 0x19, 0xbb, 0x82, 0x3f, 0xc6, 0x0c, 0xac, 0x66, 0xa0, 0x80, 0x4f, 0x30, 0xc9, 0x47, 0xf3,
	0x50, 0xd0, 0x03, 0x8c, 0x96, 0x1e, 0x25, 0xf6, 0x9e, 0xf0, 0x64, 0x74, 0x3f, 0xc3, 0x98, 0x7c,
	0xce, 0x8f, 0x47, 0x62, 0x93, 0x3e, 0xcc, 0x02, 0x70, 0xda, 0xee, 0x6b, 0xb4, 0x7d, 0x13, 0x96,
	0x1f, 0x31, 0x62, 0xdf, 0x27, 0x8e, 0x9b, 0x08, 0xc9, 0x23, 0x5c, 0x73, 0x16, 0xdb, 0xbc, 0x9e,
	0x62, 0xc5, 0x71, 0x9f, 0x37, 0xb9, 0xcf, 0x6c, 0xda, 0x7d, 0x66, 0x8a, 0x26, 0x9f, 0x0c, 0x46,
	0xd3, 0x50, 0x6a, 0x0b, 0xcf, 0xb1, 0x04, 0x0a, 0x89, 0x77, 0xfa, 0x34, 0x90, 0x6c, 0xf6, 0xeb,
	0x69, 0x50, 0xb4, 0x33, 0x7e, 0x57, 0x8f, 0x74, 0x2b, 0x03, 0xec, 0x10, 0x9f, 0x52, 0x5f, 0xb8,
	0x11, 0x32, 0x8e, 0x16, 0x69, 0xa5, 0xa0, 0x98, 0xb1, 0x71, 0xc6, 0x9a, 0x41, 0x29, 0x43, 0x9f,
	0x48, 0xd4, 0x83, 0xf2, 0x05, 0xdb, 0x79, 0xe5, 0xa2, 0xfd, 0xb8, 0x9a, 0x51, 0x31, 0x92, 0x9d,
	0xb5, 0x8b, 0xf7, 0xea, 0xfa, 0x2b, 0x04, 0x52, 0xe3, 0x22, 0x81, 0x04, 0x58, 0xc4, 0x6a, 0x72,
	0xa7, 0x99, 0x23, 0x43, 0x5a, 0x78, 0x89, 0x13, 0x79, 0xd4, 0xc6, 0x7e, 0x90, 0x48, 0xb8, 0x18,
	0x81, 0x29, 0xba, 0x98, 0x5a, 0xc4, 0x52, 0x24, 0x91, 0x3b, 0x4b, 0xb8, 0x8e, 0xbe, 0x3f, 0x2f,
	0xe7, 0x49, 0xd0, 0x4e, 0x9e, 0xac, 0x32, 0x42, 0x53, 0x1e, 0xc7, 0x47, 0x0e, 0x4d, 0xbf, 0xb2,
	0xfe, 0x55, 0x35, 0xa2, 0x93, 0x6d, 0x12, 0xd0, 0x0c, 0xa2, 0x28, 0xe4, 0x68, 0x8a, 0xc5, 0x3c,
	0x4d, 0xb1, 0x74, 0x01, 0x29, 0x94, 0x2f, 0x22, 0x85, 0x4a, 0x46, 0xc5, 0xac, 0xa8, 0xa5, 0x0c,
	0x52, 0x30, 0x22, 0x26, 0x75, 0x2a, 0xa8, 0x5f, 0x44, 0x05, 0x0d, 0x1c, 0x8c, 0xc4, 0xd7, 0x3a,
	0xd1, 0xa3, 0x00, 0xab, 0x30, 0x1c, 0xa8, 0xa9, 0x5f, 0x3a, 0x99, 0x5c, 0x87, 0xc5, 0x1e, 0x9b,
	0x1e, 0xbb, 0x34, 0xa9, 0xdc, 0xd2, 0xc0, 0x37, 0x60, 0x49, 0x82, 0xb5, 0xea, 0x6d, 0xdc, 0xf3,
	0x7d, 0x36, 0xf5, 0x93, 0xca, 0x0b, 0xb8, 0x67, 0x0e, 0xd4, 0xaa, 0x2e, 0xe6, 0x92, 0xee, 0x92,
	0x06, 0xb9, 0x02, 0x2d, 0xd9, 0x69, 0x06, 0xfd, 0x74, 0x01, 0x78, 0x9b, 0x0a, 0xd2, 0xc1, 0x90,
	0xa3, 0x24, 0x20, 0x69, 0x25, 0x83, 0xe6, 0x44, 0x0c, 0xd3, 0x2a, 0x26, 0x8a, 0x98, 0x47, 0x8c,
	0xd8, 0xa6, 0x68, 0x00, 0xde, 0x29, 0x52, 0xca, 0x11, 0xc9, 0x6f, 0xe0, 0xa6, 0x8e, 0xd8, 0x44,
	0x1e, 0x8b, 0xba, 0xc6, 0xd2, 0xa0, 0xd3, 0xc3, 0x26, 0x56, 0x3f, 0xd3, 0x67, 0x80, 0x2b, 0x86,
	0x36, 0xf4, 0x8b, 0x56, 0xc5, 0x97, 0xa0, 0xb8, 0x67, 0x0b, 0x15, 0x3c, 0x32, 0x86, 0xfe, 0x5e,
	0x01, 0x9a, 0x42, 0xba, 0x73, 0xa5, 0xd5, 0xb7, 0x3b, 0x6f, 0x43, 0x23, 0x60, 0x2e, 0x13, 0xd1,
	0x41, 0xea, 0xe4, 0xbe, 0x91, 0x9c, 0xa9, 0x7b, 0xe4, 0x5c, 0x96, 0x13, 0xd2, 0xf9, 0x2d, 0xa8,
	0xdb, 0x53, 0x55, 0xb4, 0x78, 0x71, 0xd1, 0xaf, 0x02, 0x04, 0x1c, 0x77, 0xb2, 0x70, 0xe9, 0xc2,
	0xc2, 0xd6, 0x1f, 0x17, 0xa0, 0x8d, 0xab, 0xaf, 0x41, 0xed, 0x31, 0x7b, 0x19, 0x9f, 0xcc, 0x4b,
	0x5a, 0x44, 0x88, 0xea, 0x1d, 0x9f, 0x39, 0x25, 0x85, 0x94, 0x30, 0x5d, 0xe5, 0xb2, 0x34, 0xa7,
	0x39, 0x72, 0x9e, 0xc8, 0x8e, 0x4a, 0x8e, 0xec, 0xa8, 0xe6, 0xc9, 0x8e, 0x5a, 0xca, 0x33, 0xac,
	0x19, 0x9a, 0xac, 0xff, 0x5a, 0x82, 0x76, 0x9f, 0xf2, 0xc6, 0x7b, 0xe4, 0x5c, 0x4c, 0x47, 0x6f,
	0xb4, 0x90, 0xd7, 0xa8, 0x21, 0xa9, 0x12, 0x36, 0x2b, 0xa5, 0xd5, 0xec, 0x0c, 0x0b, 0x5a, 0x86,
	0xb8, 0xa9, 0x5c, 0xb0, 0x69, 0x55, 0xf3, 0x45, 0x51, 0x2d, 0x43, 0xfa, 0xc5, 0xa2, 0xa8, 0x8e,
	0x79, 0x2d, 0xd1, 0xd0, 0x1b, 0x86, 0xca, 0x2f, 0xcf, 0x44, 0x8f, 0x8d, 0x30, 0xcb, 0xf8, 0x6c,
	0xc1, 0xa5, 0x65, 0x33, 0xff, 0x00, 0xd3, 0xba, 0x60, 0xb9, 0x0c, 0x7f, 0x5e, 0x44, 0x28, 0x0b,
	0x1a, 0xa1, 0xa0, 0x9d, 0x67, 0xd1, 0xd0, 0xdd, 0xa9, 0x3f, 0xa3, 0xbe, 0xd0, 0x5f, 0x34, 0x7f,
	0x5e, 0xe7, 0x3a, 0x94, 0x8e, 0x08, 0x97, 0x3f, 0x9c, 0x54, 0x97, 0x10, 0xa9, 0x1e, 0x91, 0xa1,
	0x5a, 0x66, 0xcd, 0x56, 0x60, 0x5d, 0x85, 0xaa, 0x82, 0x2d, 0xcb, 0xaa, 0x9a, 0xa9, 0xc7, 0xfa,
	0xe7, 0x05, 0x58, 0x88, 0x02, 0x2f, 0x46, 0xe7, 0x81, 0x33, 0x08, 0x3a, 0xb7, 0xa1, 0x3e, 0x61,
	0x81, 0x23, 0x82, 0xea, 0x0a, 0x79, 0x51, 0x3d, 0xb7, 0xa1, 0xee, 0x33, 0x15, 0x44, 0x5f, 0xbc,
	0xa0, 0xd0, 0x8c, 0xba, 0x6c, 0xe0, 0x84, 0xe7, 0xf9, 0xf1, 0x41, 0x6f, 0xc3, 0x22, 0xf1, 0x86,
	0x53, 0x97, 0xf8, 0xcf, 0xa2, 0xb2, 0xb9, 0x21, 0xca, 0x1d, 0x28, 0x0f, 0x29, 0xf1, 0x05, 0xc1,
	0x54, 0xd4, 0x0c, 0x26, 0x50, 0x53, 0x13, 0xe8, 0xdc, 0x86, 0xf2, 0xc4, 0x67, 0x13, 0x35, 0xea,
	0x35, 0xbd, 0x7e, 0x12, 0x5a, 0xf2, 0x16, 0xd4, 0x26, 0x72, 0xa6, 0x6a, 0xe0, 0xdd, 0x74, 0x39,
	0x85, 0x89, 0x35, 0xa8, 0xb1, 0x97, 0x9e, 0x19, 0xfb, 0x63, 0xdd, 0xe3, 0xeb, 0x3c, 0x26, 0x43,
	0xda, 0x13, 0x51, 0x30, 0x19, 0x66, 0xce, 0x65, 0x28, 0x19, 0x31, 0x08, 0x56, 0x00, 0x8b, 0x47,
	0x23, 0x9f, 0xbd, 0x94, 0x35, 0x85, 0x79, 0x34, 0x09, 0xf9, 0x2c, 0x5c, 0x10, 0xf2, 0x99, 0x8e,
	0x14, 0xef, 0xbc, 0x09, 0x35, 0x19, 0x80, 0x13, 0x59, 0x17, 0xd7, 0x75, 0x32, 0x48, 0x46, 0x66,
	0xbd, 0x07, 0xf5, 0x1e, 0x63, 0xbe, 0xb0, 0x7a, 0xbe, 0x0e, 0x75, 0x5b, 0xfd, 0x9d, 0x76, 0x8c,
	0xf1, 0x52, 0x42, 0xc4, 0x7d, 0x26, 0x6b, 0x08, 0x69, 0x90, 0x9e, 0x97, 0x8a, 0xf5, 0x2a, 0xbe,
	0x32, 0xd6, 0x4b, 0x37, 0x3a, 0xde, 0x85, 0xda, 0x23, 0x36, 0x14, 0xf1, 0x64, 0xd9, 0xf1, 0x15,
	0x19, 0xee, 0xd1, 0xf7, 0xa0, 0xd5, 0x9f, 0x90, 0x01, 0xe5, 0x15, 0xa5, 0xef, 0xad, 0xe2, 0x84,
	0x74, 0x1c, 0xb9, 0xf4, 0xb4, 0xae, 0x55, 0xd3, 0xd6, 0x1f, 0x94, 0xa0, 0xf1, 0x60, 0xea, 0xd8,
	0xd4, 0x34, 0x6d, 0xda, 0xa6, 0x69, 0xd3, 0xce, 0x37, 0x6d, 0xce, 0x94, 0x69, 0x53, 0x2d, 0xf8,
	0x2b, 0x4d, 0x9b, 0x4e, 0xbe, 0x69, 0x73, 0xa6, 0xbc, 0x2e, 0x55, 0x7c, 0x60, 0x49, 0x4e, 0x32,
	0x35, 0xc4, 0xd3, 0x8b, 0x02, 0x70, 0xe0, 0xb3, 0x13, 0x1a, 0x04, 0xd1, 0xcd, 0x94, 0x94, 0x07,
	0xbc, 0xf1, 0x0a, 0x0f, 0x38, 0x5c, 0xe4, 0x01, 0x6f, 0x5e, 0xe8, 0x01, 0x6f, 0xe5, 0x7b, 0xc0,
	0xdb, 0xd9, 0x1e, 0xf0, 0x85, 0x0b, 0x42, 0x19, 0x8c, 0x50, 0xf1, 0x3d, 0xb1, 0x32, 0x7b, 0x3d,
	0x5d, 0x21, 0xb7, 0xfe, 0x6a, 0x19, 0xea, 0x3b, 0x23, 0x12, 0xce, 0xb1, 0x2d, 0x1a, 0x85, 0x5b,
	0x18, 0x0b, 0xf6, 0xec, 0x97, 0x76, 0xc1, 0xd6, 0xa0, 0xc6, 0x71, 0xb1, 0xef, 0x0c, 0xcc, 0xd0,
	0x7e, 0xbe, 0x5c, 0x62, 0x43, 0x5a, 0xc6, 0xc5, 0xf7, 0x83, 0xa1, 0xf8, 0xdc, 0xc1, 0xc5, 0x63,
	0x3b, 0xfe, 0x0a, 0x0e, 0xcb, 0x55, 0xd6, 0x9a, 0x55, 0x4d, 0xa6, 0xfe, 0xdb, 0x22, 0x2c, 0xa8,
	0xe2, 0x21, 0x1d, 0xcf, 0x03, 0x49, 0x74, 0x01, 0xb6, 0xe9, 0x88, 0xcc, 0xa4, 0x05, 0xc1, 0x50,
	0xb1, 0xb6, 0x6c, 0xfb, 0x90, 0x92, 0x80, 0x79, 0xa6, 0x5f, 0x73, 0x9f, 0xf0, 0x8e, 0xeb, 0xb8,
	0xf4, 0xf6, 0xd4, 0x71, 0x6d, 0xc7, 0x1b, 0x06, 0x88, 0x1e, 0x56, 0xa1, 0xca, 0xe7, 0xba, 0xd7,
	0x33, 0x15, 0x0f, 0xfe, 0x55, 0x92, 0x4f, 0x33, 0x0d, 0x38, 0x70, 0xc9, 0x80, 0x22, 0xb5, 0x63,
	0x0d, 0x6a, 0x1c, 0x60, 0x68, 0x1c, 0xd6, 0x7f, 0xaa, 0x46, 0x0e, 0x93, 0x4b, 0x06, 0x9b, 0x33,
	0x06, 0xeb, 0x40, 0x59, 0xd8, 0xac, 0x96, 0x70, 0xf8, 0x0e, 0x67, 0x8b, 0x14, 0x77, 0x25, 0xec,
	0xd2, 0x31, 0x9c, 0x61, 0x09, 0x71, 0xae, 0xe4, 0xb0, 0xdd, 0x2a, 0x66, 0x3b, 0x41, 0x9b, 0xbf,
	0x2e, 0x0e, 0x95, 0x45, 0xe3, 0xeb, 0x77, 0xd1, 0x65, 0x99, 0xe8, 0xeb, 0xf7, 0xc4, 0x69, 0x52,
	0xb3, 0xc5, 0xec, 0x93, 0x89, 0xe8, 0xb0, 0x8b, 0x97, 0x82, 0x13, 0x4e, 0x20, 0x0e, 0x91, 0x9a,
	0x9d, 0x75, 0xeb, 0x64, 0x4f, 0x10, 0xf7, 0x15, 0x3c, 0xc9, 0x6d, 0xaa, 0x88, 0xfe, 0x2a, 0x8e,
	0x90, 0xdd, 0x3a, 0x49, 0xc8, 0xfe, 0x1a, 0xa6, 0x29, 0x59, 0x45, 0x82, 0xae, 0x9b, 0x8e, 0x8b,
	0x61, 0x44, 0xfb, 0x37, 0xf2, 0xfc, 0x7e, 0x37, 0xf1, 0x85, 0x91, 0xf8, 0x84, 0x70, 0x0b, 0xcf,
	0x58, 0x99, 0xea, 0x5f, 0xc3, 0xcd, 0x24, 0x06, 0x46, 0xcd, 0x6f, 0x63, 0xfd, 0x9b, 0x2a, 0xb4,
	0x24, 0x96, 0xa5, 0x17, 0xf1, 0x92, 0xbb, 0x7e, 0xa9, 0xb8, 0xeb, 0x82, 0xad, 0x4b, 0xf1, 0xd0,
	0x6a, 0x26, 0x0f, 0xad, 0x65, 0xf2, 0xd0, 0x7a, 0x36, 0x0f, 0x6d, 0x64, 0xf1, 0x50, 0x17, 0x07,
	0x03, 0x25, 0x44, 0xbc, 0xa9, 0x11, 0xb1, 0x38, 0xb5, 0x72, 0xb2, 0x13, 0xed, 0x5c, 0xc9, 0xf5,
	0x84, 0x5f, 0xc5, 0xf7, 0xdf, 0xc4, 0x19, 0xf3, 0x1a, 0x46, 0xd4, 0xc3, 0xa9, 0x1f, 0x22, 0x9e,
	0xea, 0x40, 0x79, 0xc7, 0xf1, 0x43, 0xc4, 0x4d, 0x57, 0xa0, 0xb5, 0xcf, 0x3c, 0x7a, 0x7e, 0xe0,
	0x33, 0x11, 0x41, 0x7d, 0x13, 0x8b, 0x9b, 0x5f, 0x04, 0x43, 0xfd, 0x76, 0x45, 0x41, 0x2e, 0xf7,
	0xaa, 0x39, 0xe3, 0xa6, 0x68, 0xc9, 0x62, 0x3b, 0x04, 0x72, 0x8d, 0x85, 0x83, 0x91, 0xb8, 0xac,
	0x85, 0x98, 0x2a, 0xae, 0xc2, 0xd7, 0xa8, 0xa3, 0x11, 0x6e, 0x12, 0x75, 0xb1, 0x82, 0xd1, 0x7d,
	0x48, 0x49, 0x2a, 0x52, 0x41, 0x67, 0xc2, 0x35, 0xcc, 0x84, 0x8a, 0xb2, 0xd6, 0x33, 0x19, 0x79,
	0x23, 0x87, 0xed, 0xbb, 0x79, 0x74, 0xa8, 0x5f, 0xf0, 0xfc, 0xdf, 0x55, 0xa8, 0x3f, 0x72, 0x66,
	0x7f, 0x2e, 0x55, 0xa6, 0xb9, 0x8f, 0x93, 0x4e, 0xd1, 0xd9, 0x02, 0xe6, 0x12, 0x29, 0xb5, 0x4c,
	0x67, 0x0e, 0xff, 0x98, 0x72, 0xe6, 0x70, 0x81, 0xc9, 0xa6, 0x61, 0x80, 0xe8, 0xae, 0x03, 0xe5,
	0xe7, 0x8e, 0x17, 0xa0, 0x53, 0xc8, 0x1a, 0xd4, 0x8e, 0xd8, 0xe4, 0x25, 0xff, 0xbc, 0x82, 0x8d,
	0xa1, 0xdf, 0xe9, 0x21, 0x72, 0x5b, 0x83, 0xda, 0x36, 0x25, 0xe1, 0xd6, 0x6c, 0x88, 0xac, 0xee,
	0x6b, 0x50, 0x93, 0x06, 0x4e, 0x8a, 0xc8, 0x4d, 0x46, 0xe6, 0x44, 0x90, 0x0d, 0x2c, 0x2c, 0x77,
	0x7c, 0x27, 0x74, 0x06, 0xc2, 0xd3, 0x94, 0x22, 0xbb, 0x6d, 0x1a, 0x84, 0x72, 0x9e, 0x9b, 0xd8,
	0x2f, 0xc6, 0x01, 0x62, 0x9a, 0x57, 0x70, 0xef, 0x5c, 0x42, 0xf3, 0x41, 0x5d, 0x35, 0x26, 0xe5,
	0x8c, 0x29, 0xff, 0x7c, 0x4d, 0x63, 0x2f, 0x4e, 0x96, 0x4a, 0x16, 0x73, 0xd0, 0xf5, 0xb4, 0xc5,
	0x3f, 0xe9, 0xfd, 0x06, 0x36, 0x41, 0x47, 0x40, 0x31, 0x82, 0x9b, 0x86, 0x4d, 0x73, 0xca, 0x92,
	0x7a, 0x46, 0xc4, 0x8b, 0x82, 0x89, 0x6a, 0xaf, 0x61, 0x1f, 0x81, 0x70, 0x49, 0x24, 0x15, 0xad,
	0x3c, 0x1f, 0x9d, 0x16, 0xfa, 0x62, 0xfd, 0x41, 0x15, 0x6a, 0x0f, 0xa6, 0xde, 0xe5, 0x26, 0x70,
	0xa9, 0x52, 0x7d, 0x61, 0x95, 0x2a, 0x8e, 0xf3, 0xd8, 0xc8, 0x8e, 0xf3, 0xe8, 0xe6, 0xc5, 0x79,
	0x6c, 0xe6, 0xc6, 0x79, 0x5c, 0xc9, 0x51, 0x70, 0x74, 0x85, 0x6a, 0x19, 0x4a, 0xbd, 0x49, 0x60,
	0xea, 0x53, 0xc2, 0x9b, 0x76, 0xdd, 0x88, 0x07, 0xa1, 0xc4, 0x16, 0xdf, 0x6f, 0x64, 0x87, 0x8f,
	0xdc, 0xcc, 0x09, 0x1f, 0xb9, 0x95, 0xb7, 0x61, 0x69, 0x8c, 0x66, 0xfd, 0xcb, 0x12, 0xd4, 0x77,
	0xc8, 0x78, 0x72, 0xc9, 0x32, 0xf3, 0x67, 0x44, 0xeb, 0x87, 0x64, 0x68, 0x18, 0x3d, 0x05, 0x77,
	0x90, 0x80, 0x2f, 0xbb, 0xc6, 0x33, 0xd6, 0xdf, 0x2d, 0x8b, 0xd4, 0x28, 0x97, 0xab, 0x38, 0x87,
	0xb6, 0x6b, 0xbe, 0x2e, 0x29, 0xe5, 0x77, 0x5d, 0x5e, 0xc4, 0xcd, 0x12, 0x7e, 0xca, 0xbc, 0xd1,
	0xc1, 0x38, 0xd8, 0x11, 0xc9, 0x65, 0x56, 0xb0, 0xc8, 0xd9, 0x1b, 0xf3, 0x63, 0x95, 0x68, 0xc4,
	0x50, 0x45, 0x76, 0x98, 0x17, 0x4c, 0xc7, 0x54, 0x57, 0x45, 0xac, 0xbf, 0x59, 0x81, 0x3a, 0x9f,
	0xd3, 0x25, 0x91, 0xcc, 0xdf, 0x11, 0x89, 0x37, 0x23, 0x0f, 0x42, 0x06, 0x95, 0x70, 0x40, 0x8a,
	0x4a, 0xa4, 0x9b, 0x9d, 0x0a, 0x61, 0x6e, 0x98, 0xcc, 0x0f, 0x9c, 0xc1, 0xa9, 0xf8, 0xbe, 0x82,
	0xd1, 0xf3, 0xd9, 0xd4, 0x19, 0x9c, 0xa2, 0x3d, 0x52, 0xaa, 0xc0, 0x83, 0x11, 0xda, 0x22, 0xbb,
	0x00, 0xbc, 0xe5, 0xfb, 0xcc, 0x75, 0xd9, 0x4b, 0x33, 0x48, 0xe4, 0x31, 0x25, 0xfe, 0xf1, 0xf9,
	0x7d, 0x1f, 0x2b, 0xac, 0x5c, 0xc7, 0x74, 0xc2, 0x6d, 0x32, 0x38, 0x45, 0x5b, 0xe5, 0x1a, 0xd4,
	0x3e, 0x9b, 0x12, 0xd7, 0x09, 0xcf, 0xd1, 0x46, 0x19, 0x85, 0xf1, 0x6d, 0x1d, 0xbb, 0xc8, 0xf4,
	0x60, 0xfd, 0xb8, 0x08, 0x0d, 0x61, 0x25, 0x98, 0x63, 0xf2, 0xcc, 0xbc, 0x12, 0xbc, 0x0a, 0x55,
	0x47, 0x0c, 0x1c, 0x51, 0xa4, 0x38, 0xaa, 0x0a, 0x03, 0x7f, 0x03, 0x77, 0xb9, 0x65, 0xdb, 0x4f,
	0xfc, 0x43, 0x79, 0x95, 0x1c, 0x30, 0x3b, 0xcb, 0x66, 0xc4, 0x6a, 0x1b, 0x11, 0x03, 0x12, 0x22,
	0x65, 0x40, 0x0b, 0x9b, 0x78, 0x92, 0x6d, 0x5d, 0x37, 0xde, 0xff, 0xb5, 0x22, 0xd4, 0xfa, 0x5e,
	0x30, 0x0f, 0xb8, 0xe4, 0x73, 0x1e, 0x84, 0xcc, 0xcf, 0xc6, 0xa7, 0x9c, 0x93, 0x91, 0x04, 0xa1,
	0xef, 0x05, 0xa9, 0x4b, 0x1a, 0x57, 0xa0, 0xb5, 0x35, 0x18, 0xd0, 0x49, 0xa8, 0xda, 0x69, 0xe0,
	0x6c, 0x14, 0x17, 0x71, 0xba, 0xf5, 0x0f, 0xea, 0xb0, 0xd4, 0xa7, 0x03, 0x81, 0x85, 0x90, 0xf8,
	0xe1, 0x2b, 0x5d, 0xbc, 0x79, 0x68, 0x51, 0x75, 0x32, 0xb1, 0xa2, 0xc6, 0x55, 0xce, 0xc4, 0x95,
	0x91, 0x14, 0x42, 0xa1, 0xa9, 0x8a, 0xbf, 0x72, 0x04, 0xaa, 0x4b, 0x2b, 0x59, 0x46, 0x0c, 0x3d,
	0x25, 0xc4, 0x75, 0x58, 0x94, 0xb2, 0xab, 0x1f, 0xdf, 0xe6, 0x6c, 0xe0, 0x3b, 0x30, 0x4f, 0x03,
	0xea, 0x0b, 0x31, 0x0a, 0xc6, 0x80, 0x9c, 0xc1, 0x53, 0xdf, 0x35, 0x93, 0x75, 0xf4, 0x67, 0xbe,
	0xc8, 0x5e, 0xc9, 0xc9, 0xec, 0x7d, 0x44, 0x62, 0x06, 0xf0, 0xae, 0x20, 0xb3, 0x1c, 0xe0, 0x3d,
	0x74, 0x19, 0x91, 0x1f, 0x0b, 0x67, 0xbe, 0xba, 0xee, 0xa0, 0xc2, 0x53, 0x8a, 0xa8, 0x62, 0x0c,
	0x7b, 0x1f, 0x85, 0xca, 0x19, 0xc0, 0xbb, 0x28, 0x56, 0xce, 0x00, 0xde, 0x33, 0x53, 0x81, 0x09,
	0x60, 0xea, 0x98, 0xb0, 0x09, 0x4d, 0x05, 0x48, 0xed, 0x96, 0x7c, 0x8b, 0x9e, 0xf9, 0xfb, 0x22,
	0x7f, 0xd1, 0x1a, 0x26, 0xb8, 0xfe, 0xcc, 0x7f, 0x4e, 0x49, 0x38, 0x12, 0x11, 0x1c, 0xeb, 0x46,
	0x20, 0xd1, 0x4c, 0x64, 0x88, 0x11, 0xe1, 0x10, 0x1b, 0x18, 0x99, 0xcf, 0x89, 0xa3, 0xad, 0x4b,
	0x17, 0x93, 0x16, 0x07, 0xee, 0x6a, 0x46, 0x59, 0x6d, 0xc9, 0xe2, 0xe1, 0x5d, 0x49, 0xf9, 0x04,
	0x1d, 0xdb, 0x0c, 0x92, 0x4b, 0x06, 0x76, 0x2d, 0xad, 0x57, 0x88, 0x51, 0x5d, 0xc7, 0xad, 0x73,
	0xc2, 0x15, 0xad, 0xdf, 0x30, 0x22, 0xfc, 0xa2, 0x43, 0xd8, 0x4d, 0xc3, 0x45, 0x39, 0x0d, 0x99,
	0x10, 0x2e, 0xe8, 0x20, 0xb1, 0x19, 0xa5, 0x6e, 0x90, 0x8c, 0xfb, 0x5a, 0xe6, 0xc1, 0xcd, 0xc2,
	0x98, 0x4f, 0x72, 0xea, 0xbc, 0x2f, 0x4e, 0xeb, 0x8d, 0x2c, 0xd0, 0x5d, 0x71, 0x45, 0x25, 0x13,
	0x74, 0x4f, 0xdc, 0x4f, 0xd1, 0x54, 0x01, 0xad, 0x41, 0x41, 0x59, 0x5f, 0x31, 0xc2, 0xc3, 0x92,
	0x46, 0x05, 0xf8, 0xcd, 0x3c, 0xf0, 0x3d, 0x01, 0xbe, 0xa3, 0x25, 0x48, 0xf9, 0x67, 0x35, 0x58,
	0x50, 0x92, 0x62, 0x37, 0x7d, 0xcb, 0xed, 0xff, 0x25, 0x39, 0xa1, 0x98, 0xa8, 0x89, 0xcf, 0xe0,
	0x31, 0x89, 0xb6, 0x0c, 0x35, 0x65, 0x46, 0x7d, 0xd1, 0x7a, 0x1b, 0x5f, 0x10, 0xe7, 0x94, 0xce,
	0x8b, 0x2f, 0x60, 0xda, 0xe2, 0xc7, 0x59, 0x49, 0x40, 0x8b, 0x86, 0x88, 0x0f, 0x02, 0x27, 0x08,
	0x03, 0x09, 0x33, 0xee, 0xb8, 0xf5, 0x7c, 0x36, 0x91, 0x00, 0xc3, 0x58, 0xdc, 0x17, 0x39, 0xf8,
	0x38, 0xa0, 0x83, 0x29, 0xf5, 0x90, 0x1e, 0x33, 0xdf, 0x4b, 0xab, 0xce, 0x9c, 0xba, 0x5d, 0x67,
	0x46, 0xb3, 0x34, 0xe7, 0x07, 0xcc, 0xb5, 0x1f, 0xd0, 0x30, 0x15, 0x3a, 0xeb, 0x90, 0x31, 0xf3,
	0x04, 0xc4, 0x30, 0x1b, 0xef, 0x9e, 0x4d, 0xf8, 0xd7, 0x8d, 0x0c, 0xa3, 0x9f, 0x87, 0x55, 0xa2,
	0x28, 0x34, 0x51, 0x12, 0x5f, 0x80, 0xf4, 0xa2, 0x35, 0xa8, 0xf1, 0xf2, 0xbb, 0x9e, 0x2d, 0xb8,
	0x3f, 0x7d, 0x35, 0xe5, 0x6a, 0x3e, 0x4f, 0x5d, 0xcb, 0xe7, 0xa9, 0xeb, 0xf9, 0x3c, 0x75, 0x03,
	0xdd, 0x35, 0x5d, 0xd5, 0x1a, 0x4c, 0x70, 0xa3, 0x8b, 0x04, 0x54, 0xe6, 0x6e, 0x52, 0xe6, 0x56,
	0x5e, 0x99, 0x7b, 0x49, 0x99, 0xd7, 0x8c, 0x70, 0xf1, 0xa4, 0x2f, 0x61, 0xd8, 0xb0, 0xf2, 0xc0,
	0x77, 0x05, 0xf8, 0x76, 0x1e, 0xf8, 0x9e, 0x00, 0xbf, 0xae, 0xed, 0xf4, 0x7f, 0x58, 0x80, 0x76,
	0x7f, 0x44, 0x7c, 0x7a, 0xb8, 0xbf, 0x2d, 0xb6, 0x24, 0x8d, 0xe3, 0x8c, 0xab, 0xaf, 0x91, 0x26,
	0x5e, 0x34, 0x75, 0x95, 0x01, 0x0d, 0x82, 0x23, 0x76, 0x4a, 0x3d, 0xc4, 0xb9, 0x2b, 0x50, 0xd9,
	0x1a, 0x98, 0x6a, 0xcf, 0x32, 0x94, 0x0e, 0x55, 0xae, 0xe3, 0x4a, 0xf2, 0x69, 0x3f, 0x18, 0x9a,
	0x6a, 0xce, 0x36, 0x3b, 0x53, 0x1c, 0x6b, 0xdc, 0x1a, 0xd7, 0xe3, 0x69, 0x7f, 0xa7, 0x00, 0xad,
	0x27, 0x2f, 0xbd, 0x07, 0x8c, 0xd9, 0x81, 0x91, 0x3e, 0x2d, 0x95, 0x15, 0xae, 0x88, 0xed, 0x46,
	0xd3, 0x80, 0xda, 0x46, 0x6e, 0xe6, 0x52, 0x60, 0x44, 0x03, 0x77, 0x01, 0x26, 0x3e, 0x3d, 0xa1,
	0x3e, 0xf5, 0x06, 0xd4, 0x54, 0x77, 0xa3, 0xe4, 0x0f, 0xd5, 0x84, 0x7f, 0xad, 0x0f, 0xb4, 0xe1,
	0x78, 0x27, 0xac, 0xf3, 0x3a, 0x4a, 0xad, 0xa1, 0xc5, 0x0c, 0xea, 0x83, 0xb6, 0x3e, 0x86, 0xd6,
	0x3e, 0x1d, 0x3f, 0x63, 0x8e, 0x4a, 0x42, 0xb1, 0x0e, 0x75, 0x95, 0x73, 0x50, 0x4e, 0x45, 0x43,
	0xd4, 0x53, 0x23, 0x8b, 0xd7, 0xa7, 0xd0, 0xe6, 0x8b, 0x9b, 0xd4, 0xfd, 0x2a, 0x34, 0x93, 0x7c,
	0x85, 0x41, 0xba, 0x63, 0xbd, 0x23, 0xeb, 0x7f, 0x14, 0xa2, 0x70, 0xe4, 0x7d, 0x3a, 0xfe, 0x32,
	0xc9, 0x24, 0xd5, 0x2d, 0xea, 0x12, 0xa6, 0x8f, 0x28, 0x6b, 0x69, 0x39, 0x3f, 0x77, 0xab, 0x99,
	0xe5, 0x56, 0x84, 0x4e, 0x1a, 0x29, 0xa4, 0xf5, 0xec, 0xb7, 0x35, 0x6c, 0xb2, 0x1f, 0x92, 0x71,
	0x92, 0xec, 0xab, 0xf4, 0x67, 0x4b, 0x27, 0x69, 0xdd, 0x03, 0x90, 0x93, 0x16, 0x33, 0x7e, 0x03,
	0x2d, 0x91, 0x16, 0x88, 0x8e, 0x10, 0x63, 0x7d, 0x02, 0x1b, 0x28, 0x9f, 0x34, 0xd7, 0x17, 0xcc,
	0x9c, 0xd2, 0xa5, 0x9c, 0xd4, 0xca, 0xd7, 0xa0, 0xd5, 0x0f, 0x7d, 0xe2, 0x0d, 0xa9, 0x8c, 0x0b,
	0x6d, 0x69, 0x5d, 0x96, 0xad, 0xbf, 0x55, 0x82, 0xc5, 0x43, 0xba, 0xc3, 0x3c, 0x8f, 0x86, 0x0e,
	0xbb, 0xb4, 0xc4, 0xcf, 0x99, 0xad, 0xc1, 0xf2, 0xa1, 0xc9, 0xf7, 0x51, 0x2e, 0x8f, 0x54, 0xe2,
	0x9a, 0x8c, 0xcc, 0x97, 0x6b, 0x50, 0x3b, 0x21, 0xa7, 0xf4, 0x98, 0x9d, 0x7d, 0xa9, 0x4c, 0x8d,
	0x2a, 0x83, 0xd0, 0xc4, 0x19, 0x9c, 0xea, 0x19, 0x84, 0xac, 0xbb, 0x71, 0x9f, 0x82, 0x60, 0x6e,
	0xa3, 0x94, 0x1c, 0x5a, 0x94, 0xb5, 0x36, 0x30, 0xeb, 0x8f, 0x4a, 0x52, 0x93, 0xfd, 0xf3, 0x66,
	0x0d, 0xe8, 0x02, 0xec, 0x09, 0x59, 0x98, 0x3a, 0xc0, 0x8a, 0x30, 0x56, 0x21, 0x25, 0x6d, 0x33,
	0x4b, 0x8c, 0xd4, 0x50, 0x0c, 0x6b, 0xc0, 0xd6, 0x49, 0x18, 0x69, 0xd9, 0xcd, 0x4c, 0xc3, 0x82,
	0x71, 0x01, 0xae, 0x3f, 0x3d, 0x56, 0x80, 0xb6, 0x61, 0x50, 0x94, 0xd6, 0x89, 0x05, 0x63, 0x94,
	0x89, 0xb1, 0x61, 0x31, 0xdf, 0x42, 0xb1, 0x84, 0xd5, 0x17, 0xf9, 0x55, 0x75, 0x63, 0xa4, 0x67,
	0x7e, 0x44, 0x4f, 0xc2, 0xe8, 0x52, 0x64, 0x47, 0xbf, 0xf9, 0x58, 0x80, 0xfa, 0x3e, 0xb3, 0x69,
	0x9c, 0x28, 0x89, 0xd9, 0x66, 0x00, 0x77, 0x07, 0xca, 0x01, 0x73, 0x19, 0xca, 0x48, 0xbe, 0x0c,
	0x25, 0x7b, 0xca, 0xc4, 0xc2, 0x69, 0x99, 0xa8, 0xc4, 0x5d, 0x1b, 0x94, 0x9e, 0x6a, 0x13, 0x9a,
	0x81, 0x18, 0x8f, 0xd0, 0x70, 0xcd, 0xdc, 0x3e, 0x12, 0xc4, 0xb5, 0x2a, 0x63, 0xe5, 0x26, 0xbe,
	0x33, 0x40, 0x37, 0x40, 0xac, 0x0f, 0x60, 0x31, 0xb6, 0xa5, 0x28, 0x59, 0xf8, 0x1a, 0x54, 0x1c,
	0x6d, 0xe3, 0xd1, 0x53, 0x36, 0xa9, 0x09, 0x59, 0x8f, 0xa0, 0xbd, 0x35, 0x08, 0x9d, 0x99, 0x13,
	0x9e, 0xcb, 0x7c, 0x1b, 0xf2, 0x26, 0x92, 0xb1, 0x67, 0xa7, 0x33, 0xf5, 0x8a, 0x65, 0xb4, 0x7b,
	0x0c, 0xbd, 0xa8, 0x60, 0xb1, 0xa4, 0x35, 0xb9, 0xe5, 0xbe, 0x6b, 0x34, 0x9f, 0x16, 0xec, 0xb8,
	0xf7, 0x77, 0xa1, 0x1d, 0x25, 0xb3, 0x8f, 0xfa, 0xbc, 0xa8, 0xbc, 0xf5, 0x81, 0xb8, 0xa1, 0x4f,
	0x5c, 0xf1, 0xf2, 0x42, 0xb6, 0xca, 0x91, 0x11, 0x5d, 0xff, 0x75, 0xad, 0x96, 0x60, 0xe9, 0x37,
	0x10, 0x4b, 0x6f, 0xe8, 0x1b, 0xb4, 0xd6, 0xb8, 0xf5, 0x7d, 0xa8, 0x8b, 0x7b, 0xf5, 0x2a, 0x55,
	0x62, 0x86, 0xe4, 0x79, 0xd5, 0x05, 0x81, 0xab, 0xd0, 0xb6, 0x9d, 0x80, 0x4c, 0x26, 0x94, 0xf8,
	0x66, 0x06, 0x33, 0xeb, 0x3d, 0x75, 0x6d, 0xdf, 0x67, 0x93, 0x28, 0x15, 0x98, 0x36, 0x2a, 0x6d,
	0xf5, 0xa2, 0x52, 0xd6, 0x7f, 0x2b, 0xc1, 0x02, 0xe7, 0x49, 0x79, 0x23, 0xeb, 0x72, 0xb3, 0x9a,
	0x33, 0xc3, 0x38, 0x8e, 0x52, 0x5d, 0x32, 0x03, 0x34, 0x5d, 0x2a, 0x5c, 0xa0, 0x28, 0xe5, 0xc9,
	0x26, 0x34, 0xb7, 0x7d, 0xe6, 0xba, 0xe7, 0x12, 0xa4, 0xdf, 0x63, 0xfa, 0x18, 0xda, 0x52, 0x32,
	0x3b, 0x63, 0xca, 0x85, 0x55, 0x06, 0xad, 0xaf, 0x43, 0x3d, 0x54, 0x50, 0x3d, 0x3b, 0x9a, 0xf5,
	0x4d, 0x58, 0x41, 0x55, 0x95, 0x7c, 0xf8, 0x0a, 0x96, 0x0f, 0x1a, 0xdd, 0xa3, 0xd2, 0xd6, 0x09,
	0x34, 0x1f, 0xd3, 0x97, 0xdf, 0xa5, 0xc4, 0xe7, 0xdf, 0x39, 0x47, 0x7d, 0x87, 0x9e, 0x9b, 0x4c,
	0x16, 0x5d, 0x8d, 0xab, 0x68, 0x21, 0x22, 0xc4, 0x1f, 0x52, 0x19, 0xa5, 0x67, 0x64, 0xb8, 0x96,
	0x10, 0xe3, 0xbe, 0x9f, 0x45, 0xe2, 0x7e, 0x94, 0x32, 0x58, 0xe5, 0xfd, 0x09, 0x3a, 0x36, 0xb6,
	0x5a, 0x7d, 0x38, 0xfc, 0x58, 0x4f, 0x07, 0x69, 0x11, 0xb5, 0x02, 0x95, 0x3d, 0x91, 0x7a, 0x57,
	0x97, 0x50, 0x3f, 0x2f, 0xc1, 0xe2, 0xd6, 0x60, 0xe4, 0xd0, 0x19, 0x1d, 0x53, 0xef, 0xf2, 0xee,
	0xc5, 0xbc, 0xb1, 0xcc, 0x55, 0xbe, 0x61, 0xc4, 0xcb, 0x63, 0x38, 0x8f, 0x6f, 0xc0, 0x92, 0x06,
	0x94, 0xb3, 0x5c, 0x36, 0x92, 0xfb, 0x24, 0xf0, 0xdd, 0xb3, 0x09, 0xda, 0xc8, 0xff, 0x4a, 0x19,
	0x5a, 0x7b, 0x2a, 0xd9, 0xf3, 0xe5, 0xba, 0xcf, 0x5f, 0xb8, 0xc0, 0x23, 0x36, 0xcc, 0x0a, 0xb2,
	0x8c, 0x96, 0x0c, 0x87, 0x0c, 0x08, 0xc4, 0x2a, 0x08, 0x9f, 0x54, 0x27, 0x1b, 0xf4, 0x34, 0x40,
	0x9e, 0x44, 0x6b, 0x1b, 0x9a, 0x1a, 0x85, 0x64, 0x48, 0xd0, 0x76, 0x94, 0x96, 0x50, 0xa6, 0xe8,
	0xef, 0x40, 0xf9, 0xc4, 0x25, 0x43, 0x24, 0x42, 0x3e, 0x86, 0x8e, 0xd6, 0xc6, 0x81, 0xcf, 0x06,
	0x34, 0x08, 0x2e, 0x56, 0x3c, 0x22, 0xf3, 0xec, 0x3f, 0x2c, 0x44, 0x14, 0x2a, 0xa8, 0x9b, 0x0b,
	0xb9, 0x38, 0xa3, 0x9b, 0x51, 0x95, 0x9e, 0xe1, 0x34, 0xf3, 0xb7, 0xd5, 0x31, 0x35, 0x95, 0xdd,
	0x5b, 0x9f, 0xcf, 0x02, 0x54, 0x7d, 0xfa, 0x92, 0xf8, 0xb6, 0x7a, 0xce, 0xaa, 0xa5, 0x2c, 0x2b,
	0x15, 0xf1, 0xeb, 0x1d, 0xa8, 0x4d, 0xe4, 0x68, 0xbb, 0x55, 0xd1, 0xca, 0xb5, 0xcc, 0x56, 0xd4,
	0x8c, 0x44, 0xb2, 0x6d, 0x85, 0xc6, 0x6c, 0x4b, 0x8e, 0x7c, 0x51, 0xcb, 0xb0, 0xe4, 0xa4, 0xd0,
	0xb5, 0x93, 0x70, 0x5d, 0x94, 0x46, 0x54, 0xbc, 0xee, 0x90, 0xd2, 0x6a, 0xe2, 0xce, 0x96, 0x93,
	0xd7, 0x91, 0x92, 0xfb, 0x90, 0x8d, 0x2d, 0x3e, 0xaf, 0x2f, 0xae, 0xe3, 0x3d, 0x84, 0x56, 0x5f,
	0x28, 0xcf, 0xa2, 0x5e, 0x20, 0x1e, 0x5b, 0x90, 0x7a, 0xbf, 0x6e, 0xc4, 0xb1, 0xa2, 0x7b, 0x95,
	0x52, 0xcf, 0x5c, 0xd1, 0x10, 0x12, 0x75, 0x67, 0x3d, 0x02, 0x78, 0x2e, 0xb6, 0x24, 0xce, 0xf7,
	0x7c, 0xde, 0x27, 0x8e, 0x1f, 0x84, 0x66, 0x86, 0x6c, 0xf9, 0xaa, 0x8e, 0xb9, 0x01, 0x85, 0x23,
	0xc7, 0x47, 0x86, 0x2d, 0xeb, 0x5f, 0x97, 0x60, 0x21, 0x69, 0xee, 0x52, 0x0e, 0xcd, 0x9f, 0xca,
	0xc6, 0x4f, 0x18, 0xcc, 0x4b, 0x89, 0xa2, 0x35, 0xa8, 0xed, 0xbe, 0x98, 0x3a, 0x13, 0x23, 0x74,
	0x69, 0x1b, 0x16, 0x76, 0x5d, 0x27, 0x54, 0x8f, 0xa1, 0x1c, 0xb0, 0xe0, 0xcb, 0x5f, 0x1b, 0xb6,
	0xbe, 0x09, 0x1d, 0xdc, 0x86, 0x4a, 0xd3, 0x88, 0xee, 0xfc, 0x6a, 0xd7, 0xb4, 0x71, 0x61, 0xeb,
	0x5b, 0x00, 0xca, 0xf4, 0xf0, 0x67, 0xeb, 0xfe, 0x43, 0x58, 0x48, 0xea, 0x2b, 0x13, 0x07, 0xea,
	0x7a, 0x35, 0x65, 0xe3, 0xe0, 0xdd, 0x1e, 0xc2, 0xe2, 0x91, 0x4f, 0x49, 0x30, 0xf5, 0x69, 0x64,
	0x8e, 0x49, 0xf7, 0xbd, 0x0e, 0xf5, 0x01, 0x73, 0x24, 0x36, 0x8d, 0x24, 0xce, 0xfc, 0xbb, 0x91,
	0xe0, 0xc5, 0xfa, 0x04, 0xb5, 0x19, 0x67, 0xab, 0x4c, 0xe4, 0x85, 0x96, 0xad, 0xd2, 0xe8, 0xdc,
	0xfa, 0xdd, 0x32, 0xaa, 0x7c, 0xc9, 0x5a, 0x73, 0xc6, 0x5a, 0xb1, 0x1b, 0x61, 0x29, 0x7d, 0xd7,
	0xf6, 0xb1, 0xf1, 0x5c, 0x16, 0x36, 0xf0, 0x74, 0x32, 0x0d, 0x42, 0x2b, 0x99, 0x71, 0x67, 0xab,
	0x58, 0xd6, 0x2e, 0xed, 0x3b, 0xae, 0x13, 0x12, 0xff, 0xfc, 0x90, 0x78, 0xa7, 0x97, 0x24, 0x31,
	0x67, 0x24, 0xb1, 0x0c, 0x25, 0xae, 0xa5, 0x1b, 0x56, 0x3a, 0x7d, 0xc9, 0xf4, 0xc3, 0xb1, 0x75,
	0x02, 0x75, 0x11, 0x3c, 0xaa, 0x52, 0x29, 0x84, 0xfc, 0x6f, 0xac, 0x08, 0x6c, 0x42, 0xf3, 0xc4,
	0xf1, 0x9c, 0x60, 0x44, 0x6d, 0x33, 0x55, 0xcb, 0x2a, 0x54, 0x89, 0x50, 0x05, 0xcc, 0xb7, 0x8b,
	0x52, 0xaf, 0xf3, 0x58, 0xc7, 0xfc, 0xe8, 0x1a, 0x9c, 0x3e, 0x9d, 0xd8, 0x24, 0xa4, 0xe2, 0x50,
	0x4d, 0x82, 0x53, 0xb1, 0x32, 0x86, 0x0f, 0x6e, 0xe8, 0xb3, 0xe9, 0xc4, 0x48, 0x4e, 0xf1, 0x06,
	0x34, 0x42, 0x35, 0xc8, 0x28, 0x3d, 0x85, 0xee, 0x86, 0x50, 0x20, 0xeb, 0x53, 0x7e, 0x0e, 0x0d,
	0x9d, 0x19, 0x95, 0xfa, 0xc9, 0x36, 0x3b, 0x93, 0x69, 0xa1, 0xcf, 0xf6, 0x52, 0x8f, 0x6f, 0xa8,
	0x61, 0xeb, 0xda, 0x8d, 0xca, 0xc4, 0xc3, 0x5b, 0xeb, 0xd1, 0x90, 0x38, 0xae, 0xb0, 0x2c, 0x91,
	0x73, 0xd9, 0xa4, 0xc7, 0x55, 0x3c, 0xbd, 0x91, 0xb7, 0xa1, 0x66, 0x93, 0xf3, 0x6d, 0x76, 0x16,
	0x29, 0x3a, 0x9b, 0x86, 0x41, 0x4d, 0x1b, 0xc5, 0x35, 0x58, 0x78, 0x49, 0xe9, 0xa9, 0xd6, 0x92,
	0x8e, 0xaf, 0xaf, 0x42, 0x9d, 0x43, 0x45, 0x53, 0xe5, 0x57, 0x35, 0xf5, 0x26, 0x34, 0x6d, 0x39,
	0x48, 0x11, 0xd0, 0x51, 0xc9, 0x45, 0xc6, 0xbf, 0x2f, 0x41, 0x53, 0x4d, 0xe7, 0x92, 0x47, 0xe7,
	0x4f, 0x23, 0x8a, 0xd6, 0x29, 0x7d, 0x1c, 0x8f, 0x20, 0xf7, 0x15, 0xd3, 0x21, 0xd5, 0xe8, 0x3f,
	0x96, 0xf8, 0x69, 0x27, 0x22, 0xa3, 0xcb, 0x85, 0x9d, 0x3f, 0x53, 0x4b, 0x0f, 0x49, 0x8c, 0x25,
	0x6c, 0x4a, 0x79, 0x8e, 0xa5, 0x80, 0xb1, 0xb2, 0x8b, 0x3b, 0x6c, 0xec, 0x13, 0x9b, 0x5e, 0xf2,
	0xec, 0x2f, 0x15, 0xcf, 0x1e, 0x44, 0xa9, 0x9a, 0xb3, 0x8f, 0x12, 0xcb, 0x50, 0x0a, 0xcf, 0xbf,
	0xd4, 0xfb, 0x77, 0xd6, 0x47, 0xd0, 0x8e, 0x5b, 0x54, 0x09, 0xfb, 0x1b, 0x93, 0xe8, 0x83, 0xd2,
	0xea, 0x57, 0xd0, 0xbb, 0x06, 0x12, 0x64, 0x7d, 0x08, 0x20, 0xe3, 0xb8, 0x63, 0x4f, 0xaf, 0x30,
	0x1a, 0x1b, 0xe3, 0x69, 0x9c, 0x88, 0x32, 0xf1, 0xab, 0x8a, 0xd6, 0x3d, 0x68, 0xc9, 0x6a, 0x6a,
	0x63, 0xbc, 0x8d, 0x8d, 0xdc, 0x7a, 0xf6, 0xfe, 0xb8, 0x75, 0xeb, 0x25, 0x74, 0xfa, 0x23, 0xea,
	0xba, 0xbb, 0xf2, 0x8d, 0xb2, 0xe4, 0xa5, 0x47, 0x3e, 0xdb, 0x42, 0xea, 0x89, 0x5b, 0x16, 0xbd,
	0x53, 0x9a, 0x7e, 0xd1, 0xb8, 0x94, 0xf9, 0xa6, 0x69, 0x5e, 0x46, 0x2f, 0xeb, 0x6e, 0x64, 0xd8,
	0xc0, 0xc7, 0xa7, 0x8b, 0xe2, 0x65, 0xac, 0xdf, 0x2e, 0xc0, 0xf2, 0x13, 0xd7, 0xde, 0xf6, 0x1d,
	0x6f, 0xf8, 0x98, 0x46, 0xf3, 0xcc, 0x18, 0xec, 0x92, 0x78, 0x08, 0x73, 0x30, 0x4a, 0x9e, 0x9c,
	0x5c, 0x80, 0xea, 0x64, 0x3a, 0x71, 0x5c, 0xa9, 0x99, 0x94, 0x91, 0xc3, 0xa0, 0x8c, 0xac, 0x4d,
	0x91, 0xd6, 0x51, 0xc9, 0x36, 0x8c, 0x70, 0xa4, 0x7d, 0x1b, 0x96, 0x35, 0x21, 0xa0, 0x86, 0xf1,
	0x55, 0x58, 0x1c, 0x24, 0x1f, 0xb3, 0xb3, 0x6d, 0xc5, 0xfb, 0xbe, 0x0d, 0xcd, 0x67, 0x32, 0x58,
	0x24, 0xef, 0xc1, 0x0a, 0x15, 0x66, 0x54, 0xcc, 0x09, 0xfa, 0x2b, 0x61, 0x56, 0x4f, 0x72, 0x92,
	0xea, 0xea, 0x9c, 0x03, 0xcb, 0xaa, 0x97, 0x43, 0x3a, 0x20, 0xae, 0x7c, 0x24, 0xe7, 0xed, 0xb8,
	0x6b, 0x6d, 0x8c, 0x28, 0x65, 0x5a, 0x32, 0xae, 0x4c, 0x0f, 0x68, 0xa6, 0x7b, 0xe1, 0x01, 0xac,
	0xa0, 0xae, 0x0e, 0x85, 0x35, 0x4e, 0xba, 0x9e, 0xf9, 0xef, 0xfe, 0x34, 0x30, 0x73, 0x0b, 0xae,
	0x72, 0x98, 0xc0, 0xa9, 0x1d, 0x3f, 0x32, 0xd1, 0xb6, 0x3e, 0x12, 0x46, 0xa7, 0x09, 0xf3, 0xa2,
	0x18, 0x24, 0xf9, 0x9c, 0xf7, 0x9e, 0x69, 0xf7, 0x6a, 0x10, 0xdb, 0x16, 0xa9, 0xea, 0x02, 0x55,
	0xf1, 0x43, 0x68, 0x45, 0x15, 0x85, 0xbd, 0xea, 0x0d, 0xa8, 0xc9, 0xaa, 0x19, 0x0c, 0x90, 0xf4,
	0x60, 0xdd, 0xe5, 0x38, 0x12, 0xc9, 0xdf, 0xee, 0x4f, 0xe3, 0x97, 0x4e, 0xd3, 0xfc, 0xdf, 0x8c,
	0xde, 0x4d, 0xe1, 0x9c, 0xb6, 0x0d, 0x0b, 0x07, 0x71, 0x40, 0x56, 0x44, 0xc0, 0x7b, 0x29, 0x7b,
	0xaa, 0x74, 0x6c, 0xf3, 0x2a, 0xf5, 0xce, 0x22, 0xd4, 0x0e, 0x7c, 0xaa, 0x3c, 0x42, 0x7c, 0xb8,
	0xdf, 0xd0, 0xdb, 0x88, 0xdf, 0xf3, 0x48, 0xce, 0xfb, 0x9a, 0xd5, 0x03, 0xf7, 0x65, 0xfd, 0xb8,
	0xa4, 0x57, 0xbd, 0xdc, 0x82, 0xe6, 0x30, 0xeb, 0x59, 0x74, 0x43, 0xcc, 0x38, 0xf0, 0x47, 0x14,
	0xa0, 0xef, 0x3b, 0xff, 0xa5, 0x00, 0x4b, 0x7c, 0x19, 0x54, 0x6e, 0x51, 0x29, 0x4b, 0xd2, 0xf4,
	0x17, 0x5b, 0xcb, 0x8b, 0x78, 0xb7, 0x0b, 0x92, 0xa4, 0xb5, 0x86, 0xa7, 0xd1, 0x9e, 0xea, 0xcf,
	0xd8, 0x68, 0xab, 0x18, 0x68, 0x09, 0x94, 0x8d, 0x55, 0x94, 0x4f, 0x16, 0x05, 0x28, 0x0e, 0xae,
	0x03, 0x65, 0x71, 0x8b, 0xde, 0xb8, 0xea, 0x11, 0x8a, 0xb4, 0xa0, 0xe8, 0x9d, 0x77, 0x2e, 0xb3,
	0x4e, 0x6d, 0xa2, 0x27, 0x03, 0xb6, 0xbe, 0x01, 0xcd, 0x1d, 0xe6, 0x85, 0x34, 0x08, 0xe3, 0xcd,
	0x8c, 0x92, 0x71, 0x3a, 0xd0, 0xe2, 0x98, 0x4d, 0xbd, 0x00, 0xc5, 0x14, 0x3e, 0x84, 0x95, 0x9d,
	0x11, 0x19, 0x4f, 0x1c, 0xe6, 0xe9, 0x2d, 0xdc, 0x46, 0x56, 0x31, 0xf4, 0xd8, 0x67, 0x52, 0xa8,
	0x05, 0x65, 0xde, 0x8d, 0x92, 0x0c, 0x1f, 0x40, 0xfd, 0x89, 0xad, 0x42, 0x21, 0xb3, 0x07, 0xd0,
	0x81, 0x32, 0xb3, 0xd5, 0x49, 0xb3, 0x18, 0x87, 0x95, 0x2c, 0x45, 0xfd, 0xc7, 0xb5, 0x73, 0x4d,
	0xf8, 0x51, 0x09, 0xeb, 0x31, 0xb4, 0xd5, 0x40, 0x54, 0xfa, 0xda, 0xdc, 0x19, 0x47, 0xde, 0x96,
	0x24, 0x82, 0x30, 0x1a, 0x85, 0x96, 0x4e, 0xd5, 0xfa, 0x36, 0xac, 0x19, 0x58, 0x50, 0xed, 0xbe,
	0x09, 0x55, 0x5f, 0xfc, 0x95, 0xf6, 0x61, 0xa3, 0x82, 0xd6, 0x0f, 0x0b, 0xd0, 0x7e, 0xce, 0x7c,
	0xd7, 0xde, 0x99, 0x4e, 0x44, 0x9c, 0x8c, 0x78, 0x6b, 0x9b, 0xff, 0x61, 0x8c, 0x69, 0x51, 0x3d,
	0x67, 0xa3, 0x44, 0x71, 0x99, 0x63, 0x51, 0x8d, 0xa7, 0x74, 0xa7, 0x18, 0xe3, 0x94, 0x1f, 0x7e,
	0x1b, 0xc2, 0x5d, 0x24, 0xae, 0xf7, 0x4b, 0x0f, 0xcb, 0x2a, 0x54, 0x9d, 0xa0, 0xc7, 0x3c, 0x6a,
	0x86, 0x50, 0x3a, 0x81, 0x94, 0xf1, 0x88, 0x7c, 0x3a, 0x00, 0xa2, 0xf2, 0x7d, 0xc7, 0x23, 0xae,
	0x78, 0x63, 0xae, 0x6d, 0x7d, 0x02, 0xcb, 0x68, 0x94, 0x51, 0x54, 0xa4, 0x86, 0x6f, 0x6d, 0x8a,
	0xa8, 0xa8, 0xf5, 0x12, 0x56, 0xd0, 0x07, 0x85, 0xa2, 0x9c, 0x79, 0x76, 0xa0, 0x7c, 0xea, 0xa4,
	0x3d, 0x16, 0x72, 0x3d, 0x4a, 0x19, 0xeb, 0xa1, 0x27, 0xb1, 0x8d, 0xb0, 0x50, 0x11, 0xef, 0x6e,
	0xdd, 0x87, 0x8d, 0x8c, 0x8e, 0x55, 0x04, 0xac, 0x3e, 0xf4, 0xeb, 0x39, 0x43, 0x57, 0x6b, 0xf4,
	0x10, 0x5a, 0xf7, 0x69, 0x10, 0x3a, 0x33, 0xe2, 0xe6, 0x6c, 0x27, 0x5a, 0x9c, 0x41, 0x2a, 0x3c,
	0x49, 0xdf, 0x87, 0x1f, 0x25, 0x2d, 0x89, 0x4d, 0x65, 0x1d, 0xea, 0x5b, 0x83, 0x30, 0x0a, 0x41,
	0x4a, 0x2a, 0xbf, 0xae, 0x36, 0x9b, 0xa2, 0x19, 0x99, 0xab, 0x8f, 0xc3, 0xfa, 0x3e, 0xb4, 0xa2,
	0xa8, 0xa4, 0x9c, 0x71, 0x35, 0xa3, 0x71, 0x71, 0x2a, 0xc8, 0x1a, 0x11, 0x97, 0x38, 0x51, 0x1b,
	0x66, 0xd8, 0xc3, 0x5f, 0x4c, 0x9a, 0x17, 0x83, 0x4d, 0x37, 0xaf, 0x0f, 0xbf, 0x98, 0x31, 0xfc,
	0x54, 0x16, 0x54, 0x7d, 0xb8, 0xd6, 0xc7, 0xb0, 0x1c, 0xfd, 0x16, 0xf1, 0xfb, 0x2a, 0x1d, 0x6a,
	0xf9, 0x51, 0x66, 0x30, 0xb4, 0x3e, 0x14, 0xeb, 0x8f, 0x4a, 0x09, 0x22, 0x2f, 0xb7, 0xd8, 0x39,
	0xdb, 0x62, 0x93, 0xbb, 0xf4, 0x4b, 0x66, 0x3a, 0x21, 0xa9, 0xbb, 0xeb, 0xb6, 0xd3, 0xff, 0x55,
	0x4a, 0xa8, 0xec, 0x72, 0x25, 0xe7, 0xcf, 0x35, 0x22, 0x2f, 0x67, 0x18, 0xb1, 0x0f, 0x31, 0x1b,
	0xa7, 0x62, 0x1f, 0x74, 0x59, 0xd2, 0xc9, 0x5e, 0xfd, 0x15, 0x6d, 0xf5, 0x3f, 0x82, 0x85, 0x6d,
	0x7e, 0xfc, 0x08, 0x89, 0xaf, 0x8e, 0x24, 0x5f, 0x2c, 0xce, 0xd3, 0xfa, 0xfd, 0x02, 0xb4, 0xa2,
	0x9a, 0x39, 0xb2, 0x2f, 0x4f, 0x38, 0xad, 0x43, 0xfd, 0x20, 0xca, 0xa3, 0x6d, 0x5c, 0xed, 0xe8,
	0x1b, 0xf7, 0x12, 0xde, 0x81, 0xa6, 0x1c, 0x96, 0x6c, 0xa5, 0x62, 0xaa, 0xfe, 0x78, 0xec, 0xd6,
	0xcf, 0x4b, 0xc9, 0xa0, 0x2e, 0x69, 0x79, 0xfe, 0x14, 0xff, 0x78, 0xd9, 0x97, 0xd2, 0xcb, 0xbe,
	0x6c, 0x26, 0x99, 0x17, 0xc4, 0x6a, 0x24, 0x8c, 0x10, 0x19, 0xfe, 0x04, 0x80, 0x4f, 0x53, 0x0f,
	0xe0, 0xf9, 0xeb, 0x65, 0x58, 0xde, 0x19, 0x51, 0x12, 0x52, 0xff, 0x90, 0x4e, 0x98, 0x7f, 0x19,
	0xc1, 0x37, 0x6f, 0xeb, 0x2f, 0x6c, 0x1d, 0x7c, 0x65, 0x14, 0x46, 0x96, 0xcc, 0x57, 0xba, 0x39,
	0x4c, 0xa0, 0x64, 0x19, 0xb7, 0x28, 0x21, 0xfc, 0x64, 0x68, 0x50, 0xc3, 0x55, 0x68, 0x27, 0xb0,
	0xbe, 0x22, 0x88, 0x48, 0xb2, 0xfd, 0x71, 0x09, 0x56, 0x23, 0x5d, 0x32, 0x3a, 0x22, 0x5c, 0xd2,
	0xc4, 0x1c, 0x6a, 0x2a, 0xf2, 0x1a, 0xe8, 0x12, 0x3e, 0x81, 0xf0, 0x03, 0x23, 0x52, 0x53, 0x7e,
	0x52, 0x32, 0x0e, 0x40, 0x97, 0x6b, 0x39, 0x7f, 0x91, 0x9a, 0xfb, 0xea, 0x38, 0xf9, 0x8a, 0xc5,
	0x94, 0x09, 0xc1, 0x3c, 0x1b, 0x45, 0xe1, 0xbe, 0x2f, 0x7d, 0xf8, 0xea, 0xda, 0x85, 0xe6, 0x2a,
	0xcf, 0xb7, 0x12, 0x7f, 0x4d, 0xd9, 0xc8, 0xd5, 0xa3, 0xbd, 0xc8, 0x9c, 0x9f, 0x69, 0x98, 0xfe,
	0x9e, 0x74, 0x7f, 0x28, 0x2b, 0x52, 0x74, 0x65, 0xd2, 0xf0, 0xdd, 0xbf, 0x1c, 0x91, 0xb0, 0x47,
	0xce, 0x91, 0xca, 0xf2, 0x1a, 0x54, 0x5c, 0x27, 0x08, 0x73, 0xfc, 0xf6, 0xe2, 0x44, 0xf4, 0xf7,
	0x0b, 0xb0, 0xdc, 0x9f, 0xd0, 0x81, 0x43, 0x5c, 0xad, 0x8f, 0xd7, 0xa1, 0x6a, 0x8b, 0xbf, 0xd4,
	0x53, 0x16, 0xab, 0xb8, 0xa6, 0x2a, 0xb5, 0x0a, 0x55, 0xea, 0x89, 0x87, 0xb3, 0x8b, 0xf8, 0xa5,
	0xf8, 0x31, 0xb5, 0x89, 0x8b, 0x1d, 0xed, 0x89, 0x05, 0x5e, 0xfa, 0x0e, 0xcc, 0x89, 0x0a, 0x64,
	0x5c, 0x81, 0x96, 0x4f, 0x27, 0x2e, 0x19, 0x88, 0xc0, 0xcd, 0x40, 0x27, 0x5a, 0xeb, 0x2f, 0x97,
	0x25, 0xa6, 0x2f, 0x19, 0x68, 0xfe, 0x14, 0xa4, 0xa3, 0x28, 0x9e, 0x64, 0x09, 0xfb, 0x35, 0xf8,
	0xf7, 0x54, 0xb6, 0x24, 0xec, 0xcc, 0xeb, 0xbc, 0xc2, 0x99, 0xa7, 0x2b, 0x4b, 0x3f, 0x2c, 0x00,
	0xec, 0x8c, 0xb8, 0xae, 0xf4, 0x7f, 0x79, 0x9d, 0x38, 0x79, 0x1f, 0xbe, 0x9c, 0xf5, 0x3e, 0xbc,
	0xf1, 0x6c, 0x80, 0xf6, 0xe2, 0x7b, 0x35, 0xef, 0x5d, 0x6f, 0xfd, 0xe6, 0xda, 0x7f, 0x2f, 0x00,
	0xf0, 0xd2, 0x3b, 0xd3, 0x20, 0x64, 0xe3, 0x0c, 0xab, 0xaf, 0xa5, 0x8c, 0x48, 0x45, 0x93, 0xb7,
	0xf0, 0xe4, 0xc2, 0xf3, 0x09, 0x62, 0xa1, 0x35, 0xa8, 0x0d, 0x14, 0xfe, 0xcb, 0x58, 0xeb, 0x1c,
	0xc7, 0x49, 0x87, 0x2a, 0x78, 0x3e, 0x63, 0x91, 0xaa, 0xc4, 0x30, 0xde, 0x8d, 0x55, 0xfe, 0x5f,
	0x33, 0x6d, 0xd2, 0x60, 0x2a, 0x9e, 0x4d, 0xd2, 0x29, 0xb3, 0x05, 0xe5, 0x90, 0x88, 0x77, 0x0e,
	0x94, 0x39, 0x30, 0x70, 0xd9, 0x90, 0xa0, 0xac, 0xb2, 0xd6, 0x54, 0x2e, 0x8a, 0x92, 0x09, 0x56,
	0x6c, 0x20, 0xcb, 0x9f, 0x9b, 0x36, 0x91, 0x54, 0x0c, 0xa5, 0x7c, 0x78, 0xdb, 0xb8, 0xfb, 0x1d,
	0xfa, 0xd3, 0xf1, 0x84, 0x86, 0xe8, 0x16, 0xeb, 0x9e, 0x7c, 0xbe, 0x22, 0x8f, 0x12, 0x90, 0x29,
	0xb6, 0x7c, 0x61, 0x0f, 0xd6, 0x87, 0xb0, 0xf4, 0xd4, 0xf3, 0x29, 0xb1, 0xb5, 0x79, 0xe4, 0xdf,
	0x35, 0x8c, 0x7a, 0xb5, 0xfe, 0x76, 0x01, 0x3a, 0x5b, 0x9e, 0xc7, 0xa6, 0x9e, 0x94, 0x57, 0x89,
	0xe3, 0xf2, 0x0b, 0x92, 0xa5, 0xb9, 0xc0, 0x92, 0x52, 0x8c, 0xb7, 0xf9, 0x6d, 0x72, 0x8e, 0x04,
	0x61, 0x14, 0x1c, 0xfe, 0x45, 0x5e, 0xe6, 0xb7, 0xbe, 0x05, 0xed, 0xfe, 0xa9, 0xe3, 0xba, 0xd1,
	0x09, 0x06, 0x9d, 0x66, 0x0c, 0x3f, 0xb0, 0x28, 0xb8, 0xd7, 0x43, 0xc7, 0xe5, 0xdf, 0x2a, 0x40,
	0x9b, 0xd3, 0x95, 0x84, 0x29, 0x4b, 0xbb, 0xb8, 0x6c, 0xd9, 0x43, 0xd5, 0xdf, 0x81, 0xd6, 0x9e,
	0xe7, 0x84, 0xce, 0x4c, 0x96, 0x4c, 0x5f, 0x73, 0xc4, 0xa3, 0x78, 0x07, 0x5a, 0x07, 0x24, 0x08,
	0xe2, 0xe2, 0xa5, 0x0b, 0x8b, 0x5b, 0x07, 0xd0, 0x16, 0xb7, 0xcb, 0xf4, 0x41, 0xa8, 0x7c, 0x28,
	0xfa, 0x20, 0xde, 0x92, 0x17, 0x5b, 0xb5, 0xa7, 0xed, 0x37, 0xf0, 0x0d, 0xd1, 0xb8, 0x01, 0xeb,
	0x43, 0x68, 0x6d, 0xb9, 0xae, 0xf8, 0x1d, 0x5d, 0x98, 0x7c, 0x94, 0x79, 0x4f, 0x1f, 0xf5, 0x6b,
	0x7d, 0x00, 0x4d, 0xf1, 0x43, 0xbe, 0x75, 0x96, 0xed, 0xdf, 0x9e, 0x11, 0x77, 0x4a, 0x8d, 0xeb,
	0x99, 0x8b, 0x5a, 0xad, 0xe8, 0xce, 0x75, 0xb6, 0x9b, 0x56, 0x2b, 0x68, 0xfd, 0x49, 0x09, 0x96,
	0x65, 0x16, 0x99, 0x6d, 0xc6, 0x4e, 0x1d, 0x6f, 0x78, 0xb9, 0xf5, 0xcd, 0xdf, 0x39, 0xe0, 0x98,
	0xb1, 0x53, 0xea, 0xa3, 0x4c, 0xba, 0x7c, 0xcb, 0x60, 0xec, 0x54, 0xde, 0x09, 0x14, 0x5b, 0x9f,
	0x26, 0x07, 0x7c, 0x1a, 0xe0, 0x6b, 0x5c, 0xbf, 0x01, 0x0b, 0x3b, 0x6c, 0x3c, 0x66, 0x5e, 0xac,
	0x46, 0xa6, 0xc9, 0x2a, 0x5b, 0xd1, 0xfa, 0x82, 0x91, 0x99, 0x3f, 0x28, 0x0a, 0x97, 0x9b, 0xeb,
	0x52, 0x6f, 0x48, 0xb1, 0xf6, 0xa6, 0xdd, 0x20, 0xd1, 0xf6, 0x07, 0x97, 0x9e, 0x24, 0x24, 0xa4,
	0x2d, 0xd4, 0xd0, 0x27, 0x36, 0x76, 0x02, 0x24, 0xaa, 0x9e, 0x41, 0x3d, 0xd4, 0x75, 0x42, 0xba,
	0x2b, 0x87, 0x5c, 0xd1, 0x86, 0xfc, 0x15, 0x75, 0xeb, 0xa7, 0x6a, 0x5a, 0xc4, 0x0c, 0x14, 0xbc,
	0x05, 0x2d, 0x8f, 0xf9, 0x63, 0xe2, 0xca, 0xe0, 0x4b, 0x41, 0x51, 0x39, 0x3a, 0xe3, 0x1d, 0xd5,
	0x9b, 0x2a, 0x59, 0xcf, 0x2d, 0x69, 0xed, 0x1a, 0xec, 0xa4, 0xef, 0xb3, 0x05, 0xbc, 0xe9, 0xb9,
	0x4e, 0xec, 0x2e, 0x5b, 0x84, 0x5a, 0x38, 0x9e, 0xc4, 0x77, 0x95, 0xca, 0xd6, 0x3f, 0x29, 0xc1,
	0x82, 0xd2, 0x98, 0x77, 0xcf, 0x2e, 0x53, 0xbc, 0xce, 0x61, 0xac, 0x58, 0xb2, 0x3a, 0xe8, 0x81,
	0xb2, 0xff, 0x5c, 0x56, 0xc9, 0x2e, 0x2f, 0xd7, 0x6c, 0xfe, 0x32, 0xae, 0x3e, 0xcf, 0x7c, 0x94,
	0x62, 0x0d, 0x6a, 0x02, 0xa0, 0x1c, 0x06, 0x65, 0x3d, 0xf1, 0x7e, 0x04, 0xe8, 0xe0, 0x4c, 0x5c,
	0x0a, 0x20, 0x10, 0xb8, 0x82, 0x8f, 0x23, 0x99, 0x0f, 0x29, 0xad, 0x43, 0x5d, 0x56, 0x98, 0x8e,
	0x51, 0x92, 0x31, 0xf4, 0xc0, 0xf9, 0xba, 0x79, 0xb5, 0x93, 0xd8, 0x8e, 0x37, 0xd4, 0x93, 0x8c,
	0x59, 0x57, 0xa1, 0xf9, 0xd4, 0xf1, 0xc2, 0x7b, 0x77, 0xb7, 0x7c, 0x9f, 0x9c, 0xa3, 0x34, 0x3c,
	0x6d, 0xeb, 0xc7, 0x25, 0xae, 0x47, 0x79, 0xe1, 0x68, 0x87, 0x5c, 0xe6, 0x35, 0x98, 0x47, 0xf2,
	0xdb, 0xa6, 0x43, 0xc7, 0x13, 0x08, 0x5f, 0x4a, 0x67, 0xcc, 0x73, 0x94, 0x71, 0xb7, 0x14, 0xdb,
	0x7c, 0x40, 0x26, 0x0b, 0x79, 0xe2, 0x0d, 0x64, 0x86, 0x91, 0x9e, 0xe9, 0xd5, 0xef, 0xb1, 0xd0,
	0xb8, 0xf0, 0xa9, 0xaa, 0x28, 0xa3, 0x8f, 0xae, 0xfe, 0x69, 0x87, 0xa4, 0xa4, 0x59, 0xeb, 0x1f,
	0x8b, 0xd7, 0x7c, 0x45, 0xba, 0x94, 0xcb, 0x5d, 0x66, 0x1e, 0x49, 0x26, 0x5e, 0x1c, 0xb4, 0xc9,
	0xfc, 0x69, 0x09, 0x5a, 0x42, 0x89, 0x7f, 0x1a, 0x5c, 0xfa, 0xa5, 0xe7, 0xf5, 0xf1, 0xa3, 0xf8,
	0xf1, 0x0b, 0xed, 0x7a, 0x80, 0x7e, 0x7e, 0x35, 0xfc, 0xd3, 0xd7, 0x60, 0x41, 0x3f, 0xae, 0x62,
	0xab, 0x95, 0xf5, 0x2f, 0xca, 0xd0, 0xda, 0x9e, 0x9e, 0x8b, 0x14, 0x23, 0x97, 0x2b, 0x3e, 0x7f,
	0x27, 0xb4, 0x6d, 0xc7, 0x75, 0x1f, 0x33, 0xd3, 0x6f, 0xa7, 0x25, 0xf7, 0x5e, 0xce, 0xcc, 0x1e,
	0xde, 0x31, 0xd3, 0x79, 0x0d, 0x06, 0x62, 0x89, 0x91, 0x52, 0xb1, 0x01, 0x8d, 0xfb, 0xc4, 0x71,
	0x25, 0x60, 0x15, 0x0f, 0x95, 0xd7, 0xd8, 0x9e, 0x9e, 0x23, 0xa5, 0x62, 0x1d, 0xea, 0xfc, 0xf3,
	0x21, 0x73, 0x5d, 0x5d, 0xa7, 0xd8, 0x5e, 0xfd, 0xd1, 0xcf, 0x6e, 0x14, 0xfe, 0xdd, 0xcf, 0x6e,
	0x14, 0x7e, 0xfa, 0xb3, 0x1b, 0x85, 0xbf, 0xf1, 0x27, 0x37, 0x7e, 0xe5, 0xe7, 0x7f, 0xe7, 0x66,
	0xe1, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x99, 0x97, 0x74, 0x01, 0xda, 0xac, 0x00, 0x00,
}
